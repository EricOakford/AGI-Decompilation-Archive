[***********************************************************[[ rm.Tunnel_10[[ Another tunnel location, this one is a dead end. There is[ a pile of gold nuggets that Jerrod can dig up. This room[ also has the pick that Jerrod needs to dig in the mine.[[***********************************************************[ **************************************[ LOCAL DEFINES[ **************************************#define oDark1                       o1#define oDark2                       o2#define oDark3                       o3#define oDark4                       o4#define oDark5                       o5#define oDark6                       o6#define oDark7                       o7#define oDark8                       o8#define oDark9                       o9#define oDark10                     o10#define oDark11                     o11#define oDark12                     o12#define oPick                       o13#define oNuggets                    o14#define vFlicker                   v220#define vEgoDX                     v221#define vEgoDY                     v222#define vDigTimer                  v223#define vEgoLoop                   v224#define vEgoCel                    v225#define fDrawDark                  f220#define fLight1                    f221#define fLight2                    f222#define fLight3                    f223#define fLight4                    f224#define fLight5                    f225#define fLight6                    f226#define fLight7                    f227#define fLight8                    f228#define fLight9                    f229#define fLight10                   f230#define fLight11                   f231#define fLight12                   f232[ f233 through f237 are not used#define fClimbing                  f238#define fFalling                   f239[ **************************************[ FIRST CYCLE ONLY[ **************************************if (isset(newRoom))  {  [ load the tunnel logic, that handles all the common  [ tunnel functions  load.logics(lgc.Tunnels);  [ load this room's picture  load.pic(currentRoom);    [ load views needed by objects in the room  load.view(vw.WideJerrodCA);  load.view(vw.Darkness);  load.view(vw.TunnelClimbing);  load.view(vw.TunnelFalling);  load.view(vw.TunnelDigging);  load.view(vw.TunnelArt);  [ load sound used in the room  load.sound(m.FoundGold);    [ draw the picture  draw.pic(currentRoom);    [ add the darkness panels - these black out areas of the  [ tunnel that are beyond the range of Jerrod's light  [ (don't draw them yet, lgc.DarkenTunnel will do that)  animate.obj(oDark1);  set.view(oDark1, vw.Darkness);  set.loop(oDark1, 0);  set.cel(oDark1, 4);  set.priority(oDark1, 15);  ignore.objs(oDark1);  ignore.blocks(oDark1);  ignore.horizon(oDark1);  position(oDark1, 41, 19);  [ darkness panel 2  animate.obj(oDark2);  set.view(oDark2, vw.Darkness);  set.loop(oDark2, 0);  set.cel(oDark2, 4);  set.priority(oDark2, 15);  ignore.objs(oDark2);  ignore.blocks(oDark2);  position(oDark2, 41, 39);  [ darkness panel 3  animate.obj(oDark3);  set.view(oDark3, vw.Darkness);  set.loop(oDark3, 0);  set.cel(oDark3, 4);  set.priority(oDark3, 15);  ignore.objs(oDark3);  ignore.blocks(oDark3);  position(oDark3, 41, 59);  [ darkness panel 4  animate.obj(oDark4);  set.view(oDark4, vw.Darkness);  set.loop(oDark4, 0);  set.cel(oDark4, 4);  set.priority(oDark4, 15);  ignore.objs(oDark4);  ignore.blocks(oDark4);  position(oDark4, 41, 79);  [ darkness panel 5  animate.obj(oDark5);  set.view(oDark5, vw.Darkness);  set.loop(oDark5, 0);  set.cel(oDark5, 4);  set.priority(oDark5, 15);  ignore.objs(oDark5);  ignore.blocks(oDark5);  position(oDark5, 41, 99);  [ darkness panel 6  animate.obj(oDark6);  set.view(oDark6, vw.Darkness);  set.loop(oDark6, 0);  set.cel(oDark6, 4);  set.priority(oDark6, 15);  ignore.objs(oDark6);  ignore.blocks(oDark6);  position(oDark6, 41, 119);  [ darkness panel 7  animate.obj(oDark7);  set.view(oDark7, vw.Darkness);  set.loop(oDark7, 0);  set.cel(oDark7, 4);  set.priority(oDark7, 15);  ignore.objs(oDark7);  ignore.blocks(oDark7);  position(oDark7, 41, 139);  [ darkness panel 8  animate.obj(oDark8);  set.view(oDark8, vw.Darkness);  set.loop(oDark8, 0);  set.cel(oDark8, 4);  set.priority(oDark8, 15);  ignore.objs(oDark8);  ignore.blocks(oDark8);  position(oDark8, 41, 159);  [ darkness panel 9  animate.obj(oDark9);  set.view(oDark9, vw.Darkness);  set.loop(oDark9, 0);  set.cel(oDark9, 0);  set.priority(oDark9, 15);  ignore.objs(oDark9);  ignore.blocks(oDark9);  position(oDark9, 94, 159);  [ darkness panel 10  animate.obj(oDark10);  set.view(oDark10, vw.Darkness);  set.loop(oDark10, 0);  set.cel(oDark10, 0);  set.priority(oDark10, 15);  ignore.objs(oDark10);  ignore.blocks(oDark10);  position(oDark10, 102, 159);  [ darkness panel 11  animate.obj(oDark11);  set.view(oDark11, vw.Darkness);  set.loop(oDark11, 0);  set.cel(oDark11, 0);  set.priority(oDark11, 15);  ignore.objs(oDark11);  ignore.blocks(oDark11);  position(oDark11, 110, 159);  [ darkness panel 12  animate.obj(oDark12);  set.view(oDark12, vw.Darkness);  set.loop(oDark12, 0);  set.cel(oDark12, 0);  set.priority(oDark12, 15);  ignore.objs(oDark12);  ignore.blocks(oDark12);  position(oDark12, 118, 159);    [ if Jerrod hasn't found the pick yet  if (PickStatus == 0)    {    [ pick is at bottom of this shaft    animate.obj(oPick);    set.view(oPick, vw.TunnelArt);    set.loop(oPick, 0);    set.cel(oPick, 0);    set.priority(oPick, 12);    ignore.blocks(oPick);    ignore.objs(oPick);    position(oPick, 94, 138);    draw(oPick);    stop.update(oPick);    }    [ a pile of gold nuggets in tunnel wall  animate.obj(oNuggets);  set.view(oNuggets, vw.TunnelArt);  set.loop(oNuggets, 0);  set.cel(oNuggets, 1);  set.priority(oNuggets, 4);  position(oNuggets, 106, 104);      [ if nugget found but not yet picked up  if (Nugget10Status == NUGGET_FOUND)    {    [ draw it on screen    draw(oNuggets);    stop.update(oNuggets);    }      [ Jerrod  animate.obj(ego);  [ oops- setting view here is totally unecessary  set.view(ego, vw.WideJerrodCA);  [ Jerrod is always climbing when coming to this room  set(fClimbing);  set.view(ego, vw.TunnelClimbing);  [ set and fix loop  set.loop(ego, 2);  fix.loop(ego);  [ add Jerrod to room  draw(ego);    [ the room starts out all darkened  call(lgc.DarkenTunnel);    [ now show the picture  show.pic();  }  [ **************************************[ EVERY CYCLE[ **************************************[ to simulate flickering of torch, use a random timer to[ redraw a black box over the area of tunnel that is[ darkened[ if flicker timer has counted downif (vFlicker == 0)  {  [ if Jerrod is stopped  if (egoDir == STOPPED)    {    [ if the redraw darkness flag is NOT set    if (!isset(fDrawDark))      {      [ draw a black box over the entire tunnel (when Jerrod      [ moves, the cleared areas will be uncovered)      clear.text.rect(1, 0, 21, 39, BLACK);      set(fDrawDark);      }    }  else    {    [ Jerrod is moving; clear the redraw darkness flag    reset(fDrawDark);    [ choose a random time between 2 and 4 cycles    random(2, 4, FlickerTime);    [ set flicker delay to the random vlaue    vFlicker = FlickerTime;    [ draw a black box over the entire tunnel    clear.text.rect(1, 0, 21, 39, BLACK);    }  }  [ decrement flicker counter--vFlicker;[ if Jerrod has a lit lantern or lit matchif ((isset(LanternLit) || isset(MatchLit)))  {  [ depending on position, remove the darkness panels so  [ Jerrod can see the area around him  if (posn(ego, 50, 0, 65, 68) && !isset(fLight1))    {    erase(oDark1);    set(fLight1);    }  if (posn(ego, 50, 19, 65, 88) && !isset(fLight2))    {    erase(oDark2);    set(fLight2);    }  if (posn(ego, 50, 39, 65, 108) && !isset(fLight3))    {    erase(oDark3);    set(fLight3);    }  if (posn(ego, 50, 59, 89, 128) && !isset(fLight4))    {    erase(oDark4);    set(fLight4);    }  if (posn(ego, 50, 79, 89, 148) && !isset(fLight5))    {    erase(oDark5);    set(fLight5);    }  if (posn(ego, 50, 99, 89, 167) && !isset(fLight6))    {    erase(oDark6);    set(fLight6);    }  if (posn(ego, 50, 119, 89, 167) && !isset(fLight7))    {    erase(oDark7);    set(fLight7);    }  if (posn(ego, 50, 139, 89, 167) && !isset(fLight8))    {    erase(oDark8);    set(fLight8);    }  if (posn(ego, 69, 118, 98, 155) && !isset(fLight9))    {    erase(oDark9);    set(fLight9);    }  if (posn(ego, 77, 118, 106, 155) && !isset(fLight10))    {    erase(oDark10);    set(fLight10);    }  if (posn(ego, 85, 118, 114, 155) && !isset(fLight11))    {    erase(oDark11);    set(fLight11);    }  if (posn(ego, 93, 118, 122, 155) && !isset(fLight12))    {    erase(oDark12);    set(fLight12);    }  }  [ if on ladder but not climbing yetif (posn(ego, 56, 117, 63, 117) && !isset(fClimbing))  {  [ Jerrod is climbing the ladder  set(fClimbing);  [ reposition ego object so Jerrod appears on the ladder  [ correctly  vEgoDX = 0;  vEgoDY = -3; [ 253;  reposition(ego, vEgoDX, vEgoDY);  set.view(ego, vw.TunnelClimbing);  [ set and fix loop  set.loop(ego, 2);  fix.loop(ego);  }  [ if off the ladder but climbingif (posn(ego, 56, 115, 63, 116) && isset(fClimbing))  {  [ Jerrod isn't climbing  reset(fClimbing);  [ reposition ego object so Jerrod appears on the ground  [ correctly  vEgoDX = 0;  vEgoDY = 3;  reposition(ego, vEgoDX, vEgoDY);  set.view(ego, vw.WideJerrodCA);  [ allow auto loop selection  release.loop(ego);  [ step size when walking is 1  vEgoDX = 1;  step.size(ego, vEgoDX);  }  [ if Jerrod is not falling (not sure why this check -[ falling and climbing are mutually excluive; no need to[ check for 'not falling' here- a check for climbing by [ itself would be sufficient)if (!isset(fFalling))  {  [ if Jerrod is climbing  if (isset(fClimbing))    {    [ set step size based on direction        [ if moving up or down ladder    if ((egoDir == UP || egoDir == DOWN))      {      [ step size is 2 when moving up or down on ladder      vEgoDY = 2;      step.size(ego, vEgoDY);      }    else      {      [ any other direction, step size is 1      vEgoDX = 1;      step.size(ego, vEgoDX);      }    }  }  [ if Jerrod is climbing, and hits an alarm lineif (isset(egoHitSpecial) && isset(fClimbing))  {  [ Jerrod starts falling  set(fFalling);  reset(fClimbing);  ignore.blocks(ego);  set.view(ego, vw.TunnelFalling);  [ move him to bottom of screen  vEgoDY = 130;  [ use DX variable for step size  vEgoDX = 10;  move.obj.v(ego, EgoX, vEgoDY, vEgoDX, DoneNoAction);  }  [ if Jerrod gets to bottom of shaft while fallingif (EgoY > 120 && isset(fFalling))  {  [ done falling  reset(fFalling);  [ set global flag to start final death sequence  set(FellOffLadder);  }  [ if timer is activated (>0)if (vDigTimer > 0)  {  [ increment timer each cycle  ++vDigTimer;  }  [ after 3 cyclesif (vDigTimer == 3)  {  [ get loop (needed to correctly place the gold nugget)  current.loop(ego, vEgoLoop);  }  [ when 25 or more cycles pass with gold still uncoveredif (vDigTimer > 25 && Nugget10Status == NUGGET_HIDDEN)  {  [ get Jerrod's current cel  current.cel(ego, vEgoCel);  [ gold is uncovered at cel 2 only  if (vEgoCel == 2)    {    [ which way Jerrod is facing determines how to make    [ nuggets appear    if (vEgoLoop == 0)      {      [ if Jerrod is by the nugget's position      if (posn(ego, 82, 118, 87, 120))        {        [ uncover the nuggets        Nugget10Status = NUGGET_FOUND;        draw(oNuggets);        sound(m.FoundGold, DoneNoAction);        stop.update(oNuggets);        [ score a point        ++currentScore;        }      }    if (vEgoLoop == 1)      {      [ if Jerrod is by the nugget's position      if (posn(ego, 98, 118, 106, 126))        {        [ uncover the nuggets        Nugget10Status = 1;        draw(oNuggets);        sound(m.FoundGold, DoneNoAction);        stop.update(oNuggets);        [ score a point        ++currentScore;        }      }    }  }  [ when 30 cycles passif (vDigTimer == 30)  {  [ Jerrod is done digging    [ Jerrod no longer cycles when not moving  reset(CycleAtRest);  start.motion(ego);  [ restore normal tunnel view  set.view(ego, vw.WideJerrodCA);  }  [ after 31 cyclesif (vDigTimer == 31)  {  [ reset the timer  vDigTimer = 0;  [ if nugget is now found  if (Nugget10Status == NUGGET_FOUND)    {    [ loop determines how to check for position    if (vEgoLoop == 0)      {      if (posn(ego, 82, 118, 87, 120))        {        print.at("You've struck gold!", 2, 26, 10);        goto(CheckExits);        }      }    if (vEgoLoop == 1)      {      if (posn(ego, 98, 118, 106, 126))        {        print.at("You've struck gold!", 2, 26, 10);        goto(CheckExits);        }      }    }      [ if no gold found,   print.at("Nothin'!", 2, 26, 10);  }  CheckExits:[ **************************************[ CHECK FOR AN EXIT CONDITION[ **************************************[ top edgeif (posn(ego, 50, 59, 100, 60))  {  [ redraw dark panels  draw(oDark7);  draw(oDark9);  draw(oDark10);  [ update all objects (not sure why they do this since the  [ new.room command comes next - I guess it's so there'a a  [ split second before the room change with the room  [ updated)  force.update(ego);  [ position Jerrod to appear correctly on next screen  position(ego, 72, 164);  new.room(rm.Tunnel_9); [ ##LE001##  }  [ **************************************[ PROCESS PLAYER INPUT[ **************************************[ if player hasn't provided input no need to do said testsif (!isset(haveInput))  {  goto(Done);  }  [ look wall/lookif ((said("examine", "wall") ||     said("examine", "mine") ||     said("examine", "cave") ||     said("examine", "around") ||     said("examine")))  {  [ if Jerrod has a lit lantern or lit match  if ((isset(LanternLit) || isset(MatchLit)))    {    [ if by the pick or the nugget    if ((posn(ego, 75, 141, 96, 160) ||         posn(ego, 71, 118, 96, 123)))      {      [ if by the pick      if (posn(ego, 75, 141, 96, 160))        {        if (PickStatus == 0)          {          print.at("I'll be!! It looks like a pick lyin' next to the rock!", 2, 26, 10);          }        else          {          print.at("Ya scan the walls for gold.", 2, 26, 10);          }        }      [ if by the nugget      if (posn(ego, 71, 118, 96, 123))        {        [ if nugget is found, still in the wall        if (Nugget10Status == NUGGET_FOUND)          {          print.at("Just look at that gold glitter!", 2, 26, 10);          }        else          {          print.at("Ya scan the walls for gold.", 2, 26, 10);          }        }      }    else      {      print.at("Ya scan the walls for gold.", 2, 26, 10);      }    }  else    {    print.at("It's too dern dark in here to see!", 2, 26, 10);    }  }[ look goldif ((said("examine", "gold") ||     said("examine", "gold", "nugget") ||     said("examine", "nugget")))  {  [ if Jerrod has a lit lantern or lit match  if ((isset(LanternLit) || isset(MatchLit)))    {    if (Nugget10Status == NUGGET_FOUND)      {      [ if near the nuggets      if (posn(ego, 78, 118, 108, 154))        {        print.at("Just look at that gold glitter!", 2, 26, 10);        }      else        {        print.at("There's no gold in sight right here.", 2, 26, 10);        }      }    else      {      print.at("There's no gold in sight right here.", 2, 26, 10);      }    }  else    {    print.at("It's too dern dark in here to see!", 2, 26, 10);    }  }  [ get goldif ((said("acquire", "gold") ||     said("acquire", "gold", "nugget") ||     said("acquire", "nugget")))  {  [ if nuggets are visible in the tunnel wall  if (Nugget10Status == NUGGET_FOUND)    {    [ if near the nuggets    if (posn(ego, 72, 118, 102, 130))      {      print.at("Ya reach out and grab the gold nuggets!", 2, 26, 10);      [ erase nuggets from screen      erase(oNuggets);      [ if gold amount is less than 110      if (GoldIndex < 110)        {        [ get two units of gold        GoldIndex  += 2;        }      else        {        [ otherwise get one unit of gold        GoldIndex  += 1;        }      [ set nugget status to 'gone'      Nugget10Status = NUGGET_GONE;      [ update inventory with correct amount of gold      call(lgc.AdjustGold);      }    else      {      print.at("Ya can't reach any gold from here.", 2, 26, 10);      }    }  else    {    print.at("There's no gold in sight right here.", 2, 26, 10);    }  }  [ use pickif ((said("pick") ||     said("pick", "gold") ||     said("use", "pick") ||     said("swing", "pick")))  {  [ if Jerrod has the pick  if (has("Pick"))    {    [ if Jerrod is climbing or falling    if ((isset(fClimbing) || isset(fFalling)))      {      [ can't dig while climbing or falling      if (isset(fClimbing))        {        print.at("Ya can't do that while yer climbin'!", 2, 26, 10);        }      if (isset(fFalling))        {        print.at("That's impossible right now!", 2, 26, 10);        }      }    else      {      [ if touching an alarm line       if (isset(egoHitSpecial))        {        [ this is an area where Jerrod can dig for gold        set.view(ego, vw.TunnelDigging);        [ start timer        vDigTimer = 1;        [ begin at first cel        set.cel(ego, 0);        stop.motion(ego);        [ allow ego object to cycle when not moving        set(CycleAtRest);        [ start digging        start.cycling(ego);        }      else        {        print.at("You're close to a likely spot. Try that nearby.", 2, 26, 10);        }      }    }  else    {    print.at("Ya don't have a pick.", 2, 26, 10);    }  }  [ look groundif ((said("examine", "deck") ||     said("examine", "dirt")))  {  [ if Jerrod has a lit lantern or lit match  if ((isset(LanternLit) || isset(MatchLit)))    {    [ if close to pick    if (posn(ego, 75, 141, 96, 160))      {      [ if pick is still here at bottom of the shaft      if (PickStatus == 0)        {        print.at("I'll be!! It looks like a pick lyin' next to the rock!", 2, 26, 10);        }      else        {        print.at("Ya scan the walls for gold.", 2, 26, 10);        }      }    else      {      print.at("Ya look at the ground for any sign of gold.", 2, 26, 10);      }    }  else    {    print.at("It's too dern dark in here to see!", 2, 26, 10);    }  }  [ get pickif (said("acquire", "pick"))  {  [ if pick is still here at bottom of the shaft  if (PickStatus == 0)    {    [ if near the pick    if (posn(ego, 80, 141, 91, 149))      {      [ pic it up      print.at("Ya eagerly grab the pick!!", 2, 26, 10);      erase(oPick);      get("Pick");      [ score one point      currentScore  += 1;      sound(m.FoundGold, DoneNoAction);      [ set pick status to 'found'      PickStatus = 1;      }    else      {      print.at("Ya cain't do that from here!", 2, 26, 10);      }    }  else    {    print.at("The pick is not here.", 2, 26, 10);    }  }  [ look pickif (said("examine", "pick"))  {  [ if Jerrod has a lit lantern or lit match  if ((isset(LanternLit) || isset(MatchLit)))    {    [ if pick is still here at bottom of the shaft    if (PickStatus == 0)      {      [ if near the pick      if (posn(ego, 80, 141, 91, 147))        {        print.at("I'll be!! It looks like a pick lyin' next to the rock!", 2, 26, 10);        }      else        {        print.at("Ya cain't do that from here!", 2, 26, 10);        }      }      [ if Jerrod has the pick    if (PickStatus == 1)      {      print.at("That's a mighty fine pick!", 2, 26, 10);      }    [ if Jerrod dropped the pick    if (PickStatus == 2)      {      print.at("The pick is not here.", 2, 26, 10);      }    }  else    {    print.at("It's too dern dark in here to see!", 2, 26, 10);    }  }  [ look ladderif (said("examine", "ladder"))  {  [ if Jerrod has a lit lantern or lit match  if ((isset(LanternLit) || isset(MatchLit)))    {    [ if near the ladder    if (posn(ego, 50, 0, 76, 160))      {      print.at("It's just a wooden ladder.", 2, 26, 10);      }    else      {      print.at("There's no ladder in sight right here.", 2, 26, 10);      }    }  else    {    print.at("It's too dern dark in here to see!", 2, 26, 10);    }  }  Done:[ call tunnel logic to run code common to all tunnelscall(lgc.Tunnels);return();[ **************************************[ MESSAGES[ **************************************#message 1 "Ya scan the walls for gold."#message 13 "Ya can't do that while yer climbin'!"#message 14 "You're close to a likely spot. Try that nearby."#message 15 "Ya don't have a pick."#message 16 "That's impossible right now!"#message 17 "It's too dern dark in here to see!"#message 20 "Nothin'!"#message 23 "Ya look at the ground for any sign of gold."#message 24 "I'll be!! It looks like a pick lyin' next to the rock!"#message 25 "Just look at that gold glitter!"#message 26 "You've struck gold!"#message 27 "Ya cain't do that from here!"#message 28 "The pick is not here."#message 29 "Ya eagerly grab the pick!!"#message 30 "That's a mighty fine pick!"#message 31 "Ya reach out and grab the gold nuggets!"#message 32 "Ya can't reach any gold from here."#message 47 "There's no gold in sight right here."#message 80 "There's no ladder in sight right here."#message 81 "It's just a wooden ladder."