[***********************************************************[[ rm.Tunnel_9[[ Another tunnel location, that leads to a dead end.[ [***********************************************************[ **************************************[ LOCAL DEFINES[ **************************************#define oDark1                       o1#define oDark2                       o2#define oDark3                       o3#define oDark4                       o4#define oDark5                       o5#define oDark6                       o6#define oDark7                       o7#define oDark8                       o8#define oDark9                       o9#define vFlicker                   v220#define vEgoDX                     v221#define vEgoDY                     v222#define vDigTimer                  v223#define fDrawDark                  f220#define fLight1                    f221#define fLight2                    f222#define fLight3                    f223#define fLight4                    f224#define fLight5                    f225#define fLight6                    f226#define fLight7                    f227#define fLight8                    f228#define fLight9                    f229[ f230 through f237 are not used#define fClimbing                  f238#define fFalling                   f239[ **************************************[ FIRST CYCLE ONLY[ **************************************if (isset(newRoom))  {  [ load the tunnel logic, that handles all the common  [ tunnel functions  load.logics(lgc.Tunnels);  [ load picture for current room  load.pic(currentRoom);    [ load views needed by objects in the room  load.view(vw.WideJerrodCA);  load.view(vw.Darkness);  load.view(vw.TunnelClimbing);  load.view(vw.TunnelFalling);  load.view(vw.TunnelDigging);  [ draw the picture  draw.pic(currentRoom);    [ add the darkness panels - these black out areas of the  [ tunnel that are beyond the range of Jerrod's light  [ (don't draw them yet, lgc.DarkenTunnel will do that)  animate.obj(oDark1);  set.view(oDark1, vw.Darkness);  set.loop(oDark1, 0);  set.cel(oDark1, 4);  set.priority(oDark1, 15);  ignore.objs(oDark1);  ignore.blocks(oDark1);  position(oDark1, 66, 167);  [ darkness panel 2  animate.obj(oDark2);  set.view(oDark2, vw.Darkness);  set.loop(oDark2, 0);  set.cel(oDark2, 4);  set.priority(oDark2, 15);  ignore.objs(oDark2);  ignore.blocks(oDark2);  position(oDark2, 66, 148);  [ darkness panel 3  animate.obj(oDark3);  set.view(oDark3, vw.Darkness);  set.loop(oDark3, 0);  set.cel(oDark3, 4);  set.priority(oDark3, 15);  ignore.objs(oDark3);  ignore.blocks(oDark3);  position(oDark3, 66, 129);  [ darkness panel 4  animate.obj(oDark4);  set.view(oDark4, vw.Darkness);  set.loop(oDark4, 0);  set.cel(oDark4, 4);  set.priority(oDark4, 15);  ignore.objs(oDark4);  ignore.blocks(oDark4);  position(oDark4, 66, 110);  [ darkness panel 5  animate.obj(oDark5);  set.view(oDark5, vw.Darkness);  set.loop(oDark5, 0);  set.cel(oDark5, 4);  set.priority(oDark5, 15);  ignore.objs(oDark5);  ignore.blocks(oDark5);  position(oDark5, 66, 91);  [ darkness panel 6  animate.obj(oDark6);  set.view(oDark6, vw.Darkness);  set.loop(oDark6, 0);  set.cel(oDark6, 4);  set.priority(oDark6, 15);  ignore.objs(oDark6);  ignore.blocks(oDark6);  position(oDark6, 66, 72);  [ darkness panel 7  animate.obj(oDark7);  set.view(oDark7, vw.Darkness);  set.loop(oDark7, 0);  set.cel(oDark7, 4);  set.priority(oDark7, 15);  ignore.objs(oDark7);  ignore.blocks(oDark7);  position(oDark7, 66, 53);  [ darkness panel 8  animate.obj(oDark8);  set.view(oDark8, vw.Darkness);  set.loop(oDark8, 0);  set.cel(oDark8, 4);  set.priority(oDark8, 15);  ignore.objs(oDark8);  ignore.blocks(oDark8);  position(oDark8, 66, 34);  [ darkness panel 9  animate.obj(oDark9);  set.view(oDark9, vw.Darkness);  set.loop(oDark9, 0);  set.cel(oDark9, 4);  set.priority(oDark9, 15);  ignore.objs(oDark9);  ignore.blocks(oDark9);  ignore.horizon(oDark9);  position(oDark9, 66, 19);    [ Jerrod  animate.obj(ego);  [ Jerrod is always climbing in this room  set(fClimbing);  set.view(ego, vw.TunnelClimbing);  set.loop(ego, 2);  fix.loop(ego);  draw(ego);    [ the room starts out all darkened  call(lgc.DarkenTunnel);    [ now show the picture  show.pic();  }  [ **************************************[ EVERY CYCLE[ **************************************[ to simulate flickering of torch, use a random timer to[ redraw a black box over the area of tunnel that is[ darkened[ if flicker timer has counted downif (vFlicker == 0)  {  [ if Jerrod is stopped  if (egoDir == STOPPED)    {    [ if the redraw darkness flag is NOT set    if (!isset(fDrawDark))      {      [ draw a black box over the entire tunnel (when Jerrod      [ moves, the cleared areas will be uncovered)      clear.text.rect(1, 0, 21, 39, BLACK);      set(fDrawDark);      }    }  else    {    [ Jerrod is moving; clear the redraw darkness flag    reset(fDrawDark);    [ choose a random time between 2 and 4 cycles    random(2, 4, FlickerTime);    [ set flicker delay to the random vlaue    vFlicker = FlickerTime;    [ draw a black box over the entire tunnel    clear.text.rect(1, 0, 21, 39, BLACK);    }  }  [ decrement flicker counter--vFlicker;[ if Jerrod has a lit lantern or lit matchif ((isset(LanternLit) || isset(MatchLit)))  {  [ depending on position, remove the darkness panels so  [ Jerrod can see the area around him  if (posn(ego, 60, 147, 80, 167) && !isset(fLight1))    {    erase(oDark1);    set(fLight1);    }  if (posn(ego, 60, 128, 80, 167) && !isset(fLight2))    {    erase(oDark2);    set(fLight2);    }  if (posn(ego, 60, 109, 80, 167) && !isset(fLight3))    {    erase(oDark3);    set(fLight3);    }  if (posn(ego, 60, 90, 80, 159) && !isset(fLight4))    {    erase(oDark4);    set(fLight4);    }  if (posn(ego, 60, 71, 80, 140) && !isset(fLight5))    {    erase(oDark5);    set(fLight5);    }  if (posn(ego, 60, 52, 80, 121) && !isset(fLight6))    {    erase(oDark6);    set(fLight6);    }  if (posn(ego, 60, 33, 80, 102) && !isset(fLight7))    {    erase(oDark7);    set(fLight7);    }  if (posn(ego, 60, 14, 80, 83) && !isset(fLight8))    {    erase(oDark8);    set(fLight8);    }  if (posn(ego, 60, 0, 80, 68) && !isset(fLight9))    {    erase(oDark9);    set(fLight9);    }  }  [ if Jerrod is not falling (not sure why this check -[ falling and climbing are mutually excluive; no need to[ check for 'not falling' here- a check for climbing by [ itself would be sufficient)if (!isset(fFalling))  {  [ if Jerrod is climbing  if (isset(fClimbing))    {    [ set step size based on direction        [ if moving up or down ladder    if ((egoDir == UP || egoDir == DOWN))      {      [ step size is 2 when moving up      [ or down on ladder      vEgoDY = 2;      step.size(ego, vEgoDY);      }    else      {      [ any other direction, step size is 1      vEgoDX = 1;      step.size(ego, vEgoDX);      }    }  }  [ if Jerrod is climbingif (isset(fClimbing))  {  [ if Jerrod strays far enough from the ladder (hits alarm  [ line)  if (isset(egoHitSpecial))    {    [ Jerrod starts falling    ignore.blocks(ego);    set(fFalling);    reset(fClimbing);    set.view(ego, vw.TunnelFalling);    [ move him to bottom of screen (200 is an invalid Y    [ value, but it still works due to how the room checks    [ for reaching bottom)    vEgoDY = 200;    [ use DX variable for step size    vEgoDX = 10;    move.obj.v(ego, EgoX, vEgoDY, vEgoDX, DoneNoAction);    }  }  [ if Jerrod hits bottom edge while fallingif (edgeEgoHit == BOTTOM_EDGE && isset(fFalling))  {  [ done falling  reset(fFalling);  [ set global flag to start final death sequence  set(FellOffLadder);  }  [ **************************************[ CHECK FOR AN EXIT CONDITION[ **************************************[ top of screenif (posn(ego, 50, 59, 100, 60))  {  [ update all objects (not sure why they do this since the  [ new.room command comes next - I guess it's so there'a a  [ split second before the room change with the room  [ updated)  force.update(ego);  [ position Jerrod to appear correctly on next screen  position(ego, 59, 164);  new.room(rm.Tunnel_8); [ ##LE001##  }  [ bottom of screen (not falling)if (posn(ego, 50, 165, 100, 166) && !isset(fFalling))  {  [ update all objects (not sure why they do this since the  [ new.room command comes next - I guess it's so there'a a  [ split second before the room change with the room  [ updated)  force.update(ego);  [ position Jerrod to appear correctly on next screen  position(ego, 59, 61);  new.room(rm.Tunnel_10); [ ##LE002##  }  [ **************************************[ PROCESS PLAYER INPUT[ **************************************[ if player hasn't provided input no need to do said testsif (!isset(haveInput))  {  goto(Done);  }  [ look gold/look nuggetif ((said("examine", "gold") ||     said("examine", "gold", "nugget") ||     said("examine", "nugget")))  {  print.at("There's no gold in sight right here.", 2, 26, 10);  }  [ get goldif ((said("acquire", "gold") ||     said("acquire", "gold", "nugget") ||     said("acquire", "nugget")))  {  print.at("There's no gold in sight right here.", 2, 26, 10);  }  [ use pickif ((said("pick") ||     said("pick", "gold") ||     said("use", "pick") ||     said("swing", "pick")))  {  [ if Jerrod has the pick  if (has("Pick"))    {    [ if Jerrod is climbing or falling ( in this room    [ climbing is only thing allowed, unless he falls off    [ the ladder...)    if ((isset(fClimbing) || isset(fFalling)))      {      if (isset(fClimbing))        {        print.at("Ya can't do that while yer climbin'!", 2, 26, 10);        }      if (isset(fFalling))        {        print.at("That's impossible right now!", 2, 26, 10);        }      }    else      {      [ if touching an alarm line       if (isset(egoHitSpecial))        {        [ in this room there are no places where Jerrod can        [ go to dig; this code block will never execute                [ this is an area where Jerrod can dig for gold        set.view(ego, vw.TunnelDigging);        [ start timer        vDigTimer = 1;        stop.motion(ego);        [ allow ego object to cycle when not moving        set(CycleAtRest);        [ start digging        start.cycling(ego);        }      else        {        print.at("You're close to a likely spot. Try that nearby.", 2, 26, 10);        }      }    }  else    {    print.at("Ya don't have a pick.", 2, 26, 10);    }  }  [ look ladderif (said("examine", "ladder"))  {  [ if Jerrod has a lit lantern or lit match  if ((isset(LanternLit) || isset(MatchLit)))    {    print.at("It's just a wooden ladder!", 2, 26, 10);    }  else    {    print.at("It's too dern dark in here to see!", 2, 26, 10);    }  }  [ look groundif ((said("examine", "dirt") ||     said("examine", "deck")))  {  print.at("Ya can't see the floor of the mine. It's a long way down.", 2, 5, 0);  }  Done:[ call tunnel logic to run code common to all tunnelscall(lgc.Tunnels);return();[ **************************************[ MESSAGES[ **************************************#message 13 "Ya can't do that while yer climbin'!"#message 14 "You're close to a likely spot. Try that nearby."#message 15 "Ya don't have a pick."#message 16 "That's impossible right now!"#message 17 "It's too dern dark in here to see!"#message 20 "Nothin'!"#message 24 "Ya can't see the floor of the mine. It's a long way down."#message 47 "There's no gold in sight right here."#message 81 "It's just a wooden ladder!"