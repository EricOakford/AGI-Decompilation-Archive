[***********************************************************[[ rm.JakesCabin[[ Exterior view of Jake's cabin in the woods, with the [ outhouse in the foreground. Jerrod gets here by following[ Jake's mule.[[***********************************************************[ **************************************[ LOCAL DEFINES[ **************************************#define oFlies1                      o1#define oOuthouseDoor                o2#define oCabinDoor                   o3#define oFlies2                      o4#define oFlies3                      o5#define vTmpVal                    v220#define vTmpY                      v221#define fByCabin                   f220#define fByOuthouse                f221#define fNormalSize                f222#define fOHDoorOpen                f223#define fCbDoorOpen                f224#define fOHDoorCycled              f225#define fCbDoorCycled              f226#define fFirstTime                 f227[ f228 through f237 are not used#define fEffectDone                f238[ **************************************[ FIRST CYCLE ONLY[ **************************************if (isset(newRoom))  {  [ load picture for current room  load.pic(currentRoom);    [ load views used in the room  load.view(vw.JerrodCA);  load.view(vw.BigJerrodCA);  load.view(vw.JakesCabinArt);    [ load sounds used in the room  load.sound(s.Effect1);  load.sound(s.Effect2);    [ draw the picture  draw.pic(currentRoom);    [ if first time in the room  if (!isset(FoundJakesCabin))    {    [ set the flag showing cabin is found    set(FoundJakesCabin);    [ also set first time in room flag    set(fFirstTime);    [ add Jake's mule to the room as background art    add.to.pic(vw.JakesCabinArt, 0, 0, 10, 106, 10, 0);    }      [ add flies above the outhouse  animate.obj(oFlies1);  set.view(oFlies1, vw.JakesCabinArt);  set.loop(oFlies1, 1);  ignore.objs(oFlies1);  ignore.blocks(oFlies1);  ignore.horizon(oFlies1);  set.priority(oFlies1, 15);  position(oFlies1, 148, 54);  vTmpVal = 2;  cycle.time(oFlies1, vTmpVal);  draw(oFlies1);    [ outhouse door  animate.obj(oOuthouseDoor);  set.view(oOuthouseDoor, vw.JakesCabinArt);  set.loop(oOuthouseDoor, 2);  [ if coming out of the outhouse  if (previousRoom == rm.OuthouseInterior)    {    [ door starts open    set.cel(oOuthouseDoor, 4);    set(fOHDoorOpen);    }  else    {    [ otherwise, door starts closed    set.cel(oOuthouseDoor, 0);    }  ignore.objs(oOuthouseDoor);  ignore.blocks(oOuthouseDoor);  set.priority(oOuthouseDoor, 14);  position(oOuthouseDoor, 136, 114);  draw(oOuthouseDoor);  stop.update(oOuthouseDoor);    [ cabin door  animate.obj(oCabinDoor);  set.view(oCabinDoor, vw.JakesCabinArt);  set.loop(oCabinDoor, 3);  [ if coming out of the cabin  if (previousRoom == rm.CabinInterior)    {    [ doors starts open    set.cel(oCabinDoor, 4);    set(fCbDoorOpen);    }  else    {    [ otherwise, door starts closed    set.cel(oCabinDoor, 0);    }  ignore.objs(oCabinDoor);  ignore.blocks(oCabinDoor);  set.priority(oCabinDoor, 9);  position(oCabinDoor, 58, 107);  draw(oCabinDoor);  stop.update(oCabinDoor);    [ more flies in front of outhouse door  animate.obj(oFlies2);  set.view(oFlies2, vw.JakesCabinArt);  set.loop(oFlies2, 4);  ignore.objs(oFlies2);  ignore.blocks(oFlies2);  set.priority(oFlies2, 14);  position(oFlies2, 119, 101);  vTmpVal = 2;  cycle.time(oFlies2, vTmpVal);  draw(oFlies2);    [ even more flies in front of outhouse side  animate.obj(oFlies3);  set.view(oFlies3, vw.JakesCabinArt);  set.loop(oFlies3, 4);  ignore.objs(oFlies3);  ignore.blocks(oFlies3);  set.priority(oFlies3, 15);  position(oFlies3, 145, 80);  vTmpVal = 2;  cycle.time(oFlies3, vTmpVal);  draw(oFlies3);    [ change horizon to 80 in this room  set.horizon(80);    [ Jerrod will be large or small,depending on whether he's  [ close to outhouse, or back by the cabin  animate.obj(ego);    [ if Jerrod came from inside the cabin  if (previousRoom == rm.CabinInterior)    {    [ Jerrod is in back of room, by the cabin    set(fByCabin);    [ when by the cabin, ignore the conditional control lines    ignore.blocks(ego);    [ use normal size view    set.view(ego, vw.JerrodCA);    }      [ if Jerrod came from inside the outhouse  if (previousRoom == rm.OuthouseInterior)    {    [ set flag showing he's by outhouse    set(fByOuthouse);        [ and that he's using normal size view (this is a bug!    [ Jerrod uses the large view by the outhouse; this flag    [ should NOT be set - it doesn't cause a problem though    [ because the location checks that occur in every cycle    [ change flag to correct value)    set(fNormalSize);        [ force priority    set.priority(ego, 14);    [ with larger view, use larger step size    vTmpVal = 2;    step.size(ego, vTmpVal);        [ when by the outhouse, use conditional control lines as    [ boundaries    observe.blocks(ego);        [ use large view    set.view(ego, vw.BigJerrodCA);    }      [ if coming from wilderness  if (previousRoom == lgc.Wilderness)    {    [ use normal size view    set.view(ego, vw.JerrodCA);        [ Jerrod is in back of room, by the cabin    set(fByCabin);    [ (flag 'fNormalSize' should be set here, but isn't;    [ this is a bug! - it doesn't cause a problem though    [ because the location checks that occur in every cycle    [ change flag to correct value)        [ when by cabin, ignore the conditional control lines    ignore.blocks(ego);        [ position Jerrod based on where he was in previous room    if (posn(ego, 0, 0, 4, 167))      {      position(ego, 30, 119);      }    else      {      position(ego, 117, 102);      }        [ Jerrod is no longer following the mule    reset(MuleLeadingWay);    [ and no longer has the mule in inventory    drop("James' ol' mule");        [ always force a STOP    egoDir = STOPPED;    }      [ now add Jerrod to screen  draw(ego);    [ and show the picture  show.pic();    [ make sure custom status line is cleared  clear.lines(24, 24, BLACK);    [ force custom status line to update  set(UpdateStatus);    [ now that Jerrod has found the cabin, set flag so he can  [ come back at any time  set(FoundCabin);  }  [ if showing status (distance from fort)if (isset(UpdateStatus))  {  [ add it  display(24, 0, "Miles from Sutter's Fort: E: %v111 S: %v112");  }  [ this room has a 'front' and a 'back' section; flags are[ used to tell which section Jerrod is curently in (or if in[ neither, when transitioning)  [ if Jerrod is in back of room, by the cabinif (isset(fByCabin))  {  [ because the room is split into 'front' and 'back'  [ sections, use green alarm line to take the place of the  [ border when Jerrod is in 'back'    [ if Jerrod touches an alarm line  if (isset(egoHitSpecial))    {    [ bump him up one pixel (off the line)    vTmpVal = 0;    vTmpY = -1; [ 255;    reposition(ego, vTmpVal, vTmpY);    [ and stop motion    egoDir = STOPPED;    }  }  [ if Jerrod is on right side of path between front and back[ and in transitionif (posn(ego, 81, 145, 82, 147) && !isset(fByCabin))  {  [ he's now in back by the cabin  set(fByCabin);  }  [ if Jerrod is on left side of path between front and back[ and flag is setif (posn(ego, 77, 145, 78, 147) && isset(fByCabin))  {  [ he's now transitioning  reset(fByCabin);  }  [ if Jerrod is not in front by the outhouseif (!isset(fByOuthouse))  {  [ when behind bushes, to the left and normal size  if (posn(ego, 90, 144, 91, 147) && isset(fNormalSize))    {    [ switch to large size    reset(fNormalSize);    set.view(ego, vw.BigJerrodCA);    vTmpVal = 2;    step.size(ego, vTmpVal);    }  [ when behind bushes, to the right and large size  if (posn(ego, 92, 144, 93, 147) && !isset(fNormalSize))    {    [ switch back to normal size    set(fNormalSize);    set.view(ego, vw.JerrodCA);    vTmpVal = 1;    step.size(ego, vTmpVal);    }  }  [ if Jerrod is at front of the last corner but outhouse flag[ is not setif (posn(ego, 18, 151, 32, 152) && !isset(fByOuthouse))  {  [ Jerrod is in front, by the outhouse  set(fByOuthouse);  set.priority(ego, 14);  [ use conditional lines as border  observe.blocks(ego);  }  [ if Jerrod is at back of the corner and outhouse flag is setif (posn(ego, 20, 149, 34, 150) && isset(fByOuthouse))  {  [ not by outhouse; in the transition zone  reset(fByOuthouse);  release.priority(ego);  [ conditional lines are not borders   ignore.blocks(ego);  }  [ if in front, by the outhouseif (isset(fByOuthouse))  {  [ if Jerrod is by the outhouse door and the door is not  [ open  if (posn(ego, 127, 117, 135, 120) && !isset(fOHDoorOpen))    {    [ play open door sound effect    sound(s.Effect1, fEffectDone);    [ Jerrod stops    stop.update(ego);    [ open the door    start.update(oOuthouseDoor);    end.of.loop(oOuthouseDoor, fOHDoorCycled);    set(fOHDoorOpen);    }      [ if Jerrod is not by the outhouse door and the door is  [ open  if (!posn(ego, 127, 117, 135, 120) && isset(fOHDoorOpen))    {    [ close the door    reverse.loop(oOuthouseDoor, fOHDoorCycled);    reset(fOHDoorOpen);    }      [ when door finishes cycling (open or closed)  if (isset(fOHDoorCycled))    {    [ reset the flag    reset(fOHDoorCycled);    [ if door is open now    if (isset(fOHDoorOpen))      {      [ Jerrod continues moving      start.update(ego);      }    else      {      [ play sound effect when door closes      sound(s.Effect2, fEffectDone);      stop.update(oOuthouseDoor);      }    }  }  [ if Jerrod is by the cabin door and the door is not openif (posn(ego, 58, 109, 62, 109) && !isset(fCbDoorOpen))  {  [ play open door sound effect  sound(s.Effect1, fEffectDone);  [ Jerrod stops moving  stop.update(ego);  [ now open the door  start.update(oCabinDoor);  end.of.loop(oCabinDoor, fCbDoorCycled);  set(fCbDoorOpen);  }  [ if Jerrod is not by the cabin door and the door is openif (!posn(ego, 58, 109, 62, 109) && isset(fCbDoorOpen))  {  [ close the door  reverse.loop(oCabinDoor, fCbDoorCycled);  reset(fCbDoorOpen);  }  [ when door finishes cycling (open or closed)if (isset(fCbDoorCycled))  {  [ reset the flag  reset(fCbDoorCycled);  [ if door is open  if (isset(fCbDoorOpen))    {    [ Jerrod continues moving    start.update(ego);    }  else    {    [ play door closed sound effect    sound(s.Effect2, fEffectDone);    stop.update(oCabinDoor);    }  }  [ **************************************[ CHECK FOR AN EXIT CONDITION[ **************************************[ if Jerrod is in cabin door entranceif (posn(ego, 58, 108, 61, 108))  {  [ change loop and position so they will be correct in new  [ room  set.loop(ego, 3);  egoDir = UP;  position(ego, 74, 160);  [ clear the custom status line  clear.lines(24, 24, BLACK);  new.room(rm.CabinInterior); [ ##LE001##  }  [ if Jerrod is in outhouse door entranceif (posn(ego, 134, 117, 135, 120) && isset(fByOuthouse))  {  [ change loop and position so they will be correct in new  [ room  set.loop(ego, 0);  egoDir = STOPPED;  position(ego, 66, 146);  [ clear the custom status line  clear.lines(24, 24, BLACK);  new.room(rm.OuthouseInterior); [ ##LE002##  }  [ at the edges, go back into the wildernessif (edgeEgoHit == TOP_EDGE)  {  --WildernessY;  new.room(lgc.Wilderness); [ ##LE003##  }if (edgeEgoHit == RIGHT_EDGE)  {  ++WildernessX;  new.room(lgc.Wilderness); [ ##LE004##  }if (edgeEgoHit == BOTTOM_EDGE)  {  ++WildernessY;  new.room(lgc.Wilderness); [ ##LE005##  }if (edgeEgoHit == LEFT_EDGE)  {  --WildernessX;  new.room(lgc.Wilderness); [ ##LE006##  }  [ **************************************[ PROCESS PLAYER INPUT[ **************************************[ if player hasn't provided input no need to do said testsif (!isset(haveInput))  {  goto(Done);  }  [ look/look aroundif ((said("examine", "around") ||     said("examine")))  {  [ if in room for first time, message is different  if (isset(fFirstTime))    {    print("At long last you've finally arrived. This is James' cabin!");    }  else    {    print("You're outside of James' cabin.");    }  }  [ look cabinif ((said("examine", "cabin") ||     said("examine", "home") ||     said("examine", "james", "cabin") ||     said("examine", "james", "home") ||     said("examine", "building")))  {  print("This is James' cabin. You notice a path leadin' from the front door of "        "the cabin to the outhouse.");  }  [ look outhouseif ((said("examine", "outhouse") ||     said("examine", "out", "home")))  {  if (isset(fByOuthouse))    {    print("Even up close, it still appears to be a normal outhouse.");    }  else    {    print("Not too far, but far enough, from James' cabin is an outhouse.");    }  }  [ look bushif (said("examine", "bush"))  {  print("Bushes surround the outhouse.");  }  [ look muleif (said("examine", "donkey"))  {  [ the mule is only around the first time Jerrod visits  [ this room  if (isset(fFirstTime))    {    print("James' ol' mule is at the trough by the cabin getting a well "          "deserved drink.");    }  else    {    print("James' ol' mule is somewhere 'round here, but not in sight.");    }  }  [ look fliesif (said("examine", "flies"))  {  print("There are flies over by the bushes and the outhouse.");  }  [ go in outhouseif ((said("use", "outhouse") ||     said("go", "outhouse") ||     said("go", "in", "outhouse")))  {  print("Go ahead and walk on in. It's not locked.");  }  [ leave muleif ((said("exit", "donkey") ||     said("discard", "donkey") ||     said("discard", "rope")))  {  print("The mule's home now.");  }  [ follow muleif (said("follow", "donkey"))  {  print("Ya already did that.");  }  [ look water/look troughif ((said("examine", "water") ||     said("examine", "trough")))  {  print("There's some water in the trough, but it's for the mule.");  }  [ drink waterif ((said("acquire", "water") ||     said("anyword", "drink", "rol") ||     said("drink", "rol")))  {  print("You don't want to drink any of that mule water.");  }  [ look pathif ((said("examine", "path") ||     said("examine", "down") ||     said("examine", "grass") ||     said("examine", "dirt")))  {  print("There's a path leadin' from the front door of the cabin to the "        "outhouse.");  }  [ look doorif ((said("examine", "door") ||     said("examine", "front", "door") ||     said("examine", "cabin", "door") ||     said("examine", "outhouse", "door")))  {  if (isset(fByOuthouse))    {    print("This the outhouse door.");    }  else    {    print("The door leads into James' cabin.");    }  }  [ look under cabinif ((said("examine", "below", "cabin") ||     said("examine", "below", "home") ||     said("examine", "below", "building")))  {  print("There doesn't appear to be anything unusual under the cabin.");  }  [ go under cabinif ((said("go", "below", "cabin") ||     said("go", "below", "home") ||     said("go", "below", "building") ||     said("climb", "below", "cabin") ||     said("climb", "below", "home") ||     said("climb", "below", "building") ||     said("crawl", "below", "cabin") ||     said("crawl", "below", "home") ||     said("crawl", "below", "building")))  {  print("There's no way to do that from right here.");  }  [ look under outhouseif ((said("examine", "below", "outhouse") ||     said("examine", "below", "out", "home")))  {  print("There doesn't appear to be anything unusual under the outhouse. But "        "it's difficult to tell from out here.");  }  [ go under outhouseif ((said("go", "below", "outhouse") ||     said("go", "below", "out", "home") ||     said("climb", "below", "outhouse") ||     said("climb", "below", "out", "home") ||     said("crawl", "below", "outhouse") ||     said("crawl", "below", "out", "home")))  {  print("There's no way to do that from right here.");  }  Done:return();[ **************************************[ MESSAGES[ **************************************#message 1 "Miles from Sutter's Fort: E: %v111 S: %v112"#message 2 "At long last you've finally arrived. This is James' cabin!"#message 3 "This is James' cabin. You notice a path leadin' from the front door of the cabin to the outhouse."#message 4 "Not too far, but far enough, from James' cabin is an outhouse."#message 5 "Bushes surround the outhouse."#message 7 "James' ol' mule is at the trough by the cabin getting a well deserved drink."#message 8 "There are flies over by the bushes and the outhouse."#message 9 "James' ol' mule is somewhere 'round here, but not in sight."#message 10 "Go ahead and walk on in. It's not locked."#message 11 "The mule's home now."#message 12 "Ya already did that."#message 13 "There's some water in the trough, but it's for the mule."#message 14 "You don't want to drink any of that mule water."#message 15 "You're outside of James' cabin."#message 16 "There's a path leadin' from the front door of the cabin to the outhouse."#message 17 "This the outhouse door."#message 18 "The door leads into James' cabin."#message 19 "Even up close, it still appears to be a normal outhouse."#message 20 "There doesn't appear to be anything unusual under the cabin."#message 21 "There's no way to do that from right here."#message 22 "There doesn't appear to be anything unusual under the outhouse. But it's difficult to tell from out here."