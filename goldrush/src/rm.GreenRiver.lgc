[***********************************************************[[ rm.GreenRiver[[ This is first of two rooms that make up a short[ interaction on the wagon trip across America. Jerrod has[ to safely get the wagons down the hill.[[***********************************************************[ **************************************[ LOCAL DEFINES[ **************************************#define oWagon                       o1#define oTeam1                       o2#define oTeam2                       o3#define vTimer2                    v220#define vWagonStatus               v221#define vTeam2Status               v222#define vTeam1Status               v223#define vTimer1                    v224#define vTimer3                    v225#define fWagonMoved                f220#define fTeam1Moved                f221#define fTeam2Moved                f222[ f223 is not used#define fSndDone                   f224[ **************************************[ FIRST CYCLE ONLY[ **************************************if (isset(newRoom))  {  [ load the main timing logic  load.logics(lgc.WagonTripTiming);    [ load current room picture  load.pic(currentRoom);    [ load views used in the room  load.view(vw.JerrodCA);  load.view(vw.GreenRiverArt);    [ load the only sound used in the room  load.sound(s.AddToScore);    [ draw current room picture  draw.pic(currentRoom);    [ Jerrod's wagon  animate.obj(oWagon);  set.view(oWagon, vw.GreenRiverArt);  set.loop(oWagon, 1);  fix.loop(oWagon);  position(oWagon, 1, 103);  set.priority(oWagon, 9);  ignore.blocks(oWagon);  draw(oWagon);  stop.cycling(oWagon);    [ horse team #2 pulling the wagon  animate.obj(oTeam2);  set.view(oTeam2, vw.GreenRiverArt);  set.loop(oTeam2, 3);  fix.loop(oTeam2);  position(oTeam2, 35, 107);  set.priority(oTeam2, 9);  ignore.blocks(oTeam2);  draw(oTeam2);  stop.cycling(oTeam2);    [ horse team #1 pulling the wagon  animate.obj(oTeam1);  set.view(oTeam1, vw.GreenRiverArt);  set.loop(oTeam1, 3);  fix.loop(oTeam1);  position(oTeam1, 58, 117);  set.priority(oTeam1, 9);  ignore.blocks(oTeam1);  draw(oTeam1);  stop.cycling(oTeam1);    [ Jerrod, in California attire  animate.obj(ego);  set.view(ego, vw.JerrodCA);  set.loop(ego, 0);  position(ego, 14, 105);  draw(ego);    [ now show the picture  show.pic();  }  [ **************************************[ EVERY CYCLE[ **************************************[ if scene hasn't begun yetif (GreenRiverStatus == GR_INIT)  {  [ if timer is <2  if (vTimer1 < 2)    {    [ increment timer    ++vTimer1;    [ after 2 cycles    if (vTimer1 == 2)      {      [ reset timer      vTimer1 = 0;      [ explain situation      print("The captain bellows a command and the animal team comes to a halt.");      print("You are at the top of the steep hill overlooking the Green River.");      [ advance to next stage (waiting at top of the hill,      [ animals are thirsty      GreenRiverStatus = GR_THIRSTY;      }    }  }  [ if at stage 1 (waiting at top of hill, animals are [thirsty)if (GreenRiverStatus == GR_THIRSTY)  {  [ increment timer  ++vTimer2;  [ after 250 cycles  if (vTimer2 == 250)    {    [ reset timer    vTimer2 = 0;    [ advance to next stage (animals start going down the hill)    GreenRiverStatus = GR_RUNAWAY_START;    print("The wagon begins to move so you jump on board to avoid the long walk "          "down the steep hill.");    [ erase ego object; Jerrod is on the wagon    erase(ego);    print("But, the only reason the wagon is moving is because the animals are "          "very, very thirsty.");    [ if Jerrod has locked the wheels    if (isset(LockedWheels))      {      print("Even though the wheels are locked with the chains, the animals "            "pull the wagon over the edge of the steep hill.");      }    else      {      print("The animals give it everything they've got to get to the water as "            "quickly as possible, and they are taking you with them!");      }    [ animal teams and wagon are ready to go down the hill    vTeam1Status = 1;    vTeam2Status = 1;    vWagonStatus = 1;    }  }  [ when animals get back after drinkingif (GreenRiverStatus == GR_TEAM_BACK)  {  [ change status; animals are now ready to go down the hill  GreenRiverStatus = GR_READY;  print("When the oxen return, refreshed and ready to go, you assist in "        "hitching the wagon.");  print("It looks like the company is ready to attempt the steep hill.");  }  [ if animals are ready to go down the hill after getting[ waterif (GreenRiverStatus == GR_READY)  {  [ if Jerrod has already locked the wheels  if (isset(LockedWheels))    {    [ begin going downhill    print("The wagon starts moving so you courageously get on.");    [ erase ego object; Jerrod is on the wagon    erase(ego);    print("Things are looking good!");    [ change status; wagon going down hill safely    GreenRiverStatus = GR_IN_CONTROL;    [ animals and wagon are ready to go down the hill    vTeam1Status = 1;    vTeam2Status = 1;    vWagonStatus = 1;    }  else    {    [ wheels aren't locked; give Jerrod a little more time    [ to figure it out        [ increment timer    ++vTimer2;    [ wait another 250 cycles before doing anything    if (vTimer2 == 250)      {      [ reset this timer      vTimer2 = 0;      [ increment counter 3      ++vTimer3;      [ after two cycles of counter 3      [ (500 cycles in total)      if (vTimer3 == 2)        {        [ reset the timer        vTimer3 = 0;        [ going down hill, out of control!        GreenRiverStatus = GR_RUNAWAY_START;        print("Once again the wagon begins to move and you jump on board.");        erase(ego);        print("The animals are holding back with all they are worth, but it "              "just isn't enough.");        print("The wagon continues to accelerate over the brim of the steep "              "hill!");        [ wagon and animal teams are ready to go down the        [ hill        vTeam1Status = 1;        vTeam2Status = 1;        vWagonStatus = 1;        }      }    }  }[***************[ manage team 1:[***************[ if team 1 is startingif (vTeam1Status == 1)  {  [ advance to next stage  vTeam1Status = 2;  [ move to point #2 (this is actually their starting point,   [ so they don't actually move, and flag fTeamMoved is  [ immediately set at end of the cycle- this command could  [ have been skipped)  move.obj(oTeam1, 58, 117, 1, fTeam1Moved);  start.cycling(oTeam1);  }[ after getting to point #2if (isset(fTeam1Moved) && vTeam1Status == 2)  {  [ move to point #3  reset(fTeam1Moved);  vTeam1Status = 3;  move.obj(oTeam1, 61, 117, 1, fTeam1Moved);  }[ after getting to point #3if (isset(fTeam1Moved) && vTeam1Status == 3)  {  [ move to point #4  reset(fTeam1Moved);  vTeam1Status = 4;  move.obj(oTeam1, 71, 135, 1, fTeam1Moved);  }[ after getting to point #4if (isset(fTeam1Moved) && vTeam1Status == 4)  {  [ move to point #5  reset(fTeam1Moved);  vTeam1Status = 5;  move.obj(oTeam1, 86, 159, 1, fTeam1Moved);  }[ after getting to point #5if (isset(fTeam1Moved) && vTeam1Status == 5)  {  [ move to last point  reset(fTeam1Moved);  vTeam1Status = 6;  move.obj(oTeam1, 94, 167, 1, fTeam1Moved);  }[ when team #1 gets to last pointif (isset(fTeam1Moved) && vTeam1Status == 6)  {  [ advance status (which really isn't necessary since next  [ command is a new.room)  reset(fTeam1Moved);  vTeam1Status = 7;  [ move to the hill scene  new.room(rm.GreenRiverHill); [ ##LE001##  }  [***************[ manage team 2[***************[ if team 2 is startingif (vTeam2Status == 1)  {  [ move to point #2  vTeam2Status = 2;  move.obj(oTeam2, 35, 107, 1, fTeam2Moved);  start.cycling(oTeam2);  }[ when team 2 gets to point #2if (isset(fTeam2Moved) && vTeam2Status == 2)  {  [ move to point #3  reset(fTeam2Moved);  vTeam2Status = 3;  move.obj(oTeam2, 48, 107, 1, fTeam2Moved);  }[ when team 2 gets to point #3if (isset(fTeam2Moved) && vTeam2Status == 3)  {  [ move to point #4  reset(fTeam2Moved);  vTeam2Status = 4;  move.obj(oTeam2, 61, 117, 1, fTeam2Moved);  }[ when team 2 gets to point #4if (isset(fTeam2Moved) && vTeam2Status == 4)  {  [ moved to point #5  reset(fTeam2Moved);  vTeam2Status = 5;  move.obj(oTeam2, 71, 135, 1, fTeam2Moved);  }[ when team 2 gets to point #5if (isset(fTeam2Moved) && vTeam2Status == 5)  {  [ move to point #6  reset(fTeam2Moved);  vTeam2Status = 6;  move.obj(oTeam2, 86, 159, 1, fTeam2Moved);  }[ when team 2 gets to point #6if (isset(fTeam2Moved) && vTeam2Status == 6)  {  [ move to last point  reset(fTeam2Moved);  vTeam2Status = 7;  move.obj(oTeam2, 94, 167, 1, fTeam2Moved);  }  [***************[ manage wagon[***************[ if wagon is startingif (vWagonStatus == 1)  {  [ move to point #2  vWagonStatus = 2;  move.obj(oWagon, 31, 103, 1, fWagonMoved);  if (!isset(LockedWheels))    {    start.cycling(oWagon);    }  }[ when wagon gets to point #2if (isset(fWagonMoved) && vWagonStatus == 2)  {  [ move to point 3  reset(fWagonMoved);  vWagonStatus = 3;  move.obj(oWagon, 41, 113, 1, fWagonMoved);  }[ when wagon gets to point #3if (isset(fWagonMoved) && vWagonStatus == 3)  {  [ advance status (which really isn't necessary since next  [ command is a new.room)  reset(fWagonMoved);  vWagonStatus = 4;  [ move to the hill scene (team 1 also calls new.room, for  [ when the team goes by itself; I think this is here  [ because wagon gets to its end before team 1 does; so  [ when wagon goes with the oxen, this new.room is needed  new.room(rm.GreenRiverHill); [ ##LE002##  }  [ **************************************[ PROCESS PLAYER INPUT[ **************************************[ if player hasn't provided input no need to do said testsif (!isset(haveInput))  {  goto(Done);  }  [ disconnect animal teamif ((said("diconnect", "team") ||     said("diconnect", "animal") ||     said("diconnect", "ox") ||     said("diconnect", "cart") ||     said("diconnect", "animal", "team") ||     said("untie", "team") ||     said("untie", "animal") ||     said("untie", "ox") ||     said("untie", "cart") ||     said("untie", "animal", "team") ||     said("release", "team") ||     said("release", "animal") ||     said("release", "ox") ||     said("release", "cart") ||     said("release", "animal", "team")))  {  [ if the oxen already running down the hill  if (GreenRiverStatus == GR_RUNAWAY_START)    {    print("That is a great idea but it is too late now! The animals are already "          "headed down the steep hill toward the refreshing water below. All "          "you can do now is hang on tight!!");    }  [ if wagon are at top of hill, but oxen haven't been released yet  if (GreenRiverStatus == GR_THIRSTY)    {    [ play score sound    sound(s.AddToScore, fSndDone);    print("That is a brilliant idea! As thirsty as those animals are, they "          "would have pulled the wagon, along with everyone inside, over the "          "edge of this steep hill!");    print("You are responsible for saving the animal team, the wagon, and the "          "lives of your fellow company members! You are to be commended!!");    [ score 4 points    currentScore  += 4;    [ just the oxen go down the hill    vTeam1Status = 1;    vTeam2Status = 1;    [ set status to indicate horse team is going to river    GreenRiverStatus = GR_UNHOOKED;    }  }[ disconnectif ((said("diconnect") ||     said("untie") ||     said("release")))  {  print("What do you want to %w1?");  }  [ lock wheels with chainif ((said("place", "chain", "wheel") ||     said("place", "chain", "cart", "wheel") ||     said("place", "chain", "in", "wheel") ||     said("place", "chain", "in", "cart", "wheel") ||     said("place", "chain") ||     said("place", "chain", "in") ||     said("chain", "wheel") ||     said("chain", "cart", "wheel") ||     said("chain", "in", "wheel") ||     said("chain", "in", "cart", "wheel") ||     said("lock", "wheel") ||     said("lock", "cart", "wheel") ||     said("lock", "wheel", "chain") ||     said("lock", "cart", "wheel", "chain") ||     said("apply", "chain") ||     said("apply", "chain", "wheel") ||     said("apply", "chain", "cart", "wheel") ||     said("tie", "chain") ||     said("tie", "chain", "wheel") ||     said("tie", "chain", "cart", "wheel") ||     said("tie", "chain", "around", "wheel") ||     said("tie", "chain", "around", "cart", "wheel")))  {  [ if already locked  if (isset(LockedWheels))    {    print("You have already locked the wagon wheels with the chain.");    }  else    {    [ play score sound    sound(s.AddToScore, fSndDone);    print("Using your Yankee ingenuity, you put the chains through the wagon "          "wheels to keep the wheels from turning.");    [ wheels are now locked    set(LockedWheels);    [ score four points    currentScore  += 4;    }  }  [ look wagonif (said("examine", "cart"))  {  [ if wheels locked  if (isset(LockedWheels))    {    print("The wagon is at the top of the steep hill. There are chains through "          "the wheels to keep them from turning.");    }  else    {    print("There are chains on the wagon next to each wheel.");    }  }[ anyword horseif (said("anyword", "horse"))  {  print("These aren't horses!");  [ ...they sure look like horses/mules (vw.GreenRiverArt,  [ loop 2 and 3)  }  [ anyword muleif (said("anyword", "donkey"))  {  print("These aren't mules!");  [ ...they sure look like horses/mules (vw.GreenRiverArt,  [ loop 2 and 3)  }  [ look/look aroundif ((said("examine", "around") || said("examine")))  {  print("The wagon and animal team are at the top of a steep hill. In the "        "valley below lies the Green River.");  }  [ goif ((said("go") || said("exit")))  {  print("Eventually, you will %w1!");  }  [ get oxenif ((said("acquire", "animal") ||     said("acquire", "ox") ||     said("connect", "animal") ||     said("connect", "ox")))  {  if ((GreenRiverStatus == GR_INIT ||       GreenRiverStatus == GR_THIRSTY ||       GreenRiverStatus == GR_TEAM_BACK ||       GreenRiverStatus == GR_READY))    {    print("You already have a team of animals hitched to the wagon.");    }  if (GreenRiverStatus == GR_RUNAWAY_START)    {    print("You already have a team of animals hitched to the wagon.");    }  if (GreenRiverStatus == GR_UNHOOKED)    {    print("They will be right back. They are just going to get a drink of "          "water.");    }  if (GreenRiverStatus == GR_IN_CONTROL)    {    print("You already have a team of animals hitched to the wagon.");    }  }  [ pull wagon backif ((said("pull", "cart") ||     said("pull", "cart", "back") ||     said("hold", "cart") ||     said("hold", "cart", "back")))  {  if ((GreenRiverStatus == GR_INIT ||       GreenRiverStatus == GR_THIRSTY ||       GreenRiverStatus == GR_TEAM_BACK ||       GreenRiverStatus == GR_READY))    {    print("There is no need to; it isn't moving!");    }  if (GreenRiverStatus == GR_RUNAWAY_START)    {    print("It's too late! There's nothing you can do! The wagon is gaining "          "momentum every second!!");    }  if (GreenRiverStatus == GR_UNHOOKED)    {    print("There is no need to; it isn't moving!");    }  if (GreenRiverStatus == GR_IN_CONTROL)    {    print("It's nice to know you're willing to help, but the animals have "          "things under control this time!");    }  }  [ turn wagon aroundif ((said("rotate", "cart") ||     said("rotate", "cart", "around") ||     said("rotate", "around")))  {  if ((GreenRiverStatus == GR_INIT ||       GreenRiverStatus == GR_THIRSTY ||       GreenRiverStatus == GR_TEAM_BACK ||       GreenRiverStatus == GR_READY))    {    print("No way! This wagon is heading west!");    }  if (GreenRiverStatus == GR_RUNAWAY_START)    {    print("It's too late! There's nothing you can do! The wagon is gaining "          "momentum every second!!");    }  if (GreenRiverStatus == GR_UNHOOKED)    {    print("No way! This wagon is heading west!");    }  if (GreenRiverStatus == GR_IN_CONTROL)    {    print("No way! This wagon is heading west!");    }  }  [ get wagonif (said("acquire", "cart"))  {  print("You already have a wagon.");  }  [ look river/look valleyif ((said("examine", "creek") ||     said("examine", "water") ||     said("examine", "valley") ||     said("examine", "green", "creek", "valley") ||     said("examine", "green", "creek") ||     said("examine", "creek", "valley")))  {  print("You are at the top of the steep hill overlooking the Green River.");  }  [ look animal teamif ((said("examine", "team") ||     said("examine", "animal") ||     said("examine", "ox") ||     said("examine", "ox", "team") ||     said("examine", "animal", "team")))  {  if ((GreenRiverStatus == GR_INIT ||       GreenRiverStatus == GR_THIRSTY))    {    print("These animals are thirsty!");    }  if ((GreenRiverStatus == GR_RUNAWAY_START ||       GreenRiverStatus == GR_IN_CONTROL))    {    print("The animals are pulling the wagon over the crest of the steep hill.");    }  if (GreenRiverStatus == GR_UNHOOKED)    {    print("The animals are unhitched and heading for the fresh water below.");    }  if ((GreenRiverStatus == GR_TEAM_BACK ||       GreenRiverStatus == GR_READY))    {    print("The animals are refreshed and hitched to the wagon.");    }  }  [ look hillif (said("examine", "foot hill"))  {  print("You are at the top of a steep hill.");  }  [ look wagon wheel/look chainif ((said("examine", "wheel") ||     said("examine", "cart", "wheel") ||     said("examine", "chain")))  {  if (isset(LockedWheels))    {    print("The chains that are attached to the side of the wagon are put "          "through the wagon wheels so that they will not turn.");    }  else    {    print("You notice some chain attached to the wagon next to each wheel.");    }  }  [ look brake/use brakeif ((said("examine", "brake") ||     said("apply", "brake") ||     said("apply", "brake", "wheel") ||     said("apply", "cart", "brake") ||     said("apply", "brake", "cart", "wheel") ||     said("use", "brake") ||     said("brake", "wheel") ||     said("place", "brake") ||     said("set", "brake") ||     said("set", "wheel", "brake") ||     said("set", "cart", "brake") ||     said("brake", "cart", "wheel")))  {  print("This wagon has no brakes.");  }  [ use chainif (said("use", "chain"))  {  print("How?");  }  [ get chainif (said("acquire", "chain"))  {  print("You can't get the chain, it is securely attached to the wagon.");  }  Done:[ call main timing logiccall(lgc.WagonTripTiming);return();[ **************************************[ MESSAGES[ **************************************#message 1 "The captain bellows a command and the animal team comes to a halt."#message 2 "You are at the top of the steep hill overlooking the Green River."#message 3 "The wagon begins to move so you jump on board to avoid the long walk down the steep hill."#message 4 "But, the only reason the wagon is moving is because the animals are very, very thirsty."#message 5 "The animals give it everything they've got to get to the water as quickly as possible, and they are taking you with them!"#message 6 "That is a brilliant idea! As thirsty as those animals are, they would have pulled the wagon, along with everyone inside, over the edge of this steep hill!"#message 7 "You are responsible for saving the animal team, the wagon, and the lives of your fellow company members! You are to be commended!!"#message 8 "Using your Yankee ingenuity, you put the chains through the wagon wheels to keep the wheels from turning."#message 9 "You have already locked the wagon wheels with the chain."#message 10 "When the oxen return, refreshed and ready to go, you assist in hitching the wagon."#message 11 "It looks like the company is ready to attempt the steep hill."#message 12 "The wagon starts moving so you courageously get on."#message 13 "Once again the wagon begins to move and you jump on board."#message 14 "The animals are holding back with all they are worth, but it just isn't enough."#message 15 "The wagon continues to accelerate over the brim of the steep hill!"#message 16 "Things are looking good!"#message 17 "That is a great idea but it is too late now! The animals are already headed down the steep hill toward the refreshing water below. All you can do now is hang on tight!!"#message 18 "There are chains on the wagon next to each wheel."#message 19 "These aren't horses!"#message 20 "These aren't mules!"#message 21 "The wagon and animal team are at the top of a steep hill. In the valley below lies the Green River."#message 22 "Eventually, you will %w1!"#message 23 "You already have a team of animals hitched to the wagon."#message 24 "They will be right back. They are just going to get a drink of water."#message 25 "There is no need to; it isn't moving!"#message 26 "It's too late! There's nothing you can do! The wagon is gaining momentum every second!!"#message 27 "It's nice to know you're willing to help, but the animals have things under control this time!"#message 28 "No way! This wagon is heading west!"#message 29 "You already have a wagon."#message 30 "The animals are pulling the wagon over the crest of the steep hill."#message 31 "What do you want to %w1?"#message 32 "The wagon is at the top of the steep hill. There are chains through the wheels to keep them from turning."#message 33 "These animals are thirsty!"#message 34 "The animals are unhitched and heading for the fresh water below."#message 35 "The animals are refreshed and hitched to the wagon."#message 36 "You are at the top of a steep hill."#message 37 "The chains that are attached to the side of the wagon are put through the wagon wheels so that they will not turn."#message 38 "You notice some chain attached to the wagon next to each wheel."#message 39 "This wagon has no brakes."#message 40 "How?"#message 41 "You can't get the chain, it is securely attached to the wagon."#message 42 "Even though the wheels are locked with the chains, the animals pull the wagon over the edge of the steep hill."