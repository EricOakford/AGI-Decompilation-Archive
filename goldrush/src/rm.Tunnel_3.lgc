[***********************************************************[[ rm.Tunnel_3[[ This tunnel location connects the main group of tunnels[ with the outhouse entrance by way of the large door.[ [***********************************************************[ **************************************[ LOCAL DEFINES[ **************************************#define oDark1                       o1#define oDark2                       o2#define oDark3                       o3#define oDark4                       o4#define oDark5                       o5#define oDark6                       o6#define oDark7                       o7#define oDark8                       o8#define oDark9                       o9[ o10 through o17 are not used#define oDoor                       o18#define oRope                       o19#define vFlicker                   v220#define vEgoDX                     v221#define vEgoDY                     v222#define vDigTimer                  v223#define vTmpVar                    v224#define fDrawDark                  f220#define fLight1                    f221#define fLight2                    f222#define fLight3                    f223#define fLight4                    f224#define fLight5                    f225#define fLight6                    f226#define fLight7                    f227#define fLight8                    f228#define fLight9                    f229[ f230 through f237 are not used#define fClimbing                  f238#define fFalling                   f239[ f240 is not used#define fDoorMoved                 f241#define fSoundDone                 f242[ **************************************[ FIRST CYCLE ONLY[ **************************************if (isset(newRoom))  {  [ load the tunnel logic, that handles all the common  [ tunnel functions  load.logics(lgc.Tunnels);    [ load picture for current room  load.pic(currentRoom);    [ load views needed by objects in the room  load.view(vw.WideJerrodCA);  load.view(vw.Darkness);  load.view(vw.TunnelClimbing);  load.view(vw.TunnelFalling);  load.view(vw.TunnelDoor);  [ load sound used in the room  load.sound(s.TunnelDoor);    [ draw the picture  draw.pic(currentRoom);    [ add the darkness panels - these black out areas of the  [ tunnel that are beyond the range of Jerrod's light  [ (don't draw them yet, lgc.DarkenTunnel will do that)  animate.obj(oDark1);  set.view(oDark1, vw.Darkness);  set.cel(oDark1, 4);  set.priority(oDark1, 15);  ignore.objs(oDark1);  ignore.blocks(oDark1);  ignore.horizon(oDark1);  position(oDark1, 61, 19);  [ darkness panel 2  animate.obj(oDark2);  set.view(oDark2, vw.Darkness);  set.cel(oDark2, 4);  set.priority(oDark2, 15);  ignore.objs(oDark2);  ignore.blocks(oDark2);  position(oDark2, 61, 39);  [ darkness panel 3  animate.obj(oDark3);  set.view(oDark3, vw.Darkness);  set.cel(oDark3, 4);  set.priority(oDark3, 15);  ignore.objs(oDark3);  ignore.blocks(oDark3);  position(oDark3, 61, 59);  [ darkness panel 4  animate.obj(oDark4);  set.view(oDark4, vw.Darkness);  set.cel(oDark4, 4);  set.priority(oDark4, 15);  ignore.objs(oDark4);  ignore.blocks(oDark4);  position(oDark4, 61, 79);  [ darkness panel 5  animate.obj(oDark5);  set.view(oDark5, vw.Darkness);  set.cel(oDark5, 4);  set.priority(oDark5, 15);  ignore.objs(oDark5);  ignore.blocks(oDark5);  position(oDark5, 60, 99);  [ darkness panel 6  animate.obj(oDark6);  set.view(oDark6, vw.Darkness);  set.cel(oDark6, 4);  set.priority(oDark6, 15);  ignore.objs(oDark6);  ignore.blocks(oDark6);  position(oDark6, 60, 119);  [ darkness panel 7  animate.obj(oDark7);  set.view(oDark7, vw.Darkness);  set.cel(oDark7, 4);  set.priority(oDark7, 15);  ignore.objs(oDark7);  ignore.blocks(oDark7);  position(oDark7, 59, 139);  [ darkness panel 8  animate.obj(oDark8);  set.view(oDark8, vw.Darkness);  set.cel(oDark8, 4);  set.priority(oDark8, 15);  ignore.objs(oDark8);  ignore.blocks(oDark8);  position(oDark8, 59, 159);  [ darkness panel 9  animate.obj(oDark9);  set.view(oDark9, vw.Darkness);  set.cel(oDark9, 4);  set.priority(oDark9, 15);  ignore.objs(oDark9);  ignore.blocks(oDark9);  position(oDark9, 59, 167);    [ if coming from tunnel room 2  if (previousRoom == rm.Tunnel_2)    {    [ show the door opened so Jerrod can get to the ladder      animate.obj(oDoor);    set.view(oDoor, vw.TunnelDoor);    set.loop(oDoor, 1);    set.cel(oDoor, 0);    set.priority(oDoor, 4);    stop.cycling(oDoor);    ignore.blocks(oDoor);    ignore.objs(oDoor);    position(oDoor, 67, 109);    draw(oDoor);    [ animate the front rope with higher priority so it    [ appears in front of Jerrod as he passes by    animate.obj(oRope);    set.view(oRope, vw.TunnelDoor);    set.loop(oRope, 2);    ignore.blocks(oRope);    ignore.objs(oRope);    position(oRope, 81, 107);    set.priority(oRope, 14);    draw(oRope);    }  else    {    [ coming from any other room, show the door permanently    [ closed    add.to.pic(vw.TunnelDoor, 1, 6, 67, 109, 4, 4);    }      [ Jerrod  animate.obj(ego);  [ if coming from behind the door  if (previousRoom == rm.Tunnel_2)    {    [ use walking view    set.view(ego, vw.WideJerrodCA);    }  else    {    [ from other rooms, Jerrod is climbing    set(fClimbing);    set.view(ego, vw.TunnelClimbing);    set.loop(ego, 0);    fix.loop(ego);    }  [ draw ego  draw(ego);    [ the room starts out all darkened  call(lgc.DarkenTunnel);    [ now show the picture  show.pic();  }  [ **************************************[ EVERY CYCLE[ **************************************[ to simulate flickering of torch, use a random timer to[ redraw a black box over the area of tunnel that is[ darkened[ if flicker timer has counted downif (vFlicker == 0)  {  [ if Jerrod is stopped  if (egoDir == STOPPED)    {    [ if the redraw darkness flag is NOT set    if (!isset(fDrawDark))      {      [ draw a black box over the entire tunnel (when Jerrod      [ moves, the cleared areas will be uncovered)      clear.text.rect(1, 13, 21, 24, BLACK);      set(fDrawDark);      }    }  else    {    [ Jerrod is moving; clear the redraw darkness flag    reset(fDrawDark);    [ choose a random time between 2 and 4 cycles    random(2, 4, FlickerTime);    [ set flicker delay to the random vlaue    vFlicker = FlickerTime;      [ draw a black box over the entire tunnel    clear.text.rect(1, 13, 21, 24, BLACK);    }  }  [ decrement flicker counter--vFlicker;[ if Jerrod has a lantern or a match litif ((isset(LanternLit) || isset(MatchLit)))  {  [ depending on position, remove the darkness panels so  [ Jerrod can see the area around him  if (posn(ego, 10, 0, 150, 68) && !isset(fLight1))    {    erase(oDark1);    set(fLight1);    }  if (posn(ego, 10, 19, 150, 88) && !isset(fLight2))    {    erase(oDark2);    set(fLight2);    }  if (posn(ego, 10, 39, 150, 108) && !isset(fLight3))    {    erase(oDark3);    set(fLight3);    }  if (posn(ego, 10, 59, 150, 128) && !isset(fLight4))    {    erase(oDark4);    set(fLight4);    }  if (posn(ego, 10, 79, 150, 148) && !isset(fLight5))    {    erase(oDark5);    set(fLight5);    }  if (posn(ego, 10, 99, 150, 167) && !isset(fLight6))    {    erase(oDark6);    set(fLight6);    }  if (posn(ego, 10, 119, 150, 167) && !isset(fLight7))    {    erase(oDark7);    set(fLight7);    }  if (posn(ego, 10, 139, 150, 167) && !isset(fLight8))    {    erase(oDark8);    set(fLight8);    }  if (posn(ego, 10, 159, 150, 167) && !isset(fLight9))    {    erase(oDark9);    set(fLight9);    }  }  [ if Jerrod walks over door to the ladderif (posn(ego, 53, 112, 53, 118))  {  [ switch to climbing  set.view(ego, vw.TunnelClimbing);  set.loop(ego, 0);  fix.loop(ego);  set(fClimbing);  [ close the door  end.of.loop(oDoor, fDoorMoved);  sound(s.TunnelDoor, fSoundDone);  [ erase the rope  erase(oRope);  [ adjust Jerrod's position so he apears on the ladder  [ after switching views  vEgoDX = 8;  vEgoDY = 0;  reposition(ego, vEgoDX, vEgoDY);  [ make sure Jerrod observes blocks  observe.blocks(ego);  }  [ after door finishes closingif (isset(fDoorMoved))  {  [ it won't move anymore; add it to the picture  add.to.pic(vw.TunnelDoor, 1, 6, 67, 109, 4, 4);  [ and erase the object  erase(oDoor);  reset(fDoorMoved);  stop.update(oDoor);  }  [ if Jerrod is climbingif (isset(fClimbing))  {  [ set step value depending on direction  if ((egoDir == UP || egoDir == DOWN))    {    [ going up/down ladder; step size is 2    vEgoDY = 2;    step.size(ego, vEgoDY);    }  else    {    [ going any other direction (he's gonna fall...)    [ step size is 1    vEgoDX = 1;    step.size(ego, vEgoDX);    }  }  [ if climbingif (isset(fClimbing))  {  [ if y position is between alarm lines used to determine  [ if walking-Jerrod falls  if (EgoY > 108 && EgoY < 119)    {    [ use horizontal position to determine if Jerrod falls    [ because there isn't a vertical alarm line here    if (EgoX == 64)      {      [ too far from ladder; Jerrod falls      set(fFalling);      reset(fClimbing);      set.view(ego, vw.TunnelFalling);      vEgoDY = 200;      vEgoDX = 10;      move.obj.v(ego, EgoX, vEgoDY, vEgoDX, DoneNoAction);      }    }  [ if alarm line is touched it means Jerrod has moved too  [ far to the right  if (isset(egoHitSpecial))    {    [ ignore the horizontal alarms used to check if    [ walking-Jerrod falls    if (EgoY != 109 &&   EgoY != 118)      {      [ too far from ladder; Jerrod falls      set(fFalling);      reset(fClimbing);      set.view(ego, vw.TunnelFalling);      vEgoDY = 200;      vEgoDX = 10;      move.obj.v(ego, EgoX, vEgoDY, vEgoDX, DoneNoAction);      }    }  }else  {  [ not climbing; must be walking on door    if (EgoX < 65)    {    [ because of wide view used in tunnels, Jerrod needs to    [ ignore blocks so Jerrod can go far enough to left to    [ get to the ladder    ignore.blocks(ego);    }  else    {    [ if far enough right, don't need to worry about blocks    observe.blocks(ego);    }  [ if Jerrod hits an alarm line while walking  if (isset(egoHitSpecial))    {    [ he falls; stop door motion (if it's moving)    set.priority(oDoor, 14);    stop.update(oRope);    stop.update(oDoor);    set(fFalling);    reset(fClimbing);    set.view(ego, vw.TunnelFalling);    vEgoDY = 200;    vEgoDX = 10;    move.obj.v(ego, EgoX, vEgoDY, vEgoDX, DoneNoAction);    }  }  [ if falling, and on bottom edgeif (edgeEgoHit == BOTTOM_EDGE && isset(fFalling))  {  [ done falling; set flag so final death sequence can begin  reset(fFalling);  set(FellOffLadder);  }  [ **************************************[ CHECK FOR AN EXIT CONDITION[ **************************************[ if at top of screenif (posn(ego, 10, 59, 150, 60))  {  [ update all objects (not sure why they do this since the  [ new.room command comes next - I guess it's so there'a a  [ split second before the room change with the room  [ updated)  force.update(ego);  [ adjust position to align with next room  position(ego, 65, 164);  new.room(rm.Tunnel_4); [ ##LE001##  }  [ if at bottom (and NOT falling)if (posn(ego, 10, 165, 150, 166) && !isset(fFalling))  {  [ update all objects (not sure why they do this since the  [ new.room command comes next - I guess it's so there'a a  [ split second before the room change with the room  [ updated)  force.update(ego);  [ adjust position to align with next room  position(ego, 60, 61);  new.room(rm.Tunnel_5); [ ##LE002##  }  [ if going back into tunnel #2 through doorif (posn(ego, 79, 30, 79, 160))  {  [ update all objects (not sure why they do this since the  [ new.room command comes next - I guess it's so there'a a  [ split second before the room change with the room  [ updated)  force.update(ego);  [ adjust position to align with next room  position(ego, 5, 120);  set.loop(ego, 2);  egoDir = DOWN;  new.room(rm.Tunnel_2); [ ##LE003##  }  [ **************************************[ PROCESS PLAYER INPUT[ **************************************[ if player hasn't provided input no need to do said testsif (!isset(haveInput))  {  goto(Done);  }  [ look goldif ((said("examine", "gold") ||     said("examine", "gold", "nugget") ||     said("examine", "nugget")))  {  print.at("There's no gold in sight right here.", 2, 26, 10);  }  [ get goldif ((said("acquire", "gold") ||     said("acquire", "gold", "nugget") ||     said("acquire", "nugget")))  {  print.at("There's no gold in sight right here.", 2, 26, 10);  }  [ use pickif ((said("pick") ||     said("pick", "gold") ||     said("use", "pick") ||     said("swing", "pick")))  {  [ if Jerrod has the pick  if (has("Pick"))    {    [ if climbing or falling    if ((isset(fClimbing) || isset(fFalling)))      {      if (isset(fClimbing))        {        print.at("Ya can't do that while yer climbin'!", 2, 26, 10);        }      if (isset(fFalling))        {        print.at("That's impossible right now!", 2, 26, 10);        }      }    else      {      [ not actually possible in this room; if Jerrod hits      [ the alarm line while walking, he falls instead of      [ digs      if (isset(egoHitSpecial))        {        set.view(ego, vw.TunnelDigging);        vDigTimer = 1;        stop.motion(ego);        set(CycleAtRest);        start.cycling(ego);        }      else        {        print.at("You're close to a likely spot. Try that nearby.", 2, 26, 10);        }      }    }  else    {    print.at("Ya don't have a pick.", 2, 26, 10);    }  }  [ open door/close doorif ((said("open", "door") || said("close", "door")))  {  [ use assigned view to determine if Jerrod is walking  current.view(ego, vTmpVar);  if (vTmpVar == vw.WideJerrodCA)    {    print.at("You're standin' on the door.", 2, 26, 10);    }  else    {    print.at("Ya can't reach the door.", 2, 26, 10);    }  }  [ look doorif ((said("examine", "door") ||     said("examine", "beam", "door") ||     said("examine", "mine", "door") ||     said("examine", "door", "mine")))  {  [ if Jerrod had a lit lantern or lit match  if ((isset(LanternLit) || isset(MatchLit)))    {    [ if near the door    if (posn(ego, 60, 70, 150, 160))      {      print.at("The door is heavy and huge.", 2, 26, 10);      }    else      {      print.at("Ya can't see the door from here.", 2, 26, 10);      }    }  else    {    print.at("It's too dern dark in here to see!", 2, 26, 10);    }  }  [ look ladderif (said("examine", "ladder"))  {  [ if Jerrod had a lit lantern or lit match  if ((isset(LanternLit) || isset(MatchLit)))    {    if (posn(ego, 60, 0, 120, 167))      {      [ if near the ladder      print.at("It's just a wooden ladder.", 2, 26, 10);      }    else      {      print.at("Ya can't see a ladder from here.", 2, 26, 10);      }    }  else    {    print.at("It's too dern dark in here to see!", 2, 26, 10);    }  }  Done:[ call the logic that has code common to all tunnel roomscall(lgc.Tunnels);return();[ **************************************[ MESSAGES[ **************************************#message 13 "Ya can't do that while yer climbin'!"#message 14 "You're close to a likely spot. Try that nearby."#message 15 "Ya don't have a pick."#message 16 "That's impossible right now!"#message 17 "It's too dern dark in here to see!"#message 20 "Nothin'!"#message 24 "You're standin' on the door."#message 25 "Ya can't reach the door."#message 47 "There's no gold in sight right here."#message 48 "The door is heavy and huge."#message 49 "Ya can't see the door from here."#message 80 "Ya can't see a ladder from here."#message 81 "It's just a wooden ladder."