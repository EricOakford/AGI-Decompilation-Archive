[***********************************************************[[ lgc.Main[[ Logic 0 is the main logic; it gets run at the beginning[ of every game cycle, and it is responsible for calling[ all other logics as needed during the game.[[***********************************************************[ **************************************[ ERROR CHECK[ **************************************[ if one of the few trappable errors in AGI is encountered,[ the game is probably not able to continue; make an[ announcement to the player and quitif (errorNumber > 0)  {  call(lgc.ErrHandler);  }  [ **************************************[ GAME START[ **************************************if (currentRoom == 0)  {  [ when the game starts, the current room is zero, so all  [ the setup/initialization code goes here  [  [ restarting a game also sets currentRoom to zero, and  [ also requires most of the same setup/initialization  [ steps    [ when restarting, menus do not get reset so creating  [ menus is only done at very beginning, not on a restart  if (!isset(gameRestarted))    {    [ build the game's menu    set.menu("Sierra ");    set.menu.item("About GOLD RUSH!", mnuAbout);    set.menu.item("Help          F1", mnuHelp);    set.menu("File ");    set.menu.item("Save    F5", mnuSave);    set.menu.item("Restore F7", mnuRestore);    set.menu.item("----------", mnuSeparator);    set.menu.item("Restart F9", mnuRestart);    set.menu.item("----------", mnuSeparator);    set.menu.item("Quit Alt-Z", mnuQuit);    set.menu("Action ");    set.menu.item("Inventory   TAB", mnuInventory);    set.menu.item("Elapsed Time F6", mnuTime);    set.menu(" Special ");    set.menu.item("Sound on/off    F2", mnuToggleSound);    set.menu.item("Score on/off    F4", mnuToggleScore);    set.menu.item("Echo line       F3", mnuEchoLine);    set.menu.item("Cancel line Ctrl-C", mnuCancelLine);    set.menu.item("Joystick    Ctrl-J", mnuInitJoystick);    set.menu.item("Pause game     F10", mnuPause);    set.menu(" Speed");    set.menu.item("Normal ", mnuSpeedNormal);    set.menu.item("Slow   ", mnuSpeedSlow);    set.menu.item("Fast   ", mnuSpeedFast);    set.menu.item("Fastest", mnuSpeedFastest);    set.menu.item("-------", mnuSeparator);    set.menu.item("Slower ", mnuSpeedSlower);    submit.menu();    }      [ always start by calling the main initializaton logic  call(lgc.Initialize);    [if restarting, a few more clean up things to do  if (isset(gameRestarted))    {    [ make sure the custom status lines below the main game    [ picture are cleared    clear.lines(22, 22, BLACK);    clear.lines(24, 24, BLACK);    [ built-n status line needs to be off at the beginning    status.line.off();        [ since the reserved flag 'gameRestarted' will    [ automatically be cleared by AGI after this cycle ends,    [ we need a copy of it so we can know the restart status    [ later on    set(Restarting);    }    [ now run the starting logic; this gets things going  new.room(lgc.Start);  }  [ **************************************[ EVERY CYCLE[ **************************************[ things to do when a new room is loadedif (isset(newRoom))  {  [ check debug mode  if (isset(DebugMode))    {    [ if debugging, load the logic so it     [ can process debug commands    load.logics(lgc.Debug);    }      [ reset the local flags and variables that  [ are reserved for use only in rooms  call(lgc.ResetLocals);  }[ ***********************[ CHECK CONTROLLER INPUT[ *********************** [ HELPif ((controller(mnuHelp) ||     said("help") ||     said("help", "me")))  {  [ if in a tunnel room  if (currentRoom > 146 && currentRoom < 163)    {    [ darken the room before switching    [ to help screen    call(lgc.DarkenTunnel);    }  [ make sure enough memory is available  [ before switching  if (memoryLeft > 5)    {    stop.sound();    [ force custom status line to update    set(UpdateStatus);    [ then show help screens, one after the other    call(txt.Help1);    call(txt.Help2);    }  else    {    print("Now is not the time.");    }  }  [ TOGGLE SOUNDif (controller(mnuToggleSound))  {  toggle(soundOn);  }  [ ECHO LINEif (controller(mnuEchoLine))  {  echo.line();  }  [ TOGGLE SCOREif (controller(mnuToggleScore))  {  [ toggle current status  toggle(ShowStatus);  [ reset the flag to force update at end of this cycle  reset(StatusLineSet);  }  [ SAVE GAMEif ((controller(mnuSave) || said("save", "game")))  {  [ if in a tunnel room  if (currentRoom > 146 && currentRoom < 163)    {    [ darken the tunnel first    call(lgc.DarkenTunnel);    }  [ stop any sound that is playing  stop.sound();  [ force custom status line to update  set(UpdateStatus);  [ save the game  save.game();  }  [ TIMEif ((controller(mnuTime) || said("time")))  {  [ if in a tunnel  if (currentRoom > 146 && currentRoom < 162)    {    [ ignore the input; time will not be displayed in tunnel    [ rooms    goto(Timing);    }  [ if player wants to see travel time  if (isset(ShowTravelTime))    {    [ if Jerrod is in California    if (isset(InCalifornia))      {      [ show total time enroute, along with real-time      [ elapsed      print("%m68%m65%m28%m29");      }    else      {      [ if not in California, show how much travel time has      [ currently gone by, along with real-time elapsed      print("%m16%m65%m28%m29");      }    }  else    {    [ show only real-time elapsed    print("%m28%m29");    }  }  [ RESTORE GAMEif ((controller(mnuRestore) || said("restore", "game")))  {  [ stop any sound that is playing  stop.sound();    [ if in a tunnel  if (currentRoom > 146 && currentRoom < 163)    {    [ darken room first    call(lgc.DarkenTunnel);    }  [ force custom status line to update  set(UpdateStatus);  [ then restore the game  restore.game();  }  [ RESTART GAMEif ((controller(mnuRestart) ||     said("restart", "game") ||     said("restart")))  {  [ if in a tunnel  if (currentRoom > 146 && currentRoom < 163)    {    [ darken the tunnel first    call(lgc.DarkenTunnel);    }  [ force custom status line to update  [ then restart the game  set(UpdateStatus);  restart.game();  }  [ PAUSEif (controller(mnuPause))  {  [ if in a tunnel  if (currentRoom > 146 && currentRoom < 163)    {    [ darken the tunnel first    call(lgc.DarkenTunnel);    }  [ stop any sound that is playing  stop.sound();  [ tehn pause the game  pause();  }  [ INVENTORYif ((controller(mnuInventory) || said("inventory")))  {  [ if in a tunnel  if (currentRoom > 146 && currentRoom < 163)    {    [ darken the tunnel first    call(lgc.DarkenTunnel);    }  [ stop any sound that is playing  stop.sound();  [ force custom status line to update  set(UpdateStatus);  [ then display inventory status  status();  }  [ SHOW MENUif (controller(keyShowMenu))  {  [ if in a tunnel  if (currentRoom > 146 && currentRoom < 163)    {    [ darken the tunnel first    call(lgc.DarkenTunnel);    }  [ stop any sound that is playing  stop.sound();  [ enable menu to display  set(enableMenu);  [ force custom status line to update  set(UpdateStatus);  [ then display the menu  menu.input();  }[ SLOWERif (controller(mnuSpeedSlower))  {  [ increase animation interval to slow game down  animationInterval  += 1;  }  [ SLOWif ((controller(mnuSpeedSlow) || said("s")))  {  [ set animation interval to slow value  animationInterval = 3;  }  [ NORMALif ((controller(mnuSpeedNormal) || said("normal")))  {  [ set animation interval to normal value  animationInterval = 2;  }  [ FASTif ((controller(mnuSpeedFast) || said("f")))  {  [ set animation interval to fast value  animationInterval = 1;  }  [ FASTESTif ((controller(mnuSpeedFastest) || said("fastest")))  {  [ set animation interval to zero so interpreter  [ cycles as fast as the CPU allows  animationInterval = 0;  }  [ debug mode was left in, probably because they forgot; I[ don't think they intentionally left it in; the magic[ phrase is "bird boy"[ if debug mode is not active, and correct phrase is saidif (!isset(DebugMode) && said("bird", "boy"))  {  [ set debug mode  set(DebugMode);  [ load the debug logic  load.logics(lgc.Debug);  [ display game version information  print("\n  GOLD RUSH!\n\n Version 2.01\n\n Dec. 22, 1988 \n");  [ display interpreter version information  version();    [ in case player is in a room where input is not normally  [ allowed, the accept.input command will let player   [ enter debug commands  accept.input();  }  [ INITIALIZE JOYSTICKif (controller(mnuInitJoystick))  {  [ if in a tunnel room  if (currentRoom > 146 && currentRoom < 163)    {    [ darken the tunnel room first    call(lgc.DarkenTunnel);    }  [ initialize the joystick  init.joy();  }  [ CANCEL LINEif (controller(mnuCancelLine))  {  cancel.line();  }  [ TOGGLE MONITORif (controller(keyToggleMonitor))  {  toggle.monitor();  }  [ QUITif ((controller(mnuQuit) || said("quit")))  {  [ if inside paper office building  if (currentRoom == rm.PaperOfficeInterior)    {    [ 'quit' has an in-game meaning, if used in the    [ newspaper office where Jerrod works        [ reset match flag     reset(haveMatch);    [ check again to see if player said 'quit', or if the     [ controller was used    if (said("quit"))      {      [ player input 'quit', which needs to be interpreted      [ as 'quit my job'; reset match, and let the room      [ logic handle this input      reset(haveMatch);      [ skip to next controller check      goto(NextController);      }    }      [ if in a tunnel room  if (currentRoom > 146 && currentRoom < 163)    {    [ darken tunnel (because player may change mind and not    [ quit; in that case the message box will mess up the    [ screen, so tunnels have to be darkened first)    call(lgc.DarkenTunnel);    }      [ stop any sound that's playing  stop.sound();  [ if in debug mode  if (isset(DebugMode))    {    [ don't ask, just quit    quit(1);    }  else    {    [ if not in debug mode, ask player to confirm that they    [ really want to quit; if they say 'no' game will    [ continue    quit(0);    }  }  NextController:[ ABOUTif (controller(mnuAbout))  {  [ if in a tunnel room  if (currentRoom > 146 && currentRoom < 163)    {    [ darken tunnel first    call(lgc.DarkenTunnel);    }  [ display game version information  print("\n  GOLD RUSH!\n\n Version 2.01\n\n Dec. 22, 1988 \n");  [ display interpreter version information  version();  }  [ ***********************[ NON-CONTROLLER CHECKS[ *********************** [ if game has just been restored  if (isset(gameRestored))  {  [ need to re-disable menu separators  disable.item(mnuSeparator);  [ clear any remaining custom status line  clear.lines(22, 22, BLACK);  clear.lines(24, 24, BLACK);  [ reset the StatusLine flag so it gets redrawn at end of  [ this cycle  reset(StatusLineSet);  }  [ if NOT restarting a gameif (!isset(gameRestarted))  {  [ if status line needs to be displayed and update is  [ needed  if (isset(ShowStatus) && !isset(StatusLineSet))    {    [ display the status line    status.line.on();    [ set flag to indicate statusline state is current    set(StatusLineSet);    }  [ if status line needs to be hidden and update is needed  if (!isset(ShowStatus) && !isset(StatusLineSet))    {    [ hide status line    status.line.off();    [ set flag to indicate statusline state is current    set(StatusLineSet);    }  }  [ get Jerrod's positionget.posn(ego, EgoX, EgoY);[ if ego object is NOT allowed to cycle when stoppedif (!isset(CycleAtRest))  {  [ stop cycling if ego is not moving  if (egoDir == STOPPED)    {    stop.cycling(ego);    }  else    {    [ if Jerrod hasn't changed position or direction    if (EgoX == OldEgoX &&        EgoY == OldEgoY &&         egoDir == OldEgoDir)      {      [ he bumped into something; stop cycling      stop.cycling(ego);      }    else      {      [ otherwise, cycle Jerrod while he's moving      start.cycling(ego);      }    }  }[ save the old values to compare on next cycleOldEgoDir = egoDir;OldEgoX = EgoX;OldEgoY = EgoY;[ **************************************[ PROCESS PLAYER INPUT[ **************************************[ if player hasn't provided input no need to do said testsif (!isset(haveInput))  {  goto(Timing);  }[ if player is the tunnelsif (currentRoom > 146 && currentRoom < 163)  {  [ there are no global checks to make for input, so skip  [ said tests  goto(Timing);  }  [ in many cases, after checking the 'said' command, the main[ logic will determine that the input needs to be handled by[ the room's logic, or by another said command later in the[ sequence; in that case, the haveMatch flag gets reset, so[ that another said command will be able to process the[ input again; that's why there are so many [ 'reset(haveMatch);' statements in this part of lgc.Main[ sell homeif (said("sell", "home"))  {  [ if house is already sold  if (SellHousePhase == SOLD)    {    print("You only have one house to sell!");    }  [ if house is already for sale  if (SellHousePhase > NOT_FOR_SALE &&       SellHousePhase < SOLD)    {    print("Your house is already\n       FOR SALE.");    }  [ if not for sale yet, but rush has been announced  if (SellHousePhase == NOT_FOR_SALE &&       isset(RushAnnounced))    {    [ it's too late to sell    print("It's way too late to do that!");    }  [ if not for sale yet, and rush has NOT been announced  if (SellHousePhase == NOT_FOR_SALE &&       !isset(RushAnnounced))    {    [ put house up for sale    print("This is a difficult decision. Your house means a lot to you, but you "          "put it up for sale.");    [ initialize agent activity    AgentWaitTime = 1;    [ change sell phase    SellHousePhase = FOR_SALE;    }  }  [ look pipeif (said("examine", "pipe"))  {  if (has("Pipe"))    {    show.obj(vw.Inv.Pipes);    }  else    {    [ Jerrod doesn't have this item; reset haveMatch flag so    [ generic response can be provided    reset(haveMatch);    }  }  [ look keyif (said("examine", "house key"))  {  [ if Jerrod has either key  if ((has("House key") || has("Steel key")))    {    if (has("House key"))      {      show.obj(vw.Inv.HouseKey);      }    if (has("Steel key"))      {      show.obj(vw.Inv.SteelKey);      }    }  else    {    [ Jerrod doesn't have this item; reset haveMatch flag so    [ generic response can be provided    reset(haveMatch);    }  }[ look house keyif (said("examine", "home", "house key"))  {  if (has("House key"))    {    show.obj(vw.Inv.HouseKey);    }  else    {    [ Jerrod doesn't have this item; reset haveMatch flag so    [ generic response can be provided    reset(haveMatch);    }  }  [ look steel keyif (said("examine", "steel", "house key"))  {  if (has("Steel key"))    {    show.obj(vw.Inv.SteelKey);    }  else    {    [ Jerrod doesn't have this item; reset haveMatch flag so    [ generic response can be provided    reset(haveMatch);    }  }[ look nailsif (said("examine", "nail"))  {  if (has("Nails"))    {    show.obj(vw.Inv.Nails);    }  else    {    [ Jerrod doesn't have this item; reset haveMatch flag so    [ generic response can be provided    reset(haveMatch);    }  }  [ look manureif (said("examine", "bull manure"))  {  if (has("Pure bull manure"))    {    show.obj(vw.Inv.Manure);    }  else    {    reset(haveMatch);    [ Jerrod doesn't have this item; reset haveMatch flag so    [ generic response can be provided    }  }  [ look moneyif (said("examine", "bucks"))  {  if (CurrentCash > 0)    {    show.obj(vw.Inv.Cash);    }  else    {    reset(haveMatch);    [ Jerrod doesn't have this item; reset haveMatch flag so    [ generic response can be provided    }  }  [ look envelope/read envelopeif ((said("examine", "envelope") ||     said("read", "envelope")))  {  [ if Jerrod hasn't picked up the letter yet,  if (JakesLetter == JL_NOT_DELIVERED)    {    [ Jerrod doesn't have this item; reset haveMatch flag so    [ generic response can be provided    reset(haveMatch);    }  else    {    [ Jerrod has the letter so show the envelope    show.obj(vw.Inv.Envelope);    }  }  [ look at letter/look at hole in letterif ((said("examine", "letter") ||     said("examine", "hole", "letter") ||     said("examine", "hole")))  {  [ in these two rooms, 'hole' means something different  if ((currentRoom == rm.OuthouseInterior ||       currentRoom == rm.Hotel2ndFloorRight))    {    [ this isn't really necessary; if this was removed, the    [ 'set(haveMatch);' statement a few lines down could be    [ removed    reset(haveMatch);        [ if input specifically matches 'look hole'    if (said("examine", "hole"))      {      [ let the room logic handle this input      reset(haveMatch);      goto(Timing);      }    }      [ just in case flag was reset by previous 'if' block,  [ force it to 'set' here  set(haveMatch);    [ if Jerrod doesn't have the letter yet  if (JakesLetter == JL_NOT_DELIVERED)    {    [ Jerrod doesn't have this item; reset haveMatch flag so    [ generic response can be provided    reset(haveMatch);    }      [ if the letter has been delivered, but not opened  if (JakesLetter == JL_DELIVERED)    {    show.obj(vw.Inv.Envelope);    }    [ if the letter has been opened  if (JakesLetter == JL_OPENED)    {    show.obj(vw.Inv.Letter);    }  }  [ read letterif (said("read", "letter"))  {  [ if Jerrod doesn't have the letter yet  if (JakesLetter == JL_NOT_DELIVERED)    {    [ Jerrod doesn't have this item; reset haveMatch flag so    [ generic response can be provided    reset(haveMatch);    }      [ if letter has been delivered, but not opened  if (JakesLetter == JL_DELIVERED)    {    print("The letter isn't open.");    }    [ if the letter is open  if (JakesLetter == JL_OPENED)    {    [ if not read yet    if (!isset(ReadJakesLetter))      {      [ set the flag      set(ReadJakesLetter);      }    print.at("Jan. 25, 1848\n\nJerrod,\n\nThis letter is of GREAT importance, "             "as you will FIND. I live IN THE area drained by the AMERICAN "             "RIVER. Today I came down to bury Pa. You will want to come here "             "quickly; only you will understand.\n\nFarewell,\nJake\n\nP.S. "             "Bring something from home so I will know it's you.", 2, 2, 36);    show.obj(vw.Inv.Letter);    }  }  [ open letterif ((said("open", "letter") || said("open", "envelope")))  {  [ if Jerrod doesn't have the letter yet  if (JakesLetter == JL_NOT_DELIVERED)    {    [ Jerrod doesn't have this item; reset haveMatch flag so    [ generic response can be provided    reset(haveMatch);    }      [ if the letter is already open  if (JakesLetter == JL_OPENED)    {    print("The letter is already open.");    }    [ if Jerrod has the letter but it's not open yet  if (JakesLetter == JL_DELIVERED)    {    [ open it    JakesLetter = JL_OPENED;    print("You carefully open the letter.");    [ get the envelope as a separate item    get("Envelope");    }  }  [ look post markif ((said("examine", "post mark") ||     said("read", "post mark")))  {  [ if Jerrod has the letter  if (JakesLetter != JL_NOT_DELIVERED)    {    print("It is difficult to read, but you are able to decipher \"Sutter's "          "Fort.\"");    [ if not already scored points for seeing postmark    if (!isset(ScorePostmark))      {      [ if in California      if (isset(InCalifornia))        {        [ play the gold sound when scoring points        load.sound(m.FoundGold);        sound(m.FoundGold, DoneNoAction);        }      else        {        [ play the New York score sound        load.sound(s.AddToScore);        sound(s.AddToScore, DoneNoAction);        }      [ score one point      set(ScorePostmark);      currentScore  += 1;      }    }  else    {    [ Jerrod doesn't have this item; reset haveMatch flag so    [ generic response can be provided    reset(haveMatch);    }  }  [ lift stamp/look under stampif ((said("remove", "stamp") ||     said("lift", "stamp") ||     said("peal", "stamp") ||     said("acquire", "stamp") ||     said("move", "stamp") ||     said("examine", "below", "stamp") ||     said("acquire", "flake") ||     said("acquire", "gold", "flake")))  {  [ if Jerrod has the letter  if (JakesLetter != JL_NOT_DELIVERED)    {    [ if Jerrod hasn't found the gold flake yet    if (!isset(FoundGoldFlake))      {      [ he has now!      set(FoundGoldFlake);      [ if in California      if (isset(InCalifornia))        {        [ play the gold sound when scoring points        load.sound(m.FoundGold);        sound(m.FoundGold, DoneNoAction);        }      else        {        [ play New York score sound        load.sound(s.AddToScore);        sound(s.AddToScore, DoneNoAction);        }      print("You peal back a corner of the stamp and find a GOLD FLAKE! Jake "            "has found gold!!");      [ score one point      currentScore  += 1;      [ acquire the gold flake      get("Gold flake");      }    else      {      print("You have already done that!");      }    }  else    {    [ Jerrod doesn't have this item; reset haveMatch flag so    [ generic response can be provided    reset(haveMatch);    }  }  [ look stamp/ read stampif ((said("examine", "stamp") || said("read", "stamp")))  {  [ if Jerrod has the letter (actually has it, in inventory)  if (has("Letter"))    {    [ if Jerrod has found the gold flake    if (isset(FoundGoldFlake))      {      [ assume he wants to see the flake      show.obj(vw.Inv.GoldFlake);      }    else      {      [ give a hint about the gold flake      print("This is one of the first adhesive stamps ever. You notice a lump "            "under the stamp.");      }    }  else    {    [ let the room logic handle this input    reset(haveMatch);    }  }  [ look stringif (said("examine", "string"))  {  [ if Jerrod has either string  if ((StringStatus == 1 || has("String")))    {    [ if in California    if (isset(InCalifornia))      {      [ only string Jerrod could have is the string picked      [ up in hotel room 12      show.obj(vw.Inv.String);      }    else      {      [ if not in California, only string Jerrod could have      [ is the string found on the boat      show.obj(vw.Inv.BoatString);      }    }  else    {    [ Jerrod doesn't have this item; reset haveMatch flag so    [ generic response can be provided    reset(haveMatch);    }  }  [ look goldif (said("examine", "gold"))  {  if (GoldIndex > 59)    {    show.obj(vw.Inv.Gold);    }  else    {    [ Jerrod doesn't have any gold; reset haveMatch flag so    [ generic response can be provided    reset(haveMatch);    }  }  [ look bank statement/read bank statementif ((said("examine", "bank statement") ||     said("examine", "bank", "bank statement") ||     said("read", "bank statement") ||     said("read", "bank", "bank statement")))  {  [ if Jerrod has the bank statement  if (has("Bank statement"))    {    if (!isset(ScoreBankStatement))      {      [ score two points      set(ScoreBankStatement);      load.sound(s.AddToScore);      sound(s.AddToScore, DoneNoAction);      currentScore  += 2;      }    [ and show it (which gives Jerrod his bank account    [ number)    show.obj(vw.Inv.BankStatement);    }  else    {    [ Jerrod doesn't have this item; reset haveMatch flag so    [ generic response can be provided    reset(haveMatch);    }  }  [ look gold flakeif ((said("examine", "gold", "flake") || said("examine", "flake")))  {  [ if Jerrod has found the gold flake  if (isset(FoundGoldFlake))    {    show.obj(vw.Inv.GoldFlake);    }  else    {    [ Jerrod doesn't have this item; reset haveMatch flag so    [ generic response can be provided    reset(haveMatch);    }  }  [ look coin/look gold coinif ((said("examine", "coin") ||     said("examine", "gold", "coin")))  {  if (has("Gold coin"))    {    show.obj(vw.Inv.GoldCoin);    }  else    {    [ Jerrod doesn't have this item; reset haveMatch flag so    [ generic response can be provided    reset(haveMatch);    }  }  [ look flowersif (said("examine", "bouquet"))  {  if (has("Flowers"))    {    show.obj(vw.Inv.Flowers);    }  else    {    [ Jerrod doesn't have this item; reset haveMatch flag so    [ generic response can be provided    reset(haveMatch);    }  }  [ smell flowersif (said("smell", "bouquet"))  {  if (has("Flowers"))    {    print("They smell lovely.");    }  else    {    [ Jerrod doesn't have this item; reset haveMatch flag so    [ generic response can be provided    reset(haveMatch);    }  }  [ look ticket/read ticketif ((said("examine", "ticket") || said("read", "ticket")))  {  [ if Jerrod has a ticket  if (TicketChoice != NO_TICKET)    {    [ show whichever ticket Jerrod has    if (TicketChoice == TKT_CAPE)      {      show.obj(vw.Inv.CapeHornTicket);      }    if (TicketChoice == TKT_PANAMA)      {      show.obj(vw.Inv.PanamaTicket);      }    if (TicketChoice == TKT_COACH)      {      show.obj(vw.Inv.CoachTicket);      }    }  else    {    [ Jerrod doesn't have a ticket yet; reset haveMatch flag     [ so generic response can be provided    reset(haveMatch);    }  }  [ look cape horn ticketif ((said("examine", "cape", "ticket") ||     said("read", "cape", "ticket")))  {  if (TicketChoice == TKT_CAPE)    {    show.obj(vw.Inv.CapeHornTicket);    }  else    {    [ Jerrod doesn't have Cape Horn ticket; reset haveMatch    [ flag so generic response can be provided    reset(haveMatch);    }  }  [ look panama ticketif ((said("examine", "isthmus", "ticket") ||     said("read", "isthmus", "ticket")))  {  if (TicketChoice == TKT_PANAMA)    {    show.obj(vw.Inv.PanamaTicket);    }  else    {    [ Jerrod doesn't have panama ticket; reset haveMatch    [ flag so generic response can be provided    reset(haveMatch);    }  }  [ look coach ticketif ((said("examine", "coach", "ticket") ||     said("read", "coach", "ticket")))  {  if (TicketChoice == TKT_COACH)    {    show.obj(vw.Inv.CoachTicket);    }  else    {    [ Jerrod doesn't have a coach ticket; reset haveMatch    [ flag so generic response can be provided    reset(haveMatch);    }  }  [ look Bible/look bookif ((said("examine", "bible") || said("examine", "book")))  {  if (has("Bible"))    {    show.obj(vw.Inv.Bible);    }  else    {    [ Jerrod doesn't have this item yet; reset haveMatch    [ flag so generic response can be provided    reset(haveMatch);    }  }  [ read Bible/read bookif ((said("read", "bible") || said("read", "book")))  {  if (has("Bible"))    {    [ check memory    if (memoryLeft < 8)      {      [ not enough memory to show the text screen right now      print("Now is not the time.");      [ skip to timing section      goto(Timing);      }          [ increment 'page' number    ++BiblePage;    [ force custom status line to update    set(UpdateStatus);        [ display whichever page is currently selected    if (BiblePage == 1)      {      call(txt.BiblePage_1);      }    if (BiblePage == 2)      {      call(txt.BiblePage_2);      }    if (BiblePage == 3)      {      call(txt.BiblePage_3);      }    if (BiblePage == 4)      {      call(txt.BiblePage_4);      }    if (BiblePage == 5)      {      call(txt.BiblePage_5);      }    if (BiblePage == 6)      {      call(txt.BiblePage_6);      }    if (BiblePage == 7)      {      call(txt.BiblePage_7);      }    if (BiblePage == 8)      {      call(txt.BiblePage_8);      }    if (BiblePage == 9)      {      call(txt.BiblePage_9);      }    if (BiblePage == 10)      {      call(txt.BiblePage_10);      }    if (BiblePage == 11)      {      call(txt.BiblePage_11);      }    if (BiblePage == 12)      {      call(txt.BiblePage_12);      }    if (BiblePage == 13)      {      call(txt.BiblePage_13);      }    [ if on last page    if (BiblePage > 12)      {      [ reset to first page      BiblePage = 0;      }    }  else    {    [ Jerrod doesn't have this item yet; reset haveMatch    [ flag so generic response can be provided    reset(haveMatch);    }  }  [ read psalmif (said("read", "psalm"))  {  [ if Jerrod has the Bible  if (has("Bible"))    {    [ check that there is enough memory    if (memoryLeft > 7)      {      [ force custom status line to update      set(UpdateStatus);      [ show 'page' 4      call(txt.BiblePage_4);      }    else      {      [ insufficient memory right now      print("Now is not the time.");      }    }  else    {    [ reset haveMatch flag so a generic response can be    [ provided    reset(haveMatch);    }  }  [ look matchif (said("examine", "match"))  {  if (has("Matches"))    {    show.obj(vw.Inv.Matches);    }  else    {    [ Jerrod doesn't have this item yet; reset haveMatch    [ flag so generic response can be provided    reset(haveMatch);    }  }  [ look shovel handle/look shovelif ((said("examine", "shovel handle") ||     said("examine", "beam", "shovel handle") ||     said("examine", "shovel", "handle") ||     said("examine", "shovel")))  {  [ if Jerrod has the shovel handle or a shovel  if ((has("Wooden stick") || has("Shovel")))    {    [ can only have one or the other (handle on boat, shovel    [ in California)        [ if Jerrod has the shovel handle    if (has("Wooden stick"))      {      show.obj(vw.Inv.ShovelHandle);      }    else      {      show.obj(vw.Inv.Shovel);      }    }  else    {    [ Jerrod doesn't have this item yet; reset haveMatch    [ flag so generic response can be provided    reset(haveMatch);    }  }  [ look metalif ((said("examine", "metal") ||     said("examine", "metal", "metal")))  {  if (MetalStatus == 1)    {    show.obj(vw.Inv.MetalPieces);    }  else    {    [ Jerrod doesn't have this item yet; reset haveMatch    [ flag so generic response can be provided    reset(haveMatch);    }  }  [ look paper clipif ((said("examine", "clip") ||     said("examine", "newspaper", "clip")))  {  if (has("Paper clip"))    {    show.obj(vw.Inv.Paperclip);    }  else    {    [ Jerrod doesn't have this item yet; reset haveMatch    [ flag so generic response can be provided    reset(haveMatch);    }  }  [ look ham/look baconif (said("examine", "bacon"))  {  if (has("Piece of ham"))    {    show.obj(vw.Inv.Ham);    }  else    {    [ Jerrod doesn't have this item yet; reset haveMatch    [ flag so generic response can be provided    reset(haveMatch);    }  }  [ look fishif (said("examine", "fish"))  {  if (has("Fish"))    {    show.obj(vw.Inv.Fish);    }  else    {    [ Jerrod doesn't have this item yet; reset haveMatch    [ flag so generic response can be provided    reset(haveMatch);    }  }  [ look gold diskif ((said("examine", "gold", "disk") ||     said("examine", "disk")))  {  if (HasGoldDisk == 1)    {    show.obj(vw.Inv.GoldDisk);    }  else    {    [ Jerrod doesn't have this item yet; reset haveMatch    [ flag so generic response can be provided    reset(haveMatch);    }  }  [ look lumberif (said("examine", "beam"))  {  if (has("Lumber"))    {    show.obj(vw.Inv.Lumber);    }  else    {    [ Jerrod doesn't have this item yet; reset haveMatch    [ flag so generic response can be provided    reset(haveMatch);    }  }  [ look ropeif (said("examine", "rope"))  {  if (has("Rope"))    {    show.obj(vw.Inv.Rope);    }  else    {    [ Jerrod doesn't have this item yet; reset haveMatch    [ flag so generic response can be provided    reset(haveMatch);    }  }  [ look bucketif (said("examine", "bucket"))  {  if (has("Bucket"))    {    show.obj(vw.Inv.Bucket);    }  else    {    [ Jerrod doesn't have this item yet; reset haveMatch    [ flag so generic response can be provided    reset(haveMatch);    }  }  [ look chainif (said("examine", "chain"))  {  if (has("Chain"))    {    show.obj(vw.Inv.Chain);    }  else    {    [ Jerrod doesn't have this item yet; reset haveMatch    [ flag so generic response can be provided    reset(haveMatch);    }  }  [ look mosquito netif (said("examine", "mosquito net"))  {  if (has("Mosquito net"))    {    show.obj(vw.Inv.MosquitoNet);    }  else    {    [ Jerrod doesn't have this item yet; reset haveMatch    [ flag so generic response can be provided    reset(haveMatch);    }  }  [ look lanternif (said("examine", "lantern"))  {  if (has("Lantern"))    {    show.obj(vw.Inv.Lantern);    }  else    {    [ Jerrod doesn't have this item yet; reset haveMatch    [ flag so generic response can be provided    reset(haveMatch);    }  }  [ look orangesif (said("examine", "citrus fruit"))  {  if (has("Citrus fruit"))    {    show.obj(vw.Inv.Oranges);    }  else    {    [ Jerrod doesn't have this item yet; reset haveMatch    [ flag so generic response can be provided    reset(haveMatch);    }  }  [ look flourif (said("examine", "flour"))  {  if (has("Flour"))    {    show.obj(vw.Inv.Flour);    }  else    {    [ Jerrod doesn't have this item yet; reset haveMatch    [ flag so generic response can be provided    reset(haveMatch);    }  }  [ look peasif (said("examine", "pea"))  {  if (has("Peas"))    {    show.obj(vw.Inv.Peas);    }  else    {    [ Jerrod doesn't have this item yet; reset haveMatch    [ flag so generic response can be provided    reset(haveMatch);    }  }  [ look beansif (said("examine", "bean"))  {  if (has("Beans"))    {    show.obj(vw.Inv.Beans);    }  else    {    [ Jerrod doesn't have this item yet; reset haveMatch    [ flag so generic response can be provided    reset(haveMatch);    }  }  [ look vegetablesif (said("examine", "vegetable"))  {  if (has("Vegetables"))    {    show.obj(vw.Inv.Vegetables);    }  else    {    [ Jerrod doesn't have this item yet; reset haveMatch    [ flag so generic response can be provided    reset(haveMatch);    }  }  [ look pickif (said("examine", "pick"))  {  if (has("Pick"))    {    show.obj(vw.Inv.PickAx);    }  else    {    [ Jerrod doesn't have this item yet; reset haveMatch    [ flag so generic response can be provided    reset(haveMatch);    }  }  [ look gold panif ((said("examine", "gold", "pan") ||     said("examine", "pan")))  {  if (has("Gold pan"))    {    show.obj(vw.Inv.Pan);    }  else    {    [ Jerrod doesn't have this item yet; reset haveMatch    [ flag so generic response can be provided    reset(haveMatch);    }  }  [ look branding ironif ((said("examine", "branding", "iron") ||     said("examine", "iron")))  {  if (has("Branding iron"))    {    show.obj(vw.Inv.BrandingIron);    }  else    {    [ Jerrod doesn't have this item yet; reset haveMatch    [ flag so generic response can be provided    reset(haveMatch);    }  }  [ look magnetif (said("examine", "magnet"))  {  if (has("Magnet"))    {    show.obj(vw.Inv.Magnet);    }  else    {    [ Jerrod doesn't have this item yet; reset haveMatch    [ flag so generic response can be provided    reset(haveMatch);    }  }  [ look note/read noteif ((said("examine", "note") || said("read", "note")))  {  if (has("Note from Jake"))    {    show.obj(vw.Inv.Note);    }  else    {    [ Jerrod doesn't have this item yet; reset haveMatch    [ flag so generic response can be provided    reset(haveMatch);    }  }  [ look aerogram/read aerogramif ((said("examine", "aerogram") ||     said("read", "aerogram")))  {  if (has("Aerogram"))    {    show.obj(vw.Inv.Aerogram);    }  else    {    [ Jerrod doesn't have this item yet; reset haveMatch    [ flag so generic response can be provided   reset(haveMatch);    }  }  [ look family photoif ((said("examine", "photo") ||     said("examine", "family", "photo")))  {  if (has("Family photo"))    {    show.obj(vw.Inv.Photo);    }  else    {    [ Jerrod doesn't have this item yet; reset haveMatch    [ flag so generic response can be provided    reset(haveMatch);    }  }    [ look at back of photoif ((said("examine", "back", "photo") ||     said("examine", "back", "family", "photo")))  {  if (has("Family photo"))    {    print("There is nothing on the back of the family photo.");    }  else    {    [ Jerrod doesn't have this item yet; reset haveMatch    [ flag so generic response can be provided    reset(haveMatch);    }  }  [ count moneyif (said("count", "bucks"))  {  print("To see how much %w2 you have, press the \"TAB\" key and look in your "        "inventory!");  }    [ **************************************[ TIME-DEPENDENT CHECKS[ **************************************Timing:[ if the animation interval has changed, it no longer[ matches the saved valueif (PreviousAnimateInt != animationInterval)  {  [ reset the previous value to match  PreviousAnimateInt = animationInterval;  [ set cycle counter to zero  CycleCounter = 0;  [ increment game seconds counter  ++GameSeconds;  [ select a cycle per second value based  [ on current animation interval  if (animationInterval == 0)    {    Game_CPS = CPS_Fastest;    }  if (animationInterval == 1)    {    Game_CPS = CPS_Fast;    }  if (animationInterval == 2)    {    Game_CPS = 10;    }  if (animationInterval > 2)    {    Game_CPS = 6;    }  }  [ if game timer is NOT paused,if (!isset(PauseGameTimer))  {  [ advance game time -  [ seconds, minutes, hours, days, weeks, months are tracked  [ (only 4 weeks in a month to keep it simple)  [ to keep game time as close as possible to real time, the  [ game tracks how many cycles have gone by  ++CycleCounter;    [ when the number of cycles equals the calculated number  [ of cycles per second  if (CycleCounter == Game_CPS)    {    [ reset the counter and advance the game second counter    CycleCounter = 0;    ++GameSeconds;    }      [ if more than 59 seconds  if (GameSeconds > 59)    {    [ if selling house, increase the time that the house has    [ been on the market    if (SellHousePhase > NOT_FOR_SALE &&         SellHousePhase < SOLD)      {      ++TimeOnMarket;      }    [ increment game minutes    ++GameMinutes;    [ reset to zero seconds    GameSeconds = 0;    }      [ if more than 59 minutes, advance hours  if (GameMinutes > 59)    {    [ increment game hours    ++GameHours;    [ reset to zero minutes    GameMinutes = 0;    }      [ if more than 23 hours, advance days  if (GameHours > 23)    {    [ increment game days    ++GameDays;    [ reset game hours    GameHours = 0;    }      [ if days are above 6, convert to weeks (some game actions  [ add more than one day at a time, so we don't just  [ advance one week and reset days to zero)  if (GameDays > 6)    {    [ increment game weeks    ++GameWeeks;    [ subtract 7 from game days (the programmers chose to     [ use a bunch of 'if' statements, but a single     [ subtraction statement (vGamedays -= 7;) would have    [ been much simpler and shorter)    if (GameDays == 7)      {      GameDays = 0;      }    if (GameDays == 8)      {      GameDays = 1;      }    if (GameDays == 9)      {      GameDays = 2;      }    if (GameDays == 10)      {      GameDays = 3;      }    if (GameDays == 11)      {      GameDays = 4;      }    if (GameDays == 12)      {      GameDays = 5;      }    if (GameDays == 13)      {      GameDays = 6;      }    }      [ if more than three weeks, advance months  if (GameWeeks > 3)    {    [ advance game months    ++GameMonths;    [ reset game weeks    GameWeeks = 0;    }  }  [ if enough time has passed, the gold rush is made public[ (unless Jerrod is in the middle of buying a ticket at the[ lower price!)if (RushTimer < GameMinutes &&     !isset(RushIsPublic) &&     !isset(BuyingLow))  {  [ everybody knows about the gold rush now  set(RushIsPublic);    [ if gold rush hasn't been announced yet, do it now  if (!isset(RushAnnounced))    {    print("We interrupt this game for a very important announcement:");    print("President Polk has confirmed the reports of the discovery of gold in "          "California.\n\n      THE RUSH IS ON!");    }  }[ if ship departure time passes and ship hasn't already[ sailed if (ShipDepartureTime < GameMinutes &&     GameHours == 0 &&     SteamshipPhase == 0)  {  [ begin sailing sequence  SteamshipPhase = 1;  }  [ if ship is starting due to reaching time limit, AND it[ hasn't actually sailed yet AND Jerrod isn't standing on[ the gangplank (this prevents ship from leaving while[ Jerrod is trying to board)if (SteamshipPhase == 1 &&     !isset(OnGangplank) &&     !isset(ShipSailed))  {  [ set flag to show ship has sailed  set(ShipSailed);  SteamshipPhase = 2;  [ if Jerrod is NOT at the dock when the ship sails,  if (currentRoom != rm.BrooklynDock)    {    [ set flag to indicate ship is leaving (this flag serves    [ no purpose unless the ship starts to sail while     [ Jerrod is at the Brooklyn Dock, so setting it here    [ is meaningless)    set(CallAllAboard);    }  }  [ if ship has sailed (flag f39 is never set, and never used[ anywhere else; it's original intended purpose is not [ known)if (isset(ShipSailed) && !isset(f39))  {  [ increment the counter  ++StmShipCounter;  [ update the steam ship on every fourth cycle  if (StmShipCounter == 4)    {    [ reset the counter    StmShipCounter = 0;        [ if ship is in left sector    if (SteamshipXL < 107)      {      [ move right one step      ++SteamshipXL;      }    [ when ship reaches edge of left sector, begin moving it    [ in middle sector    if (SteamshipXL > 101 && SteamshipXM < 107)      {      ++SteamshipXM;      }    [ when ship reaches edge of middle sector, begin moving    [ it in right sector    if (SteamshipXM > 101 && SteamshipXR < 107)      {      ++SteamshipXR;      }    }  }[ if house is for sale, and wait time has passedif (AgentWaitTime < TimeOnMarket &&     SellHousePhase == FOR_SALE)  {  [ if Jerrod is not at his house  if (currentRoom != rm.JerrodsHouse)    {    [ the agent is ready to make an offer    SellHousePhase = OFFERING;    [ adjust wait time to 3 minutes    AgentWaitTime = 3;    [ reset time on market- that's how long Jerrod has to    [ find agent and make a deal    TimeOnMarket = 0;    }  }  [ if Jerrod took too long and isn't at his house in timeif (AgentWaitTime < TimeOnMarket &&     SellHousePhase == OFFERING &&     !isset(RushAnnounced))  {  [ if Jerrod is not at his house  if (currentRoom != rm.JerrodsHouse)    {    [ the agent gives up waiting; offer is rescinded    print("The person interested in buying your house has been waiting there, "          "but is now gone. Sorry!");    [ revert to 'for sale' status    SellHousePhase = FOR_SALE;    [ reset time on market    TimeOnMarket = 0;    [ in one minute, agent will be interested again    AgentWaitTime = 1;    }  }  [ check for debug shortcut that goes right to start of game,[ skipping copy protection and intro animation (appears to[ be commented out; this flag is never set)if (isset(QuickStart))  {  [ if any key is pressed  if (have.key())    {    [ reset the quickstart flag    reset(QuickStart);    [ and go to starting room    new.room(rm.MainSt);    }  }  [ always call the logic associated with the current room; it[ will handle room specific matterscall.v(currentRoom);[ if in debug modeif (isset(DebugMode))  {  [ call the debug logic to process any debug commands  call(lgc.Debug);  }[ once the current room's logic is run, always reset the[ update status flagreset(UpdateStatus);[ in each cycle, check to see if Jerrod is dead (it[ happens a lot...)if (isset(JerrodIsDead))  {  [ increment restart message delay counter  ++RestartMsgCounter;  [ after 50 cycles  if (RestartMsgCounter == 50)    {    [ show restart message    print("Press Enter then:\n\n<F7>  Restore game\n<F9>  Restart game\n");    }  }[ *****************************[ PROCESS GENERIC PLAYER INPUT[ *****************************  [ if player hasn't provided input no need to do said testsif (!isset(haveInput))  {  goto(Done);  }  [ drop anythingif (said("discard", "rol"))  {  print("It's not wise to drop anything. You never know when you might need it!");  }  [ if input not matched yet, and there is an unknown wordif (isset(haveInput) && unknownWordNum > 0)  {  [ don't need to do any other checks  reset(haveInput);    [ if Jerrod is in California  if (isset(InCalifornia))    {    [ add an offset for the unknown word message    unknownWordNum  += 40;    }  [ print message asking about the unknown word  print.v(unknownWordNum);  }  [ wear net/light lantern/light match/eat fruit/tie string to[ magnetif ((said("wear", "mosquito net") ||     said("lamp", "lantern") ||     said("lamp", "match") ||     said("eat", "citrus fruit") ||     said("tie", "string", "magnet")))  {  print("Now is not the time.");  }  [ look gold anything/gold anythingif ((said("examine", "gold", "rol") || said("gold", "rol")))  {  print("There's plenty of gold, you just need to find it!");  }  [ get gold anything/find gold anythingif ((said("acquire", "gold", "rol") ||     said("find", "gold", "rol")))  {  print("That's the right idea! How are you going to do it?");  }  [ larry owens - who is larry owens?if (said("larry", "owens"))  {  [ show the easter egg message  call(lgc.EasterEgg);  }  [ helloif (said("hello"))  {  print("    Greetings!\nWelcome to GOLD RUSH!");  }  [ byeif (said("bye"))  {  print("Bye!");  }  [ speak anythingif (said("speak", "rol"))  {  print("There's no one nearby.");  }  [ go anythingif (said("go", "rol"))  {  print("You have to do that yourself.");  }  [ eat anythingif (said("eat", "rol"))  {  print("Yuk!!");  }  [ close anythingif (said("close", "anyword"))  {  print("%m255close it.");  }  [ open anythingif (said("open", "anyword"))  {  print("%m255open it.");  }  [ move anythingif (said("move", "rol"))  {  print("%m255move it.");  }  [ sit anything/sleep anythingif ((said("sit", "rol") || said("sleep", "rol")))  {  print("No time for that!");  }  [ kiss anythingif (said("kiss", "rol"))  {  print("  Get ahold of\nyourself, Jerrod!");  }  [ hit anything/kill anythingif ((said("hit", "rol") || said("kill", "rol")))  {  print("That wouldn't be very nice!");  }  [ climb anythingif (said("climb", "rol"))  {  print("%m255climb it.");  }  [ kick anythingif (said("kick", "rol"))  {  print("Ouch!");  }  [ look up/look downif ((said("examine", "up") || said("examine", "down")))  {  print("Nothing important %w2 here!");  }  [ look anythingif (said("examine", "rol"))  {  if (isset(InCalifornia))    {    print("Ya see nothin' unusual.");    }  else    {    print("You notice nothing unusual.");    }  }  [ get anythingif (said("acquire", "rol"))  {  print("That will do you no good.");  }  [ after all checks of player input, if there is still[ something they said that wasn't parsed, then we don't know[ what they sayingif (isset(haveInput) && !isset(haveMatch))  {  print("What do you mean?");  }  [ all done; start another cycleDone:return();[ **************************************[ MESSAGES[ **************************************#message 1 "\"%w1\"%m10"#message 2 "\"%w2\"%m10"#message 3 "\"%w3\"%m10"#message 4 "\"%w4\"%m10"#message 5 "\"%w5\"%m10"#message 6 "\"%w6\"%m10"#message 7 "\"%w7\"%m10"#message 10 " is not understood."#message 11 "\n  GOLD RUSH!\n\n Version 2.01\n\n Dec. 22, 1988 \n"#message 12 "Inventory   TAB"#message 13 "Your house is already\n       FOR SALE."#message 14 "This is one of the first adhesive stamps ever. You notice a lump under the stamp."#message 15 "The letter is already open."#message 16 "Elapsed trek time:\n"#message 17 "Elapsed Time F6"#message 18 "Score on/off    F4"#message 19 "Cancel line Ctrl-C"#message 20 "Echo line       F3"#message 21 "Pause game     F10"#message 23 "The person interested in buying your house has been waiting there, but is now gone. Sorry!"#message 24 "It is difficult to read, but you are able to decipher \"Sutter's Fort.\""#message 25 "You peal back a corner of the stamp and find a GOLD FLAKE! Jake has found gold!!"#message 26 "%m28%m29"#message 27 "Slow   "#message 28 "Elapsed time:\n"#message 29 "\nHours: %v154\nMinutes: %v153\nSeconds: %v152"#message 30 "You have already done that!"#message 31 "There is nothing on the back of the family photo."#message 32 "To see how much %w2 you have, press the \"TAB\" key and look in your inventory!"#message 33 "You only have one house to sell!"#message 34 "It's way too late to do that!"#message 35 "This is a difficult decision. Your house means a lot to you, but you put it up for sale."#message 36 "Jan. 25, 1848\n\nJerrod,\n\nThis letter is of GREAT importance, as you will FIND. I live IN THE area drained by the AMERICAN RIVER. Today I came down to bury Pa. You will want to come here quickly; only you will understand.\n\nFarewell,\nJake\n\nP.S. Bring something from home so I will know it's you."#message 37 "The letter isn't open."#message 38 "You carefully open the letter."#message 39 "It's not wise to drop anything. You never know when you might need it!"#message 40 "File "#message 41 "%m50\"%w1.\""#message 42 "%m50\"%w2.\""#message 43 "%m50\"%w3.\""#message 44 "%m50\"%w4.\""#message 45 "%m50\"%w5.\""#message 46 "%m50\"%w6.\""#message 47 "%m50\"%w7.\""#message 50 "Ain't never heard of "#message 51 "Restore F7"#message 52 "Save    F5"#message 53 "Restart F9"#message 54 "Quit Alt-Z"#message 55 "Sierra "#message 56 "Action "#message 57 " Special "#message 58 " Speed"#message 59 "Joystick    Ctrl-J"#message 60 "Normal "#message 61 "Fast   "#message 62 "Sound on/off    F2"#message 63 "Help          F1"#message 65 "\nMonths: %v118\nWeeks: %v117\nDays: %v155\n\n"#message 66 "%m16%m65%m28%m29"#message 67 "Nothing important %w2 here!"#message 68 "Time enroute:\n"#message 69 ">"#message 71 "You notice nothing unusual."#message 72 "Fastest"#message 73 "We interrupt this game for a very important announcement:"#message 74 "President Polk has confirmed the reports of the discovery of gold in California.\n\n      THE RUSH IS ON!"#message 75 "Press Enter then:\n\n<F7>  Restore game\n<F9>  Restart game\n"#message 76 "That will do you no good."#message 77 "About GOLD RUSH!"#message 78 "----------"#message 79 "Slower "#message 80 "-------"#message 81 "Ya see nothin' unusual."#message 82 "They smell lovely."#message 90 "%m68%m65%m28%m29"#message 202 "Now is not the time."#message 203 "Ouch!"#message 204 "What do you mean?"#message 205 "There's plenty of gold, you just need to find it!"#message 206 "You have to do that yourself."#message 207 "That's the right idea! How are you going to do it?"#message 214 "There's no one nearby."#message 229 "    Greetings!\nWelcome to GOLD RUSH!"#message 230 "Bye!"#message 232 "%m255close it."#message 234 "%m255open it."#message 243 "That wouldn't be very nice!"#message 244 "  Get ahold of\nyourself, Jerrod!"#message 245 "Yuk!!"#message 246 "No time for that!"#message 247 "%m255move it."#message 248 "%m255climb it."#message 255 "You don't need to "