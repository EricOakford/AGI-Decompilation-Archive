[***********************************************************[[ rm.Tunnel_15[[ Another tunnel location, on the way to the final gold mine[ location. There are two piles of gold nuggets that Jerrod[ can find in this room, one that is in plain sight and [ another that he has to find by digging in the right place.[ [***********************************************************[ **************************************[ LOCAL DEFINES[ **************************************#define oDark1                       o1#define oDark2                       o2#define oDark3                       o3#define oDark4                       o4#define oDark5                       o5#define oDark6                       o6#define oDark7                       o7#define oDark8                       o8#define oDark9                       o9#define oDark10                     o10#define oDark11                     o11#define oDark12                     o12#define oDark13                     o13#define oDark14                     o14#define oDark15                     o15#define oDark16                     o16[ o17 is not used#define oNuggets1                   o18#define oNuggets2                   o19#define oNuggets3                   o20#define oNuggets4                   o21#define vFlicker                   v220#define vEgoDX                     v221#define vEgoDY                     v222#define vDigTimer                  v223#define vEgoLoop                   v224#define vEgoCel                    v225#define fDrawDark                  f220#define fLight1                    f221#define fLight2                    f222#define fLight3                    f223#define fLight4                    f224#define fLight5                    f225#define fLight6                    f226#define fLight7                    f227#define fLight8                    f228#define fLight9                    f229#define fLight10                   f230#define fLight11                   f231#define fLight12                   f232#define fLight13                   f233#define fLight14                   f234#define fLight15                   f235#define fLight16                   f236[ f237 is not used#define fClimbing                  f238#define fFalling                   f239[ **************************************[ FIRST CYCLE ONLY[ **************************************if (isset(newRoom))  {  [ load the tunnel logic, that handles all the common  [ tunnel functions  load.logics(lgc.Tunnels);    [ load, draw and discard this room's picture  load.pic(currentRoom);  draw.pic(currentRoom);  discard.pic(currentRoom);    [ load views needed by objects in the room  load.view(vw.WideJerrodCA);  load.view(vw.Darkness);  load.view(vw.TunnelClimbing);  load.view(vw.TunnelDigging);  load.view(vw.TunnelArt);    [ load sound used in the room  load.sound(m.FoundGold);    [ add the darkness panels - these black out areas of the  [ tunnel that are beyond the range of Jerrod's light  [ (don't draw them yet, lgc.DarkenTunnel will do that)  animate.obj(oDark1);  set.view(oDark1, vw.Darkness);  set.loop(oDark1, 0);  set.cel(oDark1, 4);  set.priority(oDark1, 15);  ignore.objs(oDark1);  ignore.blocks(oDark1);  ignore.horizon(oDark1);  position(oDark1, 32, 19);  [ darkness panel 2  animate.obj(oDark2);  set.view(oDark2, vw.Darkness);  set.loop(oDark2, 0);  set.cel(oDark2, 4);  set.priority(oDark2, 15);  ignore.objs(oDark2);  ignore.blocks(oDark2);  position(oDark2, 32, 39);  [ darkness panel 3  animate.obj(oDark3);  set.view(oDark3, vw.Darkness);  set.loop(oDark3, 0);  set.cel(oDark3, 4);  set.priority(oDark3, 15);  ignore.objs(oDark3);  ignore.blocks(oDark3);  position(oDark3, 32, 59);  [ darkness panel 4  animate.obj(oDark4);  set.view(oDark4, vw.Darkness);  set.loop(oDark4, 0);  set.cel(oDark4, 4);  set.priority(oDark4, 15);  ignore.objs(oDark4);  ignore.blocks(oDark4);  position(oDark4, 32, 79);  [ darkness panel 5  animate.obj(oDark5);  set.view(oDark5, vw.Darkness);  set.loop(oDark5, 0);  set.cel(oDark5, 4);  set.priority(oDark5, 15);  ignore.objs(oDark5);  ignore.blocks(oDark5);  position(oDark5, 32, 99);  [ darkness panel 6  animate.obj(oDark6);  set.view(oDark6, vw.Darkness);  set.loop(oDark6, 0);  set.cel(oDark6, 4);  set.priority(oDark6, 15);  ignore.objs(oDark6);  ignore.blocks(oDark6);  position(oDark6, 32, 119);  [ darkness panel 7  animate.obj(oDark7);  set.view(oDark7, vw.Darkness);  set.loop(oDark7, 0);  set.cel(oDark7, 4);  set.priority(oDark7, 15);  ignore.objs(oDark7);  ignore.blocks(oDark7);  position(oDark7, 32, 139);  [ darkness panel 8  animate.obj(oDark8);  set.view(oDark8, vw.Darkness);  set.loop(oDark8, 0);  set.cel(oDark8, 4);  set.priority(oDark8, 15);  ignore.objs(oDark8);  ignore.blocks(oDark8);  position(oDark8, 32, 159);  [ darkness panel 9  animate.obj(oDark9);  set.view(oDark9, vw.Darkness);  set.loop(oDark9, 0);  set.cel(oDark9, 1);  set.priority(oDark9, 15);  ignore.objs(oDark9);  ignore.blocks(oDark9);  position(oDark9, 0, 152);  [ darkness panel 10  animate.obj(oDark10);  set.view(oDark10, vw.Darkness);  set.loop(oDark10, 0);  set.cel(oDark10, 1);  set.priority(oDark10, 15);  ignore.objs(oDark10);  ignore.blocks(oDark10);  position(oDark10, 11, 152);  [ darkness panel 11  animate.obj(oDark11);  set.view(oDark11, vw.Darkness);  set.loop(oDark11, 0);  set.cel(oDark11, 1);  set.priority(oDark11, 15);  ignore.objs(oDark11);  ignore.blocks(oDark11);  position(oDark11, 22, 152);  [ darkness panel 12  animate.obj(oDark12);  set.view(oDark12, vw.Darkness);  set.loop(oDark12, 0);  set.cel(oDark12, 1);  set.priority(oDark12, 15);  ignore.objs(oDark12);  ignore.blocks(oDark12);  position(oDark12, 85, 152);  [ darkness panel 13  animate.obj(oDark13);  set.view(oDark13, vw.Darkness);  set.loop(oDark13, 0);  set.cel(oDark13, 1);  set.priority(oDark13, 15);  ignore.objs(oDark13);  ignore.blocks(oDark13);  position(oDark13, 96, 152);  [ darkness panel 14  animate.obj(oDark14);  set.view(oDark14, vw.Darkness);  set.loop(oDark14, 0);  set.cel(oDark14, 1);  set.priority(oDark14, 15);  ignore.objs(oDark14);  ignore.blocks(oDark14);  position(oDark14, 107, 152);  animate.obj(oDark15);  [ darkness panel 15  set.view(oDark15, vw.Darkness);  set.loop(oDark15, 0);  set.cel(oDark15, 1);  set.priority(oDark15, 15);  ignore.objs(oDark15);  ignore.blocks(oDark15);  position(oDark15, 118, 152);  [ darkness panel 16  animate.obj(oDark16);  set.view(oDark16, vw.Darkness);  set.loop(oDark16, 0);  set.cel(oDark16, 1);  set.priority(oDark16, 15);  ignore.objs(oDark16);  ignore.blocks(oDark16);  position(oDark16, 129, 152);    [ the gold nuggets near center of room  animate.obj(oNuggets1);  set.view(oNuggets1, vw.TunnelArt);  set.loop(oNuggets1, 0);  set.cel(oNuggets1, 1);  [ ignore objects so the nuggets don't impede Jerrod  ignore.objs(oNuggets1);  set.priority(oNuggets1, 4);  position(oNuggets1, 81, 90);  [ if not taken yet  if (!isset(Nugget15aTaken))    {    [ show them    draw(oNuggets1);    stop.update(oNuggets1);    }      [ the gold nuggets near right of screen  animate.obj(oNuggets2);  set.view(oNuggets2, vw.TunnelArt);  set.loop(oNuggets2, 0);  set.cel(oNuggets2, 5);  [ ignore objects so the nuggets don't impede Jerrod  ignore.blocks(oNuggets2);  set.priority(oNuggets2, 4);  position(oNuggets2, 119, 97);  [ if nuggets are visible but not yet taken  if (Nugget15aStatus == NUGGET_FOUND)    {    [ draw them    draw(oNuggets2);    stop.update(oNuggets2);    }      [ the gold nuggets near bottom center  animate.obj(oNuggets3);  set.view(oNuggets3, vw.TunnelArt);  set.loop(oNuggets3, 0);  set.cel(oNuggets3, 2);  [ ignore objects so the nuggets don't impede Jerrod  ignore.objs(oNuggets3);  set.priority(oNuggets3, 4);  position(oNuggets3, 48, 115);  [ if not taken yet  if (!isset(Nugget15bTaken))    {    [ show them    draw(oNuggets3);    stop.update(oNuggets3);    }      [ the gold nuggets near bottom left  animate.obj(oNuggets4);  set.view(oNuggets4, vw.TunnelArt);  set.loop(oNuggets4, 0);  set.cel(oNuggets4, 3);  set.priority(oNuggets4, 4);  position(oNuggets4, 23, 125);  [ if nuggets are visible but not yet taken  if (Nugget15bStatus == NUGGET_FOUND)    {    [ show them    draw(oNuggets4);    stop.update(oNuggets4);    }      [ Jerrod  animate.obj(ego);  [ if coming from above  if (previousRoom == rm.Tunnel_14)    {    [ Jerrod is climbing    set(fClimbing);    set.view(ego, vw.TunnelClimbing);    [ set and fix loop    set.loop(ego, 1);    fix.loop(ego);    }  else    {    [ from other rooms Jerrod is walking    set.view(ego, vw.WideJerrodCA);    }  draw(ego);    [ the room starts out all darkened  call(lgc.DarkenTunnel);    [ now show the picture  show.pic();  }  [ **************************************[ EVERY CYCLE[ **************************************[ to simulate flickering of torch, use a random timer to[ redraw a black box over the area of tunnel that is[ darkened[ if flicker timer has counted downif (vFlicker == 0)  {  [ if Jerrod is stopped  if (egoDir == STOPPED)    {    [ if the redraw darkness flag is NOT set    if (!isset(fDrawDark))      {      [ draw a black box over the entire tunnel (when Jerrod      [ moves, the cleared areas will be uncovered)      clear.text.rect(1, 0, 21, 39, BLACK);      set(fDrawDark);      }    }  else    {    [ Jerrod is moving; clear the redraw darkness flag    reset(fDrawDark);    [ choose a random time between 2 and 4 cycles    random(2, 4, FlickerTime);    [ set flicker delay to the random vlaue    vFlicker = FlickerTime;    [ draw a black box over the entire tunnel    clear.text.rect(1, 0, 21, 39, BLACK);    }  }  [ decrement flicker counter--vFlicker;[ if Jerrod has a lit lantern or lit matchif ((isset(LanternLit) || isset(MatchLit)))  {  [ depending on position, remove the darkness panels so  [ Jerrod can see the area around him  if (posn(ego, 47, 0, 51, 68) && !isset(fLight1))    {    erase(oDark1);    set(fLight1);    }  if (posn(ego, 47, 19, 51, 88) && !isset(fLight2))    {    erase(oDark2);    set(fLight2);    }  if (posn(ego, 37, 39, 51, 108) && !isset(fLight3))    {    erase(oDark3);    set(fLight3);    }  if (posn(ego, 37, 59, 80, 128) && !isset(fLight4))    {    erase(oDark4);    set(fLight4);    }  if (posn(ego, 37, 79, 80, 148) && !isset(fLight5))    {    erase(oDark5);    set(fLight5);    }  if (posn(ego, 15, 99, 80, 167) && !isset(fLight6))    {    erase(oDark6);    set(fLight6);    }  if (posn(ego, 15, 119, 80, 167) && !isset(fLight7))    {    erase(oDark7);    set(fLight7);    }  if (posn(ego, 15, 139, 80, 167) && !isset(fLight8))    {    erase(oDark8);    set(fLight8);    }  if (posn(ego, 0, 142, 5, 155) && !isset(fLight9))    {    erase(oDark9);    set(fLight9);    }  if (posn(ego, 0, 142, 16, 155) && !isset(fLight10))    {    erase(oDark10);    set(fLight10);    }  if (posn(ego, 0, 142, 27, 155) && !isset(fLight11))    {    erase(oDark11);    set(fLight11);    }  if (posn(ego, 61, 115, 90, 126) && !isset(fLight12))    {    erase(oDark12);    set(fLight12);    }  if (posn(ego, 72, 98, 101, 126) && !isset(fLight13))    {    erase(oDark13);    set(fLight13);    }  if (posn(ego, 83, 98, 112, 126) && !isset(fLight14))    {    erase(oDark14);    set(fLight14);    }  if (posn(ego, 94, 98, 123, 126) && !isset(fLight15))    {    erase(oDark15);    set(fLight15);    }  if (posn(ego, 105, 98, 134, 126) && !isset(fLight16))    {    erase(oDark16);    set(fLight16);    }  }[ if message about Jake not shownif (!isset(NearJakeMsg))  {  [ Jerrod hears Jake in the distance  print.at("Through the still darkness ya hear the faint sound of someone "           "picking...", 15, 5, 0);  set(NearJakeMsg);  }  [ if on ladder but not climbing yetif (posn(ego, 58, 110, 62, 114) && !isset(fClimbing))  {  [ Jerrod is climbing the ladder  [ reposition ego object so Jerrod appears on the ladder  [ correctly  if (EgoX == 58)    {    vEgoDX = -7; [ 249;    }  if (EgoX == 59)    {    vEgoDX = -8; [ 248;    }  if (EgoX == 60)    {    vEgoDX = -9; [ 247;    }  if (EgoX == 61)    {    vEgoDX = -10; [ 246;    }  if (EgoX == 62)    {    vEgoDX = -11; [ 245;    }  vEgoDY = -8; [ 248;  reposition(ego, vEgoDX, vEgoDY);  set.view(ego, vw.TunnelClimbing);  [ set and fix loop  set.loop(ego, 1);  fix.loop(ego);  set(fClimbing);  }  [ if off the ladder but climbingif (posn(ego, 50, 107, 51, 108) && isset(fClimbing))  {  [ Jerrod isn't climbing  reset(fClimbing);  [ reposition ego object so Jerrod appears on the ground  [ correctly  vEgoDX = 9;  vEgoDY = 8;  reposition(ego, vEgoDX, vEgoDY);  set.view(ego, vw.WideJerrodCA);  release.loop(ego);  [ step size when walking is 1  vEgoDX = 1;  step.size(ego, vEgoDX);  }  [ if Jerrod is climbing (in this room only climbing flag is[ checked, no check for not falling)if (isset(fClimbing))  {  [ set step size based on direction      [ if moving up or down ladder  if ((egoDir == UP || egoDir == DOWN))    {    [ up or down on ladder    [ step size is 2 on ladder    vEgoDY = 2;    step.size(ego, vEgoDY);    }  else    {    [ any other direction, step size is 1    vEgoDX = 1;    step.size(ego, vEgoDX);    }  }  [ if Jerrod walks to left over the small ledge, make an[ adjustment (it's slightly different depending on where[ Jerrod crosses the ledge)if (posn(ego, 56, 117, 56, 120))  {  [ bump him down to lower level  vEgoDX = -4; [ 252;  vEgoDY = 22;  reposition(ego, vEgoDX, vEgoDY);  }if (posn(ego, 56, 121, 59, 123))  {  [ bump him down to lower level  vEgoDX = -4; [ 252;  vEgoDY = 20;  reposition(ego, vEgoDX, vEgoDY);  }if (posn(ego, 59, 124, 61, 126))  {  vEgoDX = -4; [ 252;  vEgoDY = 18;  reposition(ego, vEgoDX, vEgoDY);  }  [ when Jerrod is 'on' the small ladder need to use a block[ to keep him from going past the edges of the ladderif (posn(ego, 47, 114, 57, 139))  {  block(49, 115, 56, 137);  }else  {  [ when not on small ladder, remove the block  unblock();  }  [ if timer is activated (>0)if (vDigTimer > 0)  {  [ increment timer each cycle  ++vDigTimer;  }  [ after 3 cyclesif (vDigTimer == 3)  {  [ get loop (needed to correctly place the gold nugget)  current.loop(ego, vEgoLoop);  }  [ when 25 or more cycles passif (vDigTimer > 25)  {  [ get Jerrod's current cel  current.cel(ego, vEgoCel);  [ gold is uncovered at cel 2 only  if (vEgoCel == 2)    {    [ which way Jerrod is facing determines how to make    [ nuggets appear    if (vEgoLoop == 0)      {      [ if near nugget pile 2      if (posn(ego, 94, 110, 101, 113))        {        [ if nuggets not found yet        if (Nugget15aStatus == NUGGET_HIDDEN)          {          [ uncover the nuggets          Nugget15aStatus = NUGGET_FOUND;          draw(oNuggets2);          sound(m.FoundGold, DoneNoAction);          stop.update(oNuggets2);          [ score a point          ++currentScore;          }        }      [ if near nugget pile 4      if (posn(ego, 0, 140, 5, 144))        {        [ if nuggets not found yet        if (Nugget15bStatus == NUGGET_HIDDEN)          {          [ uncover the nuggets          Nugget15bStatus = NUGGET_FOUND;          draw(oNuggets4);          sound(m.FoundGold, DoneNoAction);          stop.update(oNuggets4);          [ score a point          ++currentScore;          }        }      }    [ if facing left    if (vEgoLoop == 1)      {      [ if near nugget pile 2      if (posn(ego, 112, 102, 118, 106))        {        [ if nuggets not found yet        if (Nugget15aStatus == NUGGET_HIDDEN)          {          [ uncover the nuggets          Nugget15aStatus = NUGGET_FOUND;          draw(oNuggets2);          sound(m.FoundGold, DoneNoAction);          stop.update(oNuggets2);          [ score a point          ++currentScore;          }        }      [ if near nugget pile 4      if (posn(ego, 16, 140, 21, 143))        {        [ if nuggets not found yet        if (Nugget15bStatus == NUGGET_HIDDEN)          {          [ uncover the nuggets          Nugget15bStatus = NUGGET_FOUND;          draw(oNuggets4);          sound(m.FoundGold, DoneNoAction);          stop.update(oNuggets4);          [ score a point          ++currentScore;          }        }      }    }  }  [ when 30 cycles passif (vDigTimer == 30)  {  [ Jerrod is done digging    [ Jerrod no longer cycles when not moving  reset(CycleAtRest);  start.motion(ego);  [ restore normal tunnel view  set.view(ego, vw.WideJerrodCA);  }  [ after 31 cyclesif (vDigTimer == 31)  {  [ reset the timer  vDigTimer = 0;  [ if nugget 2 is now found  if (Nugget15aStatus == NUGGET_FOUND)    {    if (vEgoLoop == 0)      {      if (posn(ego, 94, 110, 101, 113))        {        print.at("Looks like you've rattled some GOLD loose!", 2, 26, 10);        goto(CheckExits);        }      }    if (vEgoLoop == 1)      {      if (posn(ego, 112, 102, 118, 106))        {        print.at("Looks like you've rattled some GOLD loose!", 2, 26, 10);        goto(CheckExits);        }      }    }  [ if nugget 4 is now found  if (Nugget15bStatus == NUGGET_FOUND)    {    if (vEgoLoop == 0)      {      if (posn(ego, 0, 140, 5, 144))        {        print.at("Looks like you've rattled some GOLD loose!", 2, 26, 10);        goto(CheckExits);        }      }    if (vEgoLoop == 1)      {      if (posn(ego, 16, 140, 21, 143))        {        print.at("Looks like you've rattled some GOLD loose!", 2, 26, 10);        goto(CheckExits);        }      }    }      [ if no gold found,   print.at("Nothin'!", 2, 26, 10);  }  CheckExits:[ **************************************[ CHECK FOR AN EXIT CONDITION[ **************************************[ top edgeif (posn(ego, 30, 59, 100, 60))  {  [ redraw dark panels  draw(oDark5);  draw(oDark6);  draw(oDark11);  draw(oDark15);  [ update all objects (not sure why they do this since the  [ new.room command comes next - I guess it's so there'a a  [ split second before the room change with the room  [ updated)  force.update(ego);    [ position Jerrod to appear correctly on next screen  position(ego, 51, 164);  new.room(rm.Tunnel_14); [ ##LE001##  }[ left edge  if (posn(ego, 1, 30, 1, 167))  {  [ redraw dark panels  draw(oDark5);  draw(oDark6);  draw(oDark11);  draw(oDark15);  [ update all objects (not sure why they do this since the  [ new.room command comes next - I guess it's so there'a a  [ split second before the room change with the room  [ updated)  force.update(ego);    [ Jerrod made it to the end! if this is first time  if (!isset(TunnelEnd))    {    [ set flag     set(TunnelEnd);        [ if Jerrod hasn't used the lantern    if (!isset(UsedLantern))      {      [ if a match was used (due to a bug, this flag isn't      [ actually set when a match is lit, so this test will      [ always return FALSE)      if (isset(UsedMatch))        {        print.at("Not bad! Ya haven't used the lantern, but ya lit a match!", 2, 2, 15);        }      else        {        print.at("You've just accomplished an incredible feat! "                 "Congratulations!!", 2, 2, 15);        get("Goldmine expert BONUS");        }      }    else      {      print.at("Try it without lightin' the lantern sometime!", 2, 2, 15);      }    }    [ position Jerrod to appear correctly on next screen  position(ego, 129, 140);  new.room(rm.Tunnel_16); [ ##LE002##  }  [ **************************************[ PROCESS PLAYER INPUT[ **************************************[ if player hasn't provided input no need to do said testsif (!isset(haveInput))  {  goto(Done);  }  [ look goldif ((said("examine", "gold") ||     said("examine", "gold", "nugget") ||     said("examine", "nugget")))  {  [ if Jerrod has a lit lantern or lit match  if ((isset(LanternLit) || isset(MatchLit)))    {    [ if by one of the nugget piles    if ((posn(ego, 53, 102, 83, 146) ||         posn(ego, 91, 102, 122, 130) ||         posn(ego, 24, 110, 51, 154) ||         posn(ego, 0, 140, 23, 154)))      {      [ if by nugget pile 1      if (posn(ego, 53, 102, 83, 146))        {        if (isset(Nugget15aTaken))          {          print.at("There's no gold in sight right here.", 2, 26, 10);          }        else          {          print.at("Just look at that gold glitter!", 2, 26, 10);          }        }      [ if by nugget pile 2      if (posn(ego, 91, 102, 122, 130))        {        if (Nugget15aStatus == NUGGET_FOUND)          {          print.at("Just look at that gold glitter!", 2, 26, 10);          }        else          {          print.at("There's no gold in sight right here.", 2, 26, 10);          }        }      [ if by nugget pile 3      if (posn(ego, 24, 110, 51, 154))        {        if (isset(Nugget15bTaken))          {          print.at("There's no gold in sight right here.", 2, 26, 10);          }        else          {          print.at("Just look at that gold glitter!", 2, 26, 10);          }        }      [ if by nugget pile 4      if (posn(ego, 0, 140, 23, 154))        {        if (Nugget15bStatus == NUGGET_FOUND)          {          print.at("Just look at that gold glitter!", 2, 26, 10);          }        else          {          print.at("There's no gold in sight right here.", 2, 26, 10);          }        }      }    else      {      [ the same message gets shown whether 'if' test passes      [ or fails; this is a bug      if (isset(Nugget15aTaken) &&           Nugget15aStatus != NUGGET_FOUND &&           isset(Nugget15bTaken) &&           Nugget15bStatus != NUGGET_FOUND)        {        print.at("There's no gold in sight right here.", 2, 26, 10);        }      else        {        print.at("There's no gold in sight right here.", 2, 26, 10);        }      }    }  else    {    print.at("It's too dern dark in here to see!", 2, 26, 10);    }  }  [ get goldif ((said("acquire", "gold") ||     said("acquire", "gold", "nugget") ||     said("acquire", "nugget")))  {  [ if by one of the nugget piles  if ((posn(ego, 59, 110, 77, 130) ||       posn(ego, 97, 102, 116, 120) ||       posn(ego, 26, 110, 46, 154) ||       posn(ego, 0, 140, 20, 154)))    {    [ if by nugget pile 1    if (posn(ego, 59, 110, 77, 130))      {      [ if already taken      if (isset(Nugget15aTaken))        {        print.at("There's no gold in sight right here.", 2, 26, 10);        }      else        {        [ get the gold!        print.at("Ya reach out and grab the gold nuggets!", 2, 26, 10);        [ remove nuggets from screen        erase(oNuggets1);        [ if gold amount is less than 110        if (GoldIndex < 110)          {          [ get two units of gold          GoldIndex  += 2;          }        else          {          [ otherwise get one unit of gold          GoldIndex  += 1;          }        [ set 'nugget taken' flag        set(Nugget15aTaken);        [ update inventory with correct amount of gold        call(lgc.AdjustGold);        }      }    [ if by nugget pile 2    if (posn(ego, 97, 102, 116, 120))      {      [ if nuggets are uncovered and still there      if (Nugget15aStatus == NUGGET_FOUND)        {        [ get the gold!        print.at("Ya reach out and grab the gold nuggets!", 2, 26, 10);        [ remove nuggets froms screen        erase(oNuggets2);        [ if gold amount is less than 110        if (GoldIndex < 110)          {          [ get two units of gold           GoldIndex  += 2;          }        else          {          [ otherwise get one unit of gold          GoldIndex  += 1;          }        Nugget15aStatus = NUGGET_GONE;        [ update inventory with correct amount of gold        call(lgc.AdjustGold);        }      else        {        print.at("There's no gold in sight right here.", 2, 26, 10);        }      }    [ if by nugget pile 3    if (posn(ego, 26, 110, 46, 154))      {      [ if already taken      if (isset(Nugget15bTaken))        {        print.at("Ya can't reach any gold right here.", 2, 26, 10);        }      else        {        [ get the gold!        print.at("Ya reach out and grab the gold nuggets!", 2, 26, 10);        [ remove nuggets from screen        erase(oNuggets3);        [ if gold amount is less than 110        if (GoldIndex < 110)          {          [ get two units of gold          GoldIndex  += 2;          }        else          {          [ otherwise get one unit of gold          GoldIndex  += 1;          }        [ set 'nugget taken' flag        set(Nugget15bTaken);        [ update inventory with correct amount of gold        call(lgc.AdjustGold);        }      }    [ if by nugget pile 4    if (posn(ego, 0, 140, 20, 154))      {      [ if nuggets are uncovered and still there      if (Nugget15bStatus == NUGGET_FOUND)        {        [ get the gold!        print.at("Ya reach out and grab the gold nuggets!", 2, 26, 10);        [ remove nuggets froms screen        erase(oNuggets4);        [ if gold amount is less than 110        if (GoldIndex < 110)          {          [ get two units of gold           GoldIndex  += 2;          }        else          {          [ otherwise get one unit of gold          GoldIndex  += 1;          }        Nugget15bStatus = NUGGET_GONE;        [ update inventory with correct amount of gold        call(lgc.AdjustGold);        }      else        {        print.at("Ya can't reach any gold right here.", 2, 26, 10);        }      }    }  else    {    [ here, there are two different messages for the 'if'     [ statement        [ if all nugget piles have been taken    if (isset(Nugget15aTaken) &&         Nugget15aStatus != NUGGET_FOUND &&         isset(Nugget15bTaken) &&         Nugget15bStatus != NUGGET_FOUND)      {      print.at("There's no gold in sight right here.", 2, 26, 10);      }    else      {      print.at("Ya can't reach any gold right here.", 2, 26, 10);      }    }  }  [ use pickif ((said("pick") ||     said("pick", "gold") ||     said("use", "pick") ||     said("swing", "pick")))  {  [ if Jerrod has the pick  if (has("Pick"))    {    [ if Jerrod is climbing    if (isset(fClimbing))      {      [ can't dig while climbing      print.at("Ya can't do that while yer climbin'!", 2, 26, 10);      }    else      {      [ if touching an alarm line       if (isset(egoHitSpecial))        {        [ this is an area where Jerrod can dig for gold        set.view(ego, vw.TunnelDigging);        [ start timer        vDigTimer = 1;        [ begin at first cel        set.cel(ego, 0);        stop.motion(ego);        [ allow ego object to cycle when not moving        set(CycleAtRest);        [ start digging        start.cycling(ego);        }      else        {        print.at("You're close to a likely spot. Try that nearby.", 2, 26, 10);        }      }    }  else    {    print.at("Ya don't have a pick.", 2, 26, 10);    }  }  [ look ladderif (said("examine", "ladder"))  {  [ if Jerrod has a lit lantern or lit match  if ((isset(LanternLit) || isset(MatchLit)))    {    [ if close to the ladder    if (posn(ego, 28, 0, 78, 167))      {      print.at("It's just a wooden ladder.", 2, 26, 10);      }    else      {      print.at("There's no ladder in sight right here.", 2, 26, 10);      }    }  else    {    print.at("It's too dern dark in here to see!", 2, 26, 10);    }  }  [ look waterif ((said("examine", "water") || said("examine", "creek")))  {  [ if Jerrod has a lit lantern or lit match  if ((isset(LanternLit) || isset(MatchLit)))    {    if (posn(ego, 20, 137, 59, 154))      {      print.at("A small underground stream runs across the mine floor.", 2, 26, 10);      }    else      {      print.at("Ya see no water right here.", 2, 26, 10);      }    }  else    {    print.at("It's too dern dark in here to see!", 2, 26, 10);    }  }  [ get water/drink waterif ((said("acquire", "water") ||     said("anyword", "drink", "rol") ||     said("drink", "rol")))  {  [ if Jerrod has a lit lantern or lit match  if ((isset(LanternLit) || isset(MatchLit)))    {    [ if near the stream    if (posn(ego, 20, 137, 59, 154))      {      print.at("Ya don't need any water.", 2, 26, 10);      }    else      {      print.at("Ya see no water right here.", 2, 26, 10);      }    }  else    {    print.at("It's too dern dark in here to see!", 2, 26, 10);    }  }  Done:[ call tunnel logic to run code common to all tunnelscall(lgc.Tunnels);return();[ **************************************[ MESSAGES[ **************************************#message 13 "Ya can't do that while yer climbin'!"#message 14 "You're close to a likely spot. Try that nearby."#message 15 "Ya don't have a pick."#message 17 "It's too dern dark in here to see!"#message 20 "Nothin'!"#message 24 "Through the still darkness ya hear the faint sound of someone picking..."#message 25 "Just look at that gold glitter!"#message 26 "Looks like you've rattled some GOLD loose!"#message 28 "Ya can't reach any gold right here."#message 29 "A small underground stream runs across the mine floor."#message 30 "Ya see no water right here."#message 31 "Ya reach out and grab the gold nuggets!"#message 32 "Ya don't need any water."#message 47 "There's no gold in sight right here."#message 80 "There's no ladder in sight right here."#message 81 "It's just a wooden ladder."#message 91 "Try it without lightin' the lantern sometime!"#message 92 "You've just accomplished an incredible feat! Congratulations!!"#message 93 "Not bad! Ya haven't used the lantern, but ya lit a match!"