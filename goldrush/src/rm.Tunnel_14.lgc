[***********************************************************[[ rm.Tunnel_14[[ Another tunnel location, on the way to the final gold mine[ location. There are two piles of gold nuggets that Jerrod[ can find in this room, one that is in plain sight and [ another that he has to find by digging in the right place.[ [***********************************************************[ **************************************[ LOCAL DEFINES[ **************************************#define oDark1                       o1#define oDark2                       o2#define oDark3                       o3#define oDark4                       o4#define oDark5                       o5#define oDark6                       o6#define oDark7                       o7#define oDark8                       o8#define oDark9                       o9#define oNuggets1                   o10#define oNuggets2                   o11#define vFlicker                   v220#define vEgoDX                     v221#define vEgoDY                     v222#define vDigTimer                  v223#define vEgoLoop                   v224#define vEgoCel                    v225#define fDrawDark                  f220#define fLight1                    f221#define fLight2                    f222#define fLight3                    f223#define fLight4                    f224#define fLight5                    f225#define fLight6                    f226#define fLight7                    f227#define fLight8                    f228#define fLight9                    f229[ f230 through f237 are not used#define fClimbing                  f238#define fFalling                   f239[ **************************************[ FIRST CYCLE ONLY[ **************************************if (isset(newRoom))  {  [ load, draw and discard this room's picture  load.pic(currentRoom);  draw.pic(currentRoom);  discard.pic(currentRoom);    [ load the tunnel logic, that handles all the common  [ tunnel functions  load.logics(lgc.Tunnels);    [ load views needed by objects in the room  load.view(vw.WideJerrodCA);  load.view(vw.Darkness);  load.view(vw.TunnelClimbing);  load.view(vw.TunnelFalling);  load.view(vw.TunnelDigging);  load.view(vw.TunnelArt);  [ load sound used in the room  load.sound(m.FoundGold);    [ add the darkness panels - these black out areas of the  [ tunnel that are beyond the range of Jerrod's light  [ (don't draw them yet, lgc.DarkenTunnel will do that)  animate.obj(oDark1);  set.view(oDark1, vw.Darkness);  set.loop(oDark1, 0);  set.cel(oDark1, 4);  set.priority(oDark1, 15);  ignore.objs(oDark1);  ignore.blocks(oDark1);  ignore.horizon(oDark1);  position(oDark1, 33, 19);  [ darkness panel 2  animate.obj(oDark2);  set.view(oDark2, vw.Darkness);  set.loop(oDark2, 0);  set.cel(oDark2, 4);  set.priority(oDark2, 15);  ignore.objs(oDark2);  ignore.blocks(oDark2);  position(oDark2, 33, 39);  [ darkness panel 3  animate.obj(oDark3);  set.view(oDark3, vw.Darkness);  set.loop(oDark3, 0);  set.cel(oDark3, 4);  set.priority(oDark3, 15);  ignore.objs(oDark3);  ignore.blocks(oDark3);  position(oDark3, 33, 59);  [ darkness panel 4  animate.obj(oDark4);  set.view(oDark4, vw.Darkness);  set.loop(oDark4, 0);  set.cel(oDark4, 4);  set.priority(oDark4, 15);  ignore.objs(oDark4);  ignore.blocks(oDark4);  position(oDark4, 33, 79);  [ darkness panel 5  animate.obj(oDark5);  set.view(oDark5, vw.Darkness);  set.loop(oDark5, 0);  set.cel(oDark5, 4);  set.priority(oDark5, 15);  ignore.objs(oDark5);  ignore.blocks(oDark5);  position(oDark5, 34, 99);  [ darkness panel 6  animate.obj(oDark6);  set.view(oDark6, vw.Darkness);  set.loop(oDark6, 0);  set.cel(oDark6, 4);  set.priority(oDark6, 15);  ignore.objs(oDark6);  ignore.blocks(oDark6);  position(oDark6, 34, 119);  [ darkness panel 7  animate.obj(oDark7);  set.view(oDark7, vw.Darkness);  set.loop(oDark7, 0);  set.cel(oDark7, 4);  set.priority(oDark7, 15);  ignore.objs(oDark7);  ignore.blocks(oDark7);  position(oDark7, 34, 139);  [ darkness panel 8  animate.obj(oDark8);  set.view(oDark8, vw.Darkness);  set.loop(oDark8, 0);  set.cel(oDark8, 4);  set.priority(oDark8, 15);  ignore.objs(oDark8);  ignore.blocks(oDark8);  position(oDark8, 34, 159);  [ darkness panel 9  animate.obj(oDark9);  set.view(oDark9, vw.Darkness);  set.loop(oDark9, 0);  set.cel(oDark9, 4);  set.priority(oDark9, 15);  ignore.objs(oDark9);  ignore.blocks(oDark9);  position(oDark9, 34, 167);    [ first pile of nuggets is near bottom of tunnel (these  [ are visible without digging)  animate.obj(oNuggets2);  set.view(oNuggets2, vw.TunnelArt);  set.loop(oNuggets2, 0);  set.cel(oNuggets2, 1);  set.priority(oNuggets2, 14);  [ ignore objects so nuggets don't impede Jerrod's movement  ignore.objs(oNuggets2);  position(oNuggets2, 36, 106);  [ if the nuggets haven't been taken yet  if (!isset(Nugget14Taken))    {    [ show them    draw(oNuggets2);    stop.update(oNuggets2);    }      [ second pile of nuggets (these are hidden and need to be   [ found by digging)  animate.obj(oNuggets1);  set.view(oNuggets1, vw.TunnelArt);  set.loop(oNuggets1, 0);  set.cel(oNuggets1, 2);  set.priority(oNuggets1, 4);  position(oNuggets1, 73, 88);  [ if already found but still in the tunnel wall  if (Nugget14Status == NUGGET_FOUND)    {    [ show them    draw(oNuggets1);    stop.update(oNuggets1);    }  animate.obj(ego);  [ Jerrod is always on the ladder when entering this room  set(fClimbing);  [ set and fix correct loop based on previous room  if (previousRoom == rm.Tunnel_12)    {    set.view(ego, vw.TunnelClimbing);    set.loop(ego, 2);    fix.loop(ego);    }  else    {    set.view(ego, vw.TunnelClimbing);    set.loop(ego, 1);    fix.loop(ego);    }  draw(ego);    [ the room starts out all darkened  call(lgc.DarkenTunnel);    [ now show the picture  show.pic();  }  [ **************************************[ EVERY CYCLE[ **************************************[ to simulate flickering of torch, use a random timer to[ redraw a black box over the area of tunnel that is[ darkened[ if flicker timer has counted downif (vFlicker == 0)  {  [ if Jerrod is stopped  if (egoDir == STOPPED)    {    [ if the redraw darkness flag is NOT set    if (!isset(fDrawDark))      {      [ draw a black box over the entire tunnel (when Jerrod      [ moves, the cleared areas will be uncovered)      clear.text.rect(1, 0, 21, 39, BLACK);      set(fDrawDark);      }    }  else    {    [ Jerrod is moving; clear the redraw darkness flag    reset(fDrawDark);    [ choose a random time between 2 and 4 cycles    random(2, 4, FlickerTime);    [ set flicker delay to the random vlaue    vFlicker = FlickerTime;    [ draw a black box over the entire tunnel    clear.text.rect(1, 0, 21, 39, BLACK);    }  }  [ decrement flicker counter--vFlicker;[ if Jerrod has a lit lantern or lit matchif ((isset(LanternLit) || isset(MatchLit)))  {  [ depending on position, remove the darkness panels so  [ Jerrod can see the area around him  if (posn(ego, 20, 0, 72, 68) && !isset(fLight1))    {    erase(oDark1);    set(fLight1);    }  if (posn(ego, 20, 19, 72, 88) && !isset(fLight2))    {    erase(oDark2);    set(fLight2);    }  if (posn(ego, 20, 39, 72, 108) && !isset(fLight3))    {    erase(oDark3);    set(fLight3);    }  if (posn(ego, 20, 59, 72, 128) && !isset(fLight4))    {    erase(oDark4);    set(fLight4);    }  if (posn(ego, 20, 79, 72, 148) && !isset(fLight5))    {    erase(oDark5);    set(fLight5);    }  if (posn(ego, 20, 99, 72, 167) && !isset(fLight6))    {    erase(oDark6);    set(fLight6);    }  if (posn(ego, 20, 119, 72, 167) && !isset(fLight7))    {    erase(oDark7);    set(fLight7);    }  if (posn(ego, 20, 139, 72, 167) && !isset(fLight8))    {    erase(oDark8);    set(fLight8);    }  if (posn(ego, 20, 159, 72, 167) && !isset(fLight9))    {    erase(oDark9);    set(fLight9);    }  }  [ if near the ladder on left side, but not climbing yetif (posn(ego, 28, 106, 34, 106) && !isset(fClimbing))  {  [ Jerrod is climbing the ladder  [ reposition ego object so Jerrod appears on the ladder  [ correctly  if (EgoX == 28)    {    vEgoDX = 3;    }  if (EgoX == 29)    {    vEgoDX = 2;    }  if (EgoX == 30)    {    vEgoDX = 1;    }  if (EgoX == 31)    {    vEgoDX = 0;    }  if (EgoX == 32)    {    vEgoDX = -1; [ 255;    }  if (EgoX == 33)    {    vEgoDX = -2; [ 254;    }  if (EgoX == 34)    {    vEgoDX = -3; [ 253;    }  vEgoDY = -3; [ 253;  reposition(ego, vEgoDX, vEgoDY);  set.view(ego, vw.TunnelClimbing);  [ set and fix loop  set.loop(ego, 2);  fix.loop(ego);  set(fClimbing);  }[ if near ladder on right but not climbing yetif (posn(ego, 62, 112, 67, 115) && !isset(fClimbing))  {  [ Jerrod is climbing the ladder  [ reposition ego object so Jerrod appears on the ladder  [ correctly  if (EgoX == 62)    {    vEgoDX = -10; [ 246;    }  if (EgoX == 63)    {    vEgoDX = -11; [ 245;    }  if (EgoX == 64)    {    vEgoDX = -12; [ 244;    }  if (EgoX == 65)    {    vEgoDX = -13; [ 243;    }  if (EgoX == 66)    {    vEgoDX = -14; [ 242;    }  if (EgoX == 67)    {    vEgoDX = -15; [ 241;    }  vEgoDY = 28;  reposition(ego, vEgoDX, vEgoDY);  set.view(ego, vw.TunnelClimbing);  [ set and fix loop  set.loop(ego, 1);  fix.loop(ego);  set(fClimbing);  }  [ if off the ladder on left, but climbingif (posn(ego, 28, 104, 34, 105) && isset(fClimbing))  {  [ Jerrod stops climbing  reset(fClimbing);  [ reposition ego object so Jerrod appears on the ground  [ correctly  vEgoDX = 0;  vEgoDY = 3;  reposition(ego, vEgoDX, vEgoDY);  set.view(ego, vw.WideJerrodCA);  release.loop(ego);  vEgoDX = 1;  step.size(ego, vEgoDX);  }[ if off the ladder on right, but climbingif (posn(ego, 49, 137, 52, 138) && isset(fClimbing))  {  [ Jerrod stops climbing  reset(fClimbing);  [ reposition ego object so Jerrod appears on the ground  [ correctly  vEgoDX = 12;  vEgoDY = -28; [ 228;  reposition(ego, vEgoDX, vEgoDY);  set.view(ego, vw.WideJerrodCA);  release.loop(ego);  [ step size when walking is 1  vEgoDX = 1;  step.size(ego, vEgoDX);  }  [ if Jerrod is not falling (not sure why this check -[ falling and climbing are mutually excluive; no need to[ check for 'not falling' here- a check for climbing by [ itself would be sufficient)if (!isset(fFalling))  {  if (isset(fClimbing))    {    [ set step size based on direction        [ if moving up or down ladder    if ((egoDir == UP || egoDir == DOWN))      {      [ up or down on ladder step size is 2 on ladder      vEgoDY = 2;      step.size(ego, vEgoDY);      }    else      {      [ any other direction, step size is 1      vEgoDX = 1;      step.size(ego, vEgoDX);      }    }  }  [ if Jerrod is climbingif (isset(fClimbing))  {  [ if Jerrod strays far enough from the ladder (hits alarm  [ line)  if (isset(egoHitSpecial))    {    [ Jerrod starts falling    ignore.blocks(ego);    set(fFalling);    reset(fClimbing);    set.view(ego, vw.TunnelFalling);    [ move him to bottom of screen (200 is an invalid Y    [ value, but it still works due to how the room checks    [ for reaching bottom)    vEgoDY = 200;    vEgoDX = 10;    [ use DX variable for step size    move.obj.v(ego, EgoX, vEgoDY, vEgoDX, DoneNoAction);    }  }  [ if Jerrod walks off edge of cliff (in middle of room)if (posn(ego, 38, 110, 61, 118) && !isset(fFalling))  {  [ Jerrod starts falling  ignore.blocks(ego);  set(fFalling);  reset(fClimbing);  set.view(ego, vw.TunnelFalling);  [ move him to bottom of screen (200 is an invalid Y  [ value, but it still works due to how the room checks  [ for reaching bottom)  vEgoDY = 200;  [ use DX variable for step size  vEgoDX = 10;  move.obj.v(ego, EgoX, vEgoDY, vEgoDX, DoneNoAction);  }  [ if Jerrod hits bottom edge while fallingif (edgeEgoHit == BOTTOM_EDGE &&     isset(fFalling))  {  [ done falling  reset(fFalling);  [ set global flag to start final death sequence  set(FellOffLadder);  }  [ if timer is activated (>0)if (vDigTimer > 0)  {  [ increment timer each cycle  ++vDigTimer;  }  [ after 3 cyclesif (vDigTimer == 3)  {  [ get loop (needed to   [ correctly place the gold nugget)  current.loop(ego, vEgoLoop);  }  [ when 25 or more cycles pass with gold still uncoveredif (vDigTimer > 25 && Nugget14Status == NUGGET_HIDDEN)  {  [ get Jerrod's current cel  current.cel(ego, vEgoCel);  [ gold is uncovered at cel 2 only  if (vEgoCel == 2)    {    [ which way Jerrod is facing determines how to make    [ nuggets appear    if (vEgoLoop == 0)      {      [ if Jerrod is by the nugget's position      if (posn(ego, 49, 107, 54, 109))        {        [ uncover the nuggets        Nugget14Status = NUGGET_FOUND;        draw(oNuggets1);        sound(m.FoundGold, DoneNoAction);        stop.update(oNuggets1);        [ score a point        ++currentScore;        }      }    if (vEgoLoop == 1)      {      if (posn(ego, 66, 107, 70, 109))        {        [ uncover the nuggets        Nugget14Status = NUGGET_FOUND;        draw(oNuggets1);        sound(m.FoundGold, DoneNoAction);        stop.update(oNuggets1);        [ score a point        ++currentScore;        }      }    }  }  [ when 30 cycles passif (vDigTimer == 30)  {  [ Jerrod is done digging    [ Jerrod no longer cycles when not moving  reset(CycleAtRest);  start.motion(ego);  [ restore normal tunnel view  set.view(ego, vw.WideJerrodCA);  }  [ after 31 cyclesif (vDigTimer == 31)  {  [ reset the timer  vDigTimer = 0;  [ if nugget is now found  if (Nugget14Status == NUGGET_FOUND)    {    if (vEgoLoop == 0)      {      if (posn(ego, 49, 107, 54, 109))        {        print.at("You've struck gold!", 2, 26, 10);        goto(CheckExits);        }      }    if (vEgoLoop == 1)      {      if (posn(ego, 66, 107, 70, 109))        {        print.at("You've struck gold!", 2, 26, 10);        goto(CheckExits);        }      }    }      [ if no gold found,   print.at("Nothin'!", 2, 26, 10);  }  CheckExits:[ **************************************[ CHECK FOR AN EXIT CONDITION[ **************************************[ top edgeif (posn(ego, 20, 59, 100, 60))  {  [ redraw dark panels  draw(oDark4);  draw(oDark5);  draw(oDark6);  [ update all objects (not sure why they do this since the  [ new.room command comes next - I guess it's so there'a a  [ split second before the room change with the room  [ updated)  force.update(ego);  [ position Jerrod to appear correctly on next screen  position(ego, 30, 164);  new.room(rm.Tunnel_12); [ ##LE001##  }[ bottom edgeif (posn(ego, 20, 165, 120, 166))  {  [ redraw dark panels  draw(oDark4);  draw(oDark5);  draw(oDark6);  [ update all objects (not sure why they do this since the  [ new.room command comes next - I guess it's so there'a a  [ split second before the room change with the room  [ updated)  force.update(ego);  [ position Jerrod to appear correctly on next screen  position(ego, 51, 61);  new.room(rm.Tunnel_15); [ ##LE002##  }  [ **************************************[ PROCESS PLAYER INPUT[ **************************************[ if player hasn't provided input no need to do said testsif (!isset(haveInput))  {  goto(Done);  }  [ look gold/look nuggetif ((said("examine", "gold") ||     said("examine", "gold", "nugget") ||     said("examine", "nugget")))  {  [ if Jerrod has a lit lantern or lit match  if ((isset(LanternLit) || isset(MatchLit)))    {    [ if near either pile of nuggets    if ((posn(ego, 46, 107, 72, 144) ||         posn(ego, 24, 101, 38, 138)))      {      [ the posn tests here use different values than the      [ line above; this leave a couple of dead spaces where      [ these messages don't get printed; the programmers      [ should have made sure the posn tests matched            [ if near left nugget pile      if (posn(ego, 24, 97, 37, 118))        {        [ if already taken        if (isset(Nugget14Taken))          {          print.at("There's no gold in sight right here.", 2, 26, 10);          }        else          {          print.at("Look at that gold glitter!", 2, 26, 10);          }        }      [ if near right nugget pile      if (posn(ego, 50, 107, 72, 137))        {        [ if nuggets have been dug up, but not taken        if (Nugget14Status == NUGGET_FOUND)          {          print.at("Look at that gold glitter!", 2, 26, 10);          }        else          {          print.at("There's no gold in sight right here.", 2, 26, 10);          }        }      }    else      {      [ the same message gets shown whether the 'if' test      [ passes or fails; this is a bug      if (isset(Nugget14Taken) && Nugget14Status != NUGGET_FOUND)        {        print.at("There's no gold in sight right here.", 2, 26, 10);        }      else        {        print.at("There's no gold in sight right here.", 2, 26, 10);        }      }    }  else    {    print.at("It's too dern dark in here to see!", 2, 26, 10);    }  }  [ get goldif ((said("acquire", "gold") ||     said("acquire", "gold", "nugget") ||     said("acquire", "nugget")))  {  [ if near eigher nugget pile  if ((posn(ego, 51, 107, 66, 120) ||       posn(ego, 24, 107, 32, 138)))    {    [ if near left nugget pile    if (posn(ego, 24, 107, 32, 138))      {      [ if already taken      if (isset(Nugget14Taken))        {        print.at("There's no gold in sight right here.", 2, 26, 10);        }      else        {        [ get the gold!        print.at("Ya reach out and get the gold!", 2, 26, 10);        [ remove nuggets from screen        erase(oNuggets2);        [ if gold amount is less than 110        if (GoldIndex < 110)          {          [ get two units of gold          GoldIndex  += 2;          }        else          {          [ otherwise get one unit of gold          GoldIndex  += 1;          }        [ set 'nugget taken' flag        set(Nugget14Taken);        [ update inventory with correct amount of gold        call(lgc.AdjustGold);        }      }    else      {      [ must be near right nugget pile            [ if nuggets are uncovered and still there      if (Nugget14Status == NUGGET_FOUND)        {        print.at("Ya reach out and get the gold!", 2, 26, 10);        [ remove nuggets froms screen        erase(oNuggets1);        [ if gold amount is less than 110        if (GoldIndex < 110)          {          [ get two units of gold           GoldIndex  += 2;          }        else          {          [ otherwise get one unit of gold          GoldIndex  += 1;          }        Nugget14Status = NUGGET_GONE;        [ update inventory with correct amount of gold        call(lgc.AdjustGold);        }      else        {        print.at("Ya can't reach any gold from here.", 2, 26, 10);        }      }    }  else    {    [ here, there are two different messages for the 'if'    [ statement        [ if both nugget piles have been taken    if (isset(Nugget14Taken) &&         Nugget14Status != NUGGET_FOUND)      {      print.at("There's no gold in sight right here.", 2, 26, 10);      }    else      {      print.at("Ya can't reach any gold from here.", 2, 26, 10);      }    }  }  [ use pickif ((said("pick") ||     said("pick", "gold") ||     said("use", "pick") ||     said("swing", "pick")))  {  [ if Jerrod has the pick  if (has("Pick"))    {    [ if Jerrod is climbing or falling    if ((isset(fClimbing) || isset(fFalling)))      {      [ can't dig while climbing or falling      if (isset(fClimbing))        {        print.at("Ya can't do that while yer climbin'!", 2, 26, 10);        }      if (isset(fFalling))        {        print.at("That's impossible right now!", 2, 26, 10);        }      }    else      {      [ if touching an alarm line       if (isset(egoHitSpecial))        {        [ this is an area where Jerrod can dig for gold        set.view(ego, vw.TunnelDigging);        [ start timer        vDigTimer = 1;        [ begin at first cel        set.cel(ego, 0);        stop.motion(ego);        [ allow ego object to cycle when not moving        set(CycleAtRest);        [ start digging        start.cycling(ego);        }      else        {        print.at("You're close to a likely spot. Try that nearby.", 2, 26, 10);        }      }    }  else    {    print.at("Ya don't have a pick.", 2, 26, 10);    }  }  [ look ladderif (said("examine", "ladder"))  {  [ if Jerrod has a lit lantern or lit match  if ((isset(LanternLit) || isset(MatchLit)))    {    [ if close to the ladder    if (posn(ego, 24, 0, 100, 167))      {      print.at("It's just a wooden ladder.", 2, 26, 10);      }    else      {      print.at("There's no ladder in sight right here.", 2, 26, 10);      }    }  else    {    print.at("It's too dern dark in here to see!", 2, 26, 10);    }  }  Done:[ call tunnel logic to run code common to all tunnelscall(lgc.Tunnels);return();[ **************************************[ MESSAGES[ **************************************#message 13 "Ya can't do that while yer climbin'!"#message 14 "You're close to a likely spot. Try that nearby."#message 15 "Ya don't have a pick."#message 16 "That's impossible right now!"#message 17 "It's too dern dark in here to see!"#message 20 "Nothin'!"#message 25 "Look at that gold glitter!"#message 26 "You've struck gold!"#message 28 "Ya can't reach any gold from here."#message 31 "Ya reach out and get the gold!"#message 47 "There's no gold in sight right here."#message 80 "There's no ladder in sight right here."#message 81 "It's just a wooden ladder."