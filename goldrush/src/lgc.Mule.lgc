[***********************************************************[[ lgc.Mule[[ Called from rooms in California when Jerrod has a mule [ with him. This logic makes sure the mule is placed [ correctly, and that it moves with Jerrod. [[***********************************************************[ **************************************[ LOCAL DEFINES[ **************************************#define oMule                       o22#define vLostMuleTimer             v251#define vMuleX                     v252#define vMuleY                     v253#define vMuleOldX                  v254#define vMuleOldY                  v255#define fMuleIsBack                 f32 [ override RushAnnounced#define fMuleSound                 f254#define fFollowJerrod              f255[ **************************************[ FIRST CYCLE ONLY[ **************************************if (isset(newRoom))  {  [ only run this code if Jerrod has a mule  if ((has(LazyMule) ||       has("James' ol' mule") ||       has(OtherMule)))    {    [ get Jerrod's position (mule will be placed nearby)    get.posn(ego, EgoX, EgoY);        [ if not in the corral or north stable    [ this is a bug- it should be an 'and' operator (&&); as    [ written it will ALWAYS load the mule view, because if    [ Jerrod is in the corral, the second test still pass    [ and vice versa    if ((currentRoom != rm.SF_Corral ||         currentRoom != rm.StableNorth))      {      [ mule view isn't loade yet, so load it      load.view(vw.Mule);      }          [ animate the mule, and assign the view    animate.obj(oMule);    set.view(oMule, vw.Mule);        [ if Jerrod is following the mule and is not in Coloma    [ (except for rm.ColomaNW and rm.ColomaNorth)    if (MuleFollowCounter > 0 &&         currentRoom != rm.MillTailrace &&         currentRoom != rm.SuttersMill &&         currentRoom != rm.ColomaWestEntrance &&         currentRoom != rm.ColomaWest &&         currentRoom != rm.ColomaSouth &&         currentRoom != rm.ColomaSE &&         currentRoom != rm.ColomaNE &&         currentRoom != rm.ColomaEast)      {      [ score seven points for deciding to follow mule to      [ Jake's hideout      currentScore  += 7;            [ these variables are set, but are never used anywhere      v249 = 2;      v250 = 2;            [ set flag so music will start playing again      set(fMuleSound);      [ no longer following mule on 'random' path      MuleFollowCounter = 0;      [ mule is now leading Jerrod to Jake's cabin      set(MuleLeadingWay);      }          [ now position the mule:        [ if mule is NOT leading Jerrod to Jake's cabin    if (!isset(MuleLeadingWay))      {      [ if Jerrod is on upper portion of screen      if (EgoY < 100)        {        [ mule is one pixel below Jerrod        vMuleY = EgoY;        vMuleY  += 1;        }      [ if Jerrod is on lower portion of screen      if (EgoY > 99)        {        [ mule is one pixel above Jerrod        vMuleY = EgoY;        vMuleY -= 1;        }      [ if Jerrod is on left side of screen      if (EgoX < 80)        {        [ mule is on right side of Jerrod        vMuleX = EgoX;        vMuleX  += 9;        }      [ if Jerrod is on right side of screen      if (EgoX > 79)        {        [ mule is on left side of Jerrod        vMuleX = EgoX;        vMuleX -= 22;        [ mule starts facing left        set.loop(oMule, 1);        }      [ for these rooms, some additional adjustments to the      [ mule's starting position are needed      if (currentRoom == lgc.AmRiverWild && EgoY < 94)        {        vMuleY = 94;        }      if (currentRoom == lgc.SacRiverWild &&           posn(ego, 0, 167, 87, 167))        {        vMuleX = 100;        }      if (currentRoom == lgc.SacRiverWild &&           posn(ego, 0, 80, 57, 82))        {        vMuleX = 64;        }      if (currentRoom == rm.SF_BunkRoom &&           posn(ego, 140, 80, 155, 93))        {        vMuleY = 98;        }      if (currentRoom == rm.SF_Corral &&           posn(ego, 0, 80, 3, 93))        {        vMuleY = 101;        }      }    else      {      [ if mule is leading the way to Jake's cabin            [ set flag so music will start playing again      set(fMuleSound);            [ these variable are set but are never used anywhere      v249 = 2;      v250 = 2;            [ position mule near middle of screen      vMuleX = 79;      vMuleY = 114;      }          [ add mule to screen at desired location    position.v(oMule, vMuleX, vMuleY);    draw(oMule);        [ if mule is leading Jerrod,    if (isset(MuleLeadingWay))      {      if (WildernessY < 7)        {        [ move mule to bottom of screen        move.obj(oMule, 79, 167, 1, fMuleIsBack);        }      else        {        if (WildernessY > 7)          {          [ move mule to middle of screen          move.obj(oMule, 79, 80, 1, fMuleIsBack);          }        else          {          [ WildernessY == 7                     [          if (WildernessX < 27)            {            [ move mule to right edge of screen            move.obj(oMule, 139, 114, 1, fMuleIsBack);            }          else            {            if (WildernessX > 27)              {              [ move mule to left edge of screen              move.obj(oMule, 0, 114, 1, fMuleIsBack);              }            else              {              [ means Jerrod (and mule) are at Jake's cabin              }            }          }        }      }    }  }  [ **************************************[ EVERY CYCLE[ **************************************[ if the 'chase mule' music is done, start it againif (isset(fMuleSound))  {  sound(m.FollowMule, fMuleSound);  }  [ if the mule stops for any reason, it stops cycling, until[ it begins moving againget.posn(oMule, vMuleX, vMuleY);if (vMuleOldX == vMuleX && vMuleOldY == vMuleY)  {  stop.cycling(oMule);  }else  {  start.cycling(oMule);  }vMuleOldX = vMuleX;vMuleOldY = vMuleY;[ if not following mule on random path, and NOT leading[ Jerrod to Jakeif (MuleFollowCounter == 0 && !isset(MuleLeadingWay))  {  [ if NOT in the north stable room  if (currentRoom != rm.StableNorth)    {    [ if mule gets too far away    if (MuleDistance > 30)      {      [ make sure Jerrod has the mule      if ((has(LazyMule) ||           has("James' ol' mule") ||           has(OtherMule)))        {        [ mule stops following Jerrod, and begins to wander        reset(fFollowJerrod);        wander(oMule);        }      }    }      [ if mule is NOT following Jerrod and it reaches edge of  [ screen  if (!isset(fFollowJerrod) && objHitEdge == 22)    {    erase(oMule);    print("Ya better keep an eye on that mule of yers; it just got away!!");    if (has(LazyMule))      {      set(LazyMuleGone);      drop(LazyMule);      }    if (has("James' ol' mule"))      {      drop("James' ol' mule");      }    }    [ if mule is NOT following Jerrod, is more than 30 pixels  [ away, and Jerrod leaves the room  if (!isset(fFollowJerrod) &&       MuleDistance > 30 &&       MuleDistance < 255 &&       edgeEgoHit != NOT_HIT)    {    print("Ya shouldn't run off while yer mule's just wanderin' around.  You've "          "gone and left yer mule behind!!");    if (has(LazyMule))      {      [ lazy mule is gone forever      set(LazyMuleGone);      drop(LazyMule);      }    if (has("James' ol' mule"))      {      drop("James' ol' mule");      }    }  }  [ if mule is leading the way to Jake's cabin, or if just[ wandering or if it's left the roomif ((MuleFollowCounter > 0 ||     isset(MuleLeadingWay) ||     isset(MuleLeftRoom)))  {  [ check for ego hitting an edge  if (edgeEgoHit != NOT_HIT)    {    if (edgeEgoHit == MuleDir)      {      set(leaveWindow);      print("Yer right on his tail!!");      }    else      {      set(leaveWindow);      print("Oooops!  The mule went another direction!!");      reset(MuleLeftRoom);      drop("James' ol' mule");      }    [ reset mule direction    MuleDir = 0;    }  }  [ if not following a wandering mule, and not following the[ mule to Jake's locationif (MuleFollowCounter == 0 && !isset(MuleLeadingWay))  {  [ get distance to mule  distance(oMule, ego, MuleDistance);  if ((has(LazyMule) ||       has("James' ol' mule") ||       has(OtherMule)))    {    [ if mule is close    if (MuleDistance < 17)      {      if (isset(fFollowJerrod))        {        [ mule is close enough to Jerrod, so it stops        [ following        reset(fFollowJerrod);        stop.motion(oMule);        }      }    [ if mule is between 16 and 31 pixels away    if (MuleDistance > 16 && MuleDistance < 31)      {      [ if not following ego      if (!isset(fFollowJerrod))        {        [ mule begins to follow Jerrod, in order to get        [ within range        set(fFollowJerrod);        follow.ego(oMule, 6, fMuleIsBack);        }      }    }  }  [ if following the mule at random, or if mule is leading the[ wayif ((MuleFollowCounter > 0 || isset(MuleLeadingWay)))  {  if (vLostMuleTimer == 0)    {    [ if mule is on horizon    if (posn(oMule, 0, 81, 159, 81))      {      [ mule disappears at top edge      erase(oMule);      MuleDir = TOP_EDGE;      vLostMuleTimer = 1;      set(MuleLeftRoom);      }    [ if mule is on bottom of screen    if (posn(oMule, 0, 167, 159, 167))      {      [ mule disappears at bottom edge      erase(oMule);      MuleDir = BOTTOM_EDGE;      [ start timer      vLostMuleTimer = 1;      [ set flag indicating mule has left (and that Jerrod      [ needs to follow)      set(MuleLeftRoom);      }    [ if mule is on left edge    if (posn(oMule, 0, 81, 0, 166))      {      [ mule disappears to left      erase(oMule);      MuleDir = LEFT_EDGE;      [ start timer      vLostMuleTimer = 1;      set(MuleLeftRoom);      }    [ if mule is on right edge    if (posn(oMule, 139, 81, 139, 166))      {      [ mule disappears to right      erase(oMule);      MuleDir =  RIGHT_EDGE;      vLostMuleTimer = 1;      set(MuleLeftRoom);      }    }    [ if mule has gone to another screen  if (vLostMuleTimer > 0)    {    [ increment timer    ++vLostMuleTimer;    [ if too much time has past    if (vLostMuleTimer == 160)      {      [ reset timer      vLostMuleTimer = 0;      [ mule is gone; Jerrod can't follow it anymore      MuleFollowCounter = 0;      drop("James' ol' mule");      print("Ya got too far behind!  That mule is long gone!!");      }    }          [ the code in this 'if' block is not necessary; values of  [ MuleFollowCounter other than 'zero' or 'greater than  [ zero' are not used, so incrementing it has no effect; it  [ looks like at one point this variable was used a  [ counter, but was then changed to be essentially a flag    [ if Jerrod is following the wandering mule and counter is   [ less than 240  if (MuleFollowCounter > 0 && MuleFollowCounter < 240)    {    [ increment the counter    ++MuleFollowCounter;    [ when counter gets to 230    if (MuleFollowCounter == 230)      {      [ reset it back to 1      MuleFollowCounter = 1;      }    }  }  [ if player hasn't provided input no need to do said testsif (!isset(haveInput))  {  goto(Done);  }[ **************************************[ PROCESS PLAYER INPUT[ **************************************[ follow muleif (said("follow", "donkey"))  {  [ if Jerrod has Jame's mule or lazy mule  if ((has("James' ol' mule") || has(LazyMule)))    {    [ if mule is already leading Jerrod to Jake's cabin    if (isset(MuleLeadingWay))      {      print("Yer already followin' that ol' mule!");      goto(Done);      }          [ can't follow mule in Sutter's Fort    if ((currentRoom == rm.SuttersFortArea ||         currentRoom == rm.SuttersFortSouth ||         currentRoom == rm.SF_SouthGate ||         currentRoom == rm.SF_Blacksmith ||         currentRoom == rm.SF_Bunkroom ||         currentRoom == rm.SF_Corral ||         currentRoom == rm.SF_Kitchen ||         currentRoom == rm.SF_Admin ||         currentRoom == rm.SF_Workshops ||         currentRoom == rm.SF_CemeteryGate ||         currentRoom == rm.SF_TradingStore ||         currentRoom == rm.SF_Offices))      {      print("A dandy idear, but try it a little later!");      goto(Done);      }          [ in the stable room, there are too many mules    if ((currentRoom == rm.StableNorth ||         currentRoom == rm.StableSouth))      {      print("Which mule?");      goto(Done);      }          [ can't follow the mule in Coloma (note the bug yhat     [ includes rm.JerrodIntro in this if test - it doesn't    [ affect gameplay, but shouldn't be here)    if ((currentRoom == rm.MillTailrace ||         currentRoom == rm.SuttersMill ||         currentRoom == rm.ColomaWestEntrance ||         currentRoom == rm.ColomaNW ||         currentRoom == rm.ColomaNorth ||         currentRoom == rm.ColomaNE ||         currentRoom == rm.ColomaWest ||         currentRoom == rm.ColomaEast ||         currentRoom == rm.ColomaSouth ||         currentRoom == rm.ColomaSE ||         currentRoom == rm.JerrodIntro ||         currentRoom == rm.GreenPastures))      {      print("Ya best try that when yer outta town!");      goto(Done);      }    [ can't follow mule when by Sacramento River    if (currentRoom == 122)      {      print("Try that somewhere nearby!!");      goto(Done);      }          [ if only one mile east of the fort    if (WildernessX == 1)      {      print("Try that somewhere nearby!!");      goto(Done);      }          [ if in the wilderness    if (currentRoom == 123)      {      [ if one mile south of the fort      if (WildernessY == 1)        {        [ and close to Coloma        if ((WildernessX == 17 ||             WildernessX == 18 ||             WildernessX == 19 ||             WildernessX == 23))          {          print("Try that just a smidgen further outta town!");          goto(Done);          }        }        [ if two miles south of the fort      if (WildernessY == 2)        {        [ and close to Coloma        if ((WildernessX == 19 ||             WildernessX == 23))          {          print("Try that just a smidgen further outta town!");          goto(Done);          }        }      [ if three miles south of town      if (WildernessY == 3)        {        [ and close to Coloma        if ((WildernessX == 20 ||             WildernessX == 21 ||             WildernessX == 22))          {          print("Try that just a smidgen further outta town!");          goto(Done);          }        }      }    [ if by American River    if (currentRoom == 124)      {      [ if by the river, WildernessY will always be zero...      if (WildernessY == 0)        {        [ if close to Coloma        if ((WildernessX == 16 || WildernessX == 23))          {          print("Try that just a smidgen further outta town!");          goto(Done);          }        }      [ if one mile east of the fort along the river      if (WildernessX == 1 && WildernessY == 0)        {        print("Try that somewhere nearby!!");        goto(Done);        }      }        [ room was validated; now check which mule          [ the lazy mule doesn't go anywhere    if (has(LazyMule))      {      print("This ol, mule has a hard time leadin' the fleas on its back!  It "            "won't take ya anywhere!");      }          [ James' mule can be followed    if (has("James' ol' mule"))      {      [ mule stops following Jerrod      reset(fFollowJerrod);      [ this flag gets set, but is never used anywhere else      set(f143);            [ increment counter indicating Jerrod is following the       [ mule as he wanders about      MuleFollowCounter = 1;            [ music flag gets set, but it doesn't need to be; when      [ the sound command is used just below, the flag      [ immediately gets reset      set(fMuleSound);      [ these two variables are set but never used anywhere      [ else      v249 = 2;      v250 = 2;      [ the mule begins to wander around      wander(oMule);      [ play the 'chase mule' music      sound(m.FollowMule, fMuleSound);      }    }  else    {    if ((currentRoom == rm.StableNorth ||         currentRoom == rm.StableSouth))      {      [ in the stables, there are a bunch of mules      print("Which mule?");      }    else      {      print("What mule?");      }    }  }  [ brand muleif ((said("brand", "donkey") ||     said("use", "iron") ||     said("use", "branding", "iron") ||     said("use", "branding", "iron", "donkey") ||     said("brand", "donkey", "iron") ||     said("brand", "donkey", "branding", "iron")))  {  if (has("Branding iron"))    {    [ if player says 'brand mule' in rm.SF_Blacksmith, that    [ room will handle the actual sequence for branding the    [ mule; in any other room, this generic response is     [ provided    print("Yer branding iron is cold!");    }  else    {    print("Ya ain't got a branding iron!");    }  }  [ look brandif (said("examine", "brand"))  {  if (has("James' ol' mule"))    {    show.obj(vw.Inv.JamesMule);    }  else    {    if (isset(LazyMuleBranded))      {      show.obj(vw.Inv.LazyMule);      }    else      {      [ reset haveMatch so generic response can be shown      reset(haveMatch);      }    }  }  [ ride mule/sit on muleif ((said("ride", "donkey") || said("sit", "donkey")))  {  print("Why?  Ya got two strong legs of yer own!");  }  [ look muleif (said("examine", "donkey"))  {  if ((currentRoom == rm.StableNorth ||       currentRoom == rm.StableSouth))    {    [ in the stables, let the main logic handle this    [ statement    reset(haveMatch);    }  else    {    if ((has(LazyMule) || has("James' ol' mule")))      {      if (has(LazyMule))        {        print("This mule is slow and lazy. If you had a trusty mule, it may "              "mean the difference between poverty and riches!");        }      if (has("James' ol' mule"))        {        [ if mule is leading Jerrod to Jake's location        if (isset(MuleLeadingWay))          {          print("There's James' mule. Don't let it get away!");          }        else          {          show.obj(vw.Inv.JamesMule);          }        }      }    else      {      [ Jerrod doesn't have a mule; let main logic handle      [ ther response      reset(haveMatch);      }    }  }  Done:return();[ **************************************[ MESSAGES[ **************************************#message 1 "Which mule?"#message 2 "What mule?"#message 3 "A dandy idear, but try it a little later!"#message 4 "Ya got too far behind!  That mule is long gone!!"#message 5 "This ol, mule has a hard time leadin' the fleas on its back!  It won't take ya anywhere!"#message 6 "Ya best try that when yer outta town!"#message 7 "I guess ya better try that somewhere else!!"#message 8 "Ya better keep an eye on that mule of yers; it just got away!!"#message 9 "Try that somewhere nearby!!"#message 10 "Yer right on his tail!!"#message 11 "Oooops!  The mule went another direction!!"#message 12 "Try that just a smidgen further outta town!"#message 13 "Yer already followin' that ol' mule!"#message 14 "Ya shouldn't run off while yer mule's just wanderin' around.  You've gone and left yer mule behind!!"#message 15 "Yer branding iron is cold!"#message 16 "Ya ain't got a branding iron!"#message 17 "Why?  Ya got two strong legs of yer own!"#message 18 "There's James' mule. Don't let it get away!"#message 22 "This mule is slow and lazy. If you had a trusty mule, it may mean the difference between poverty and riches!"