[***********************************************************[ [ lgc.AdjustGold[[ This logic handles changes in the amount of gold that [ has gained or lost throughout the game. The variable[ 'GoldIndex' is an index value that corresponds to an [ entry in the inventory objects file that describes the [ current value of Jerrod's gold stash. As Jerrod finds or[ loses gold, the index value is adjusted, which [ removes/adds the correct inventory item to the player's[ inventory.[[***********************************************************[ if in the ending roomif (currentRoom == cs.Goldmine)  {  [ no need to calculate score points; just drop whatever  [ gold Jerrod currently has  goto(DropGold);  }[ if current index is more than previousif (PrevGoldIndex < GoldIndex)  {  [ Jerrod has found more gold!    [ if in the tunnels  if (currentRoom > 146 && currentRoom < 164)    {    [ there is more gold available than in other places    [ allow up to 70 points for finding gold    if (PointsFromGold < 70)      {      sound(m.FoundGold, DoneNoAction);      ++PointsFromGold;      ++currentScore;      }    }  else    {    if (PointsFromGold < 50)      {      sound(m.FoundGold, DoneNoAction);      ++PointsFromGold;      ++currentScore;      }    }  }[ save index value for later comparisonsPrevGoldIndex = GoldIndex;DropGold:[ to update Jerrod's gold value, first drop whatever gold he[ currently hasif (has("GOLD! $37"))  {  drop("GOLD! $37");  }if (has("GOLD! $98"))  {  drop("GOLD! $98");  }if (has("GOLD! $156"))  {  drop("GOLD! $156");  }if (has("GOLD! $207"))  {  drop("GOLD! $207");  }if (has("GOLD! $243"))  {  drop("GOLD! $243");  }if (has("GOLD! $298"))  {  drop("GOLD! $298");  }if (has("GOLD! $337"))  {  drop("GOLD! $337");  }if (has("GOLD! $395"))  {  drop("GOLD! $395");  }if (has("GOLD! $427"))  {  drop("GOLD! $427");  }if (has("GOLD! $484"))  {  drop("GOLD! $484");  }if (has("GOLD! $532"))  {  drop("GOLD! $532");  }if (has("GOLD! $577"))  {  drop("GOLD! $577");  }if (has("GOLD! $621"))  {  drop("GOLD! $621");  }if (has("GOLD! $679"))  {  drop("GOLD! $679");  }if (has("GOLD! $747"))  {  drop("GOLD! $747");  }if (has("GOLD! $793"))  {  drop("GOLD! $793");  }if (has("GOLD! $849"))  {  drop("GOLD! $849");  }if (has("GOLD! $898"))  {  drop("GOLD! $898");  }if (has("GOLD! $937"))  {  drop("GOLD! $937");  }if (has("GOLD! $982"))  {  drop("GOLD! $982");  }if (has("GOLD! $1040"))  {  drop("GOLD! $1040");  }if (has("GOLD! $1099"))  {  drop("GOLD! $1099");  }if (has("GOLD! $1147"))  {  drop("GOLD! $1147");  }if (has("GOLD! $1186"))  {  drop("GOLD! $1186");  }if (has("GOLD! $1255"))  {  drop("GOLD! $1255");  }if (has("GOLD! $1302"))  {  drop("GOLD! $1302");  }if (has("GOLD! $1364"))  {  drop("GOLD! $1364");  }if (has("GOLD! $1421"))  {  drop("GOLD! $1421");  }if (has("GOLD! $1492"))  {  drop("GOLD! $1492");  }if (has("GOLD! $1529"))  {  drop("GOLD! $1529");  }if (has("GOLD! $1587"))  {  drop("GOLD! $1587");  }if (has("GOLD! $1633"))  {  drop("GOLD! $1633");  }if (has("GOLD! $1679"))  {  drop("GOLD! $1679");  }if (has("GOLD! $1762"))  {  drop("GOLD! $1762");  }if (has("GOLD! $1849"))  {  drop("GOLD! $1849");  }if (has("GOLD! $1890"))  {  drop("GOLD! $1890");  }if (has("GOLD! $1941"))  {  drop("GOLD! $1941");  }if (has("GOLD! $1994"))  {  drop("GOLD! $1994");  }if (has("GOLD! $2023"))  {  drop("GOLD! $2023");  }if (has("GOLD! $2076"))  {  drop("GOLD! $2076");  }if (has("GOLD! $2142"))  {  drop("GOLD! $2142");  }if (has("GOLD! $2208"))  {  drop("GOLD! $2208");  }if (has("GOLD! $2265"))  {  drop("GOLD! $2265");  }if (has("GOLD! $2327"))  {  drop("GOLD! $2327");  }if (has("GOLD! $2406"))  {  drop("GOLD! $2406");  }if (has("GOLD! $2478"))  {  drop("GOLD! $2478");  }if (has("GOLD! $2526"))  {  drop("GOLD! $2526");  }if (has("GOLD! $2587"))  {  drop("GOLD! $2587");  }if (has("GOLD! $2643"))  {  drop("GOLD! $2643");  }if (has("GOLD! $2698"))  {  drop("GOLD! $2698");  }if (has("GOLD! $2783"))  {  drop("GOLD! $2783");  }if (has("GOLD! $2874"))  {  drop("GOLD! $2874");  }if (has("GOLD! $2988"))  {  drop("GOLD! $2988");  }if (has("GOLD! $3123"))  {  drop("GOLD! $3123");  }if (has("GOLD! $3247"))  {  drop("GOLD! $3247");  }if (has("GOLD! $3375"))  {  drop("GOLD! $3375");  }if (has("GOLD! $3516"))  {  drop("GOLD! $3516");  }if (has("GOLD! $3632"))  {  drop("GOLD! $3632");  }[ this appears to be a bug - if the index value is 59[ the corresponding inventory object is 118, which is[ a blank ('?') non-objectif (has(i118))  {  [ WARNING: reference to invalid inventory object ('?')  drop(i118);  }if (has("GOLD! $3751"))  {  drop("GOLD! $3751");  }if (has("GOLD! $3869"))  {  drop("GOLD! $3869");  }if (has("GOLD! $3994"))  {  drop("GOLD! $3994");  }if (has("GOLD! $4137"))  {  drop("GOLD! $4137");  }if (has("GOLD! $4309"))  {  drop("GOLD! $4309");  }if (has("GOLD! $4464"))  {  drop("GOLD! $4464");  }if (has("GOLD! $4695"))  {  drop("GOLD! $4695");  }if (has("GOLD! $4821"))  {  drop("GOLD! $4821");  }if (has("GOLD! $4978"))  {  drop("GOLD! $4978");  }if (has("GOLD! $5083"))  {  drop("GOLD! $5083");  }if (has("GOLD! $5232"))  {  drop("GOLD! $5232");  }if (has("GOLD! $5387"))  {  drop("GOLD! $5387");  }  [ if at game endif (currentRoom == cs.GoldMine)  {  [ it looks like the programmers wanted to give Jerrod  [ $8+ million in gold; the OBJECT file entry has an error  [ in it where the last two digits should be though   get("GOLD $8,427,3%&ERROR");  }else  {  [ in all other locations, check if all gold is lost  if (isset(DropAllGold))    {    [ clear the flag    reset(DropAllGold);        [ lose all points scored from finding gold    currentScore -= PointsFromGold;        [ if more than 4, remove another 5, and like the method    [ used to subtract points for walking on the grass, this    [ method suffers from poor coding; if current score is 9    [ or less, this code will make player lose all their    [ points instead of just five!    if (currentScore > 4)      {      currentScore -= 5;      }    if (currentScore == 4)      {      currentScore -= 4;      }    if (currentScore == 3)      {      currentScore -= 3;      }    if (currentScore == 2)      {      currentScore -= 2;      }    if (currentScore == 1)      {      currentScore -= 1;      }          [ drop all gold (59 = no gold, to account for offset in    [ OBJECT file)    GoldIndex = 59;    PointsFromGold = 0;    [ set the previous index value to one less than amount in hand    [ so next time Jerrod finds gold he will score points again    PrevGoldIndex = 58;    }  else    {    [ add the current value of gold to player's inventory    get.v(GoldIndex);    }  }  return();[ **************************************[ MESSAGES[ **************************************