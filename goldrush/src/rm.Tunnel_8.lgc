[***********************************************************[[ rm.Tunnel_8[[ Another tunnel location, on the way to the final gold mine[ location. There are two piles of gold nuggets that Jerrod[ can find in this room, one that is in plain sight and [ another that he has to find by digging in the right place.[ [***********************************************************[ **************************************[ LOCAL DEFINES[ **************************************#define oDark1                       o1#define oDark2                       o2#define oDark3                       o3#define oDark4                       o4#define oDark5                       o5#define oDark6                       o6#define oDark7                       o7#define oDark8                       o8#define oDark9                       o9#define oDark10                     o10#define oDark11                     o11#define oDark12                     o12#define oDark13                     o13#define oDark14                     o14#define oDark15                     o15#define oDark16                     o16#define oDark17                     o17#define oNuggets1                   o18#define oNuggets2                   o19#define vFlicker                   v220#define vEgoDX                     v221#define vEgoDY                     v222#define vDigTimer                  v223#define vEgoLoop                   v224#define vEgoCel                    v225#define fDrawDark                  f220#define fLight1                    f221#define fLight2                    f222#define fLight3                    f223#define fLight4                    f224#define fLight5                    f225#define fLight6                    f226#define fLight7                    f227#define fLight8                    f228#define fLight9                    f229#define fLight10                   f230#define fLight11                   f231#define fLight12                   f232#define fLight13                   f233#define fLight14                   f234#define fLight15                   f235#define fLight16                   f236#define fLight17                   f237#define fClimbing                  f238#define fFalling                   f239[ **************************************[ FIRST CYCLE ONLY[ **************************************if (isset(newRoom))  {  [ load, draw and discard room picture  load.pic(currentRoom);  draw.pic(currentRoom);  discard.pic(currentRoom);    [ load the tunnel logic, that handles all the common  [ tunnel functions  load.logics(lgc.Tunnels);    [ load views needed by objects in the room  load.view(vw.WideJerrodCA);  load.view(vw.Darkness);  load.view(vw.TunnelClimbing);  load.view(vw.TunnelFalling);  load.view(vw.TunnelDigging);  load.view(vw.TunnelArt);  [ load sound used in the room  load.sound(m.FoundGold);    [ add the darkness panels - these black out areas of the  [ tunnel that are beyond the range of Jerrod's light  [ (don't draw them yet, lgc.DarkenTunnel will do that)  animate.obj(oDark1);  set.view(oDark1, vw.Darkness);  set.loop(oDark1, 0);  set.cel(oDark1, 5);  set.priority(oDark1, 15);  ignore.objs(oDark1);  ignore.blocks(oDark1);  position(oDark1, 61, 167);  [ darkness panel 2  animate.obj(oDark2);  set.view(oDark2, vw.Darkness);  set.loop(oDark2, 0);  set.cel(oDark2, 5);  set.priority(oDark2, 15);  ignore.objs(oDark2);  ignore.blocks(oDark2);  position(oDark2, 61, 141);  [ darkness panel 3  animate.obj(oDark3);  set.view(oDark3, vw.Darkness);  set.loop(oDark3, 0);  set.cel(oDark3, 5);  set.priority(oDark3, 15);  ignore.objs(oDark3);  ignore.blocks(oDark3);  position(oDark3, 61, 115);  [ darkness panel 4  animate.obj(oDark4);  set.view(oDark4, vw.Darkness);  set.loop(oDark4, 0);  set.cel(oDark4, 5);  set.priority(oDark4, 15);  ignore.objs(oDark4);  ignore.blocks(oDark4);  position(oDark4, 62, 89);  [ darkness panel 5  animate.obj(oDark5);  set.view(oDark5, vw.Darkness);  set.loop(oDark5, 0);  set.cel(oDark5, 5);  set.priority(oDark5, 15);  ignore.objs(oDark5);  ignore.blocks(oDark5);  position(oDark5, 62, 63);  [ darkness panel 6  animate.obj(oDark6);  set.view(oDark6, vw.Darkness);  set.loop(oDark6, 0);  set.cel(oDark6, 5);  set.priority(oDark6, 15);  ignore.objs(oDark6);  ignore.blocks(oDark6);  position(oDark6, 63, 37);  [ darkness panel 7  animate.obj(oDark7);  set.view(oDark7, vw.Darkness);  set.loop(oDark7, 0);  set.cel(oDark7, 1);  set.priority(oDark7, 15);  ignore.objs(oDark7);  ignore.blocks(oDark7);  position(oDark7, 3, 118);  [ darkness panel 8  animate.obj(oDark8);  set.view(oDark8, vw.Darkness);  set.loop(oDark8, 0);  set.cel(oDark8, 1);  set.priority(oDark8, 15);  ignore.objs(oDark8);  ignore.blocks(oDark8);  position(oDark8, 14, 118);  [ darkness panel 9  animate.obj(oDark9);  set.view(oDark9, vw.Darkness);  set.loop(oDark9, 0);  set.cel(oDark9, 1);  set.priority(oDark9, 15);  ignore.objs(oDark9);  ignore.blocks(oDark9);  position(oDark9, 29, 118);  [ darkness panel 10  animate.obj(oDark10);  set.view(oDark10, vw.Darkness);  set.loop(oDark10, 0);  set.cel(oDark10, 1);  set.priority(oDark10, 15);  ignore.objs(oDark10);  ignore.blocks(oDark10);  position(oDark10, 40, 118);  [ darkness panel 11  animate.obj(oDark11);  set.view(oDark11, vw.Darkness);  set.loop(oDark11, 0);  set.cel(oDark11, 1);  set.priority(oDark11, 15);  ignore.objs(oDark11);  ignore.blocks(oDark11);  position(oDark11, 51, 118);  [ darkness panel 12  animate.obj(oDark12);  set.view(oDark12, vw.Darkness);  set.loop(oDark12, 0);  set.cel(oDark12, 1);  set.priority(oDark12, 15);  ignore.objs(oDark12);  ignore.blocks(oDark12);  position(oDark12, 94, 160);  [ darkness panel 13  animate.obj(oDark13);  set.view(oDark13, vw.Darkness);  set.loop(oDark13, 0);  set.cel(oDark13, 1);  set.priority(oDark13, 15);  ignore.objs(oDark13);  ignore.blocks(oDark13);  position(oDark13, 105, 160);  [ darkness panel 14  animate.obj(oDark14);  set.view(oDark14, vw.Darkness);  set.loop(oDark14, 0);  set.cel(oDark14, 1);  set.priority(oDark14, 15);  ignore.objs(oDark14);  ignore.blocks(oDark14);  position(oDark14, 118, 160);  [ darkness panel 15  animate.obj(oDark15);  set.view(oDark15, vw.Darkness);  set.loop(oDark15, 0);  set.cel(oDark15, 1);  set.priority(oDark15, 15);  ignore.objs(oDark15);  ignore.blocks(oDark15);  position(oDark15, 129, 160);  [ darkness panel 16  animate.obj(oDark16);  set.view(oDark16, vw.Darkness);  set.loop(oDark16, 0);  set.cel(oDark16, 1);  set.priority(oDark16, 15);  ignore.objs(oDark16);  ignore.blocks(oDark16);  position(oDark16, 140, 160);  [ darkness panel 17  animate.obj(oDark17);  set.view(oDark17, vw.Darkness);  set.loop(oDark17, 0);  set.cel(oDark17, 1);  set.priority(oDark17, 15);  ignore.objs(oDark17);  ignore.blocks(oDark17);  position(oDark17, 149, 160);    [ first pile of nuggets is near top of tunnel (these are  [ visible without digging)  animate.obj(oNuggets1);  set.view(oNuggets1, vw.TunnelArt);  set.loop(oNuggets1, 0);  set.cel(oNuggets1, 4);  set.priority(oNuggets1, 4);  position(oNuggets1, 79, 44);  [ if the nuggets haven't been taken yet  if (!isset(Nugget8Taken))    {    [ show them    draw(oNuggets1);    stop.update(oNuggets1);    }      [ second pile of nuggets (these are hidden and need to be  [ found by digging)  animate.obj(oNuggets2);  set.view(oNuggets2, vw.TunnelArt);  set.loop(oNuggets2, 0);  set.cel(oNuggets2, 5);  set.priority(oNuggets2, 4);  position(oNuggets2, 105, 132);  [ if uncovered but still in the tunnel wall  if (Nugget8Status == NUGGET_FOUND)    {    [ show them    draw(oNuggets2);    stop.update(oNuggets2);    }      [ Jerrod  animate.obj(ego);  [ if coming from tunnel #9  if (previousRoom == rm.Tunnel_9)    {    [ Jerrod is climbing    set(fClimbing);    set.view(ego, vw.TunnelClimbing);    [ set and fix loop    set.loop(ego, 2);    fix.loop(ego);    }  else    {    [ Jerrod is walking    set.view(ego, vw.WideJerrodCA);    }  draw(ego);    [ the room starts out all darkened  call(lgc.DarkenTunnel);    [ now show the picture  show.pic();  }  [ **************************************[ EVERY CYCLE[ **************************************[ to simulate flickering of torch, use a random timer to[ redraw a black box over the area of tunnel that is[ darkened[ if flicker timer has counted downif (vFlicker == 0)  {  [ if Jerrod is stopped  if (egoDir == STOPPED)    {    [ if the redraw darkness flag is NOT set    if (!isset(fDrawDark))      {      [ draw a black box over the entire tunnel (when Jerrod      [ moves, the cleared areas will be uncovered)      clear.text.rect(2, 0, 21, 39, BLACK);      set(fDrawDark);      }    }  else    {    [ Jerrod is moving; clear the redraw darkness flag    reset(fDrawDark);    [ choose a random time between 2 and 4 cycles    random(2, 4, FlickerTime);    [ set flicker delay to the random vlaue    vFlicker = FlickerTime;    [ draw a black box over the entire tunnel    clear.text.rect(2, 0, 21, 39, BLACK);    }  }  [ decrement flicker counter--vFlicker;[ if Jerrod has a lit lantern or lit matchif ((isset(LanternLit) || isset(MatchLit)))  {  [ depending on position, remove the darkness panels so  [ Jerrod can see the area around him  if (posn(ego, 36, 141, 86, 167) && !isset(fLight1))    {    erase(oDark1);    set(fLight1);    }  if (posn(ego, 56, 121, 86, 167) && !isset(fLight2))    {    erase(oDark2);    set(fLight2);    }  if (posn(ego, 40, 95, 86, 161) && !isset(fLight3))    {    erase(oDark3);    set(fLight3);    }  if (posn(ego, 40, 69, 86, 135) && !isset(fLight4))    {    erase(oDark4);    set(fLight4);    }  if (posn(ego, 40, 43, 86, 112) && !isset(fLight5))    {    erase(oDark5);    set(fLight5);    }  if (posn(ego, 56, 17, 86, 83) &&  !isset(fLight6))    {    erase(oDark6);    set(fLight6);    }  if (posn(ego, 0, 97, 8, 124) && !isset(fLight7))    {    erase(oDark7);    set(fLight7);    }  if (posn(ego, 0, 97, 19, 124) && !isset(fLight8))    {    erase(oDark8);    set(fLight8);    }  if (posn(ego, 5, 97, 34, 124) && !isset(fLight9))    {    erase(oDark9);    set(fLight9);    }  if (posn(ego, 16, 97, 45, 124) && !isset(fLight10))    {    erase(oDark10);    set(fLight10);    }  if (posn(ego, 27, 97, 56, 124) && !isset(fLight11))    {    erase(oDark11);    set(fLight11);    }  if (posn(ego, 70, 100, 99, 167) && !isset(fLight12))    {    erase(oDark12);    set(fLight12);    }  if (posn(ego, 81, 100, 110, 167) && !isset(fLight13))    {    erase(oDark13);    set(fLight13);    }  if (posn(ego, 94, 100, 123, 167) && !isset(fLight14))    {    erase(oDark14);    set(fLight14);    }  if (posn(ego, 105, 100, 134, 167) && !isset(fLight15))    {    erase(oDark15);    set(fLight15);    }  if (posn(ego, 116, 100, 145, 167) && !isset(fLight16))    {    erase(oDark16);    set(fLight16);    }  if (posn(ego, 125, 100, 154, 167) && !isset(fLight17))    {    erase(oDark17);    set(fLight17);    }  }  [ if on ladder but not climbing yet (on upper level)if (posn(ego, 56, 96, 56, 105) && !isset(fClimbing))  {  [ Jerrod is climbing the ladder  [ reposition ego object so Jerrod appears on the ladder  [ correctly  vEgoDX = 3;  vEgoDY = 0;  reposition(ego, vEgoDX, vEgoDY);  set.view(ego, vw.TunnelClimbing);  [ set and fix loop  set.loop(ego, 2);  fix.loop(ego);  set(fClimbing);  }  [ if on ladder but not climbing yet (on lower level)if (posn(ego, 63, 147, 63, 153) && !isset(fClimbing))  {  [ Jerrod is climbing the ladder  [ reposition ego object so Jerrod appears on the ladder  [ correctly  vEgoDX = -4; [ 252;  vEgoDY = 0;  reposition(ego, vEgoDX, vEgoDY);  set.view(ego, vw.TunnelClimbing);  [ set and fix the loop  set.loop(ego, 2);  fix.loop(ego);  set(fClimbing);  }[ if off the ladder but climbing (on upper level)if (posn(ego, 55, 96, 55, 105) && isset(fClimbing))  {  [ Jerrod isn't climbing  reset(fClimbing);  [ reposition ego object so Jerrod appears on the ground  [ correctly  set.view(ego, vw.WideJerrodCA);  release.loop(ego);  [ step size when walking is 1  vEgoDX = 1;  step.size(ego, vEgoDX);  }  [ if off the ladder but climbing (on lower level)if (posn(ego, 62, 147, 62, 153) && isset(fClimbing))  {  [ Jerrod isn't climbing  reset(fClimbing);  [ reposition ego object so Jerrod appears on the ground  [ correctly  vEgoDX = 2;  vEgoDY = 0;  reposition(ego, vEgoDX, vEgoDY);  set.view(ego, vw.WideJerrodCA);  release.loop(ego);  [ step size when walking is 1  vEgoDX = 1;  step.size(ego, vEgoDX);  }  [ if Jerrod is not falling (not sure why this check -[ falling and climbing are mutually excluive; no need to[ check for 'not falling' here- a check for climbing by [ itself would be sufficient)if (!isset(fFalling))  {  if (isset(fClimbing))    {    [ set step size based on direction        [ if moving up or down ladder   if ((egoDir == UP || egoDir == DOWN))      {      [ up or down on ladder step size is 2 on ladder      vEgoDY = 2;      step.size(ego, vEgoDY);      }    else      {      [ any other direction, step size is 1      vEgoDX = 1;      step.size(ego, vEgoDX);      }    }  }  [ if Jerrod is climbingif (isset(fClimbing))  {  [ if Jerrod strays far enough from the ladder (hits alarm  [ line)  if (isset(egoHitSpecial))    {    [ Jerrod starts falling    ignore.blocks(ego);    set(fFalling);    reset(fClimbing);    set.view(ego, vw.TunnelFalling);    [ move him to bottom of screen (200 is an invalid Y    [ value, but it still works due to how the room checks    [ for reaching bottom)    vEgoDY = 200;    [ use DX variable for step size    vEgoDX = 10;    move.obj.v(ego, EgoX, vEgoDY, vEgoDX, DoneNoAction);    }  }  [ if Jerrod strays too far off ladder (near bottom of room)if (posn(ego, 62, 154, 70, 167) && !isset(fFalling))  {  [ Jerrod starts falling  ignore.blocks(ego);  set(fFalling);  reset(fClimbing);  set.view(ego, vw.TunnelFalling);  [ move him to bottom of screen (200 is an invalid Y  [ value, but it still works due to how the room checks  [ for reaching bottom)  vEgoDY = 200;  [ use DX variable for step size  vEgoDX = 10;  move.obj.v(ego, EgoX, vEgoDY, vEgoDX, DoneNoAction);  }  [ if Jerrod hits bottom edge while fallingif (edgeEgoHit == BOTTOM_EDGE && isset(fFalling))  {  [ done falling    [ adjust position - not necessary  position(ego, 100, 70);  reset(fFalling);  [ set global flag to start final death sequence  set(FellOffLadder);  }  [ if timer is activated (>0)if (vDigTimer > 0)  {  [ increment timer each cycle  ++vDigTimer;  }  [ after 3 cyclesif (vDigTimer == 3)  {  [ get loop (needed to correctly place the gold nugget)  current.loop(ego, vEgoLoop);  }  [ when 25 or more cycles pass with gold still uncoveredif (vDigTimer > 25 && Nugget8Status == NUGGET_HIDDEN)  {  [ get Jerrod's current cel  current.cel(ego, vEgoCel);  [ gold is uncovered at cel 2 only  if (vEgoCel == 2)    {    [ which way Jerrod is facing determines how to make    [ nuggets appear    if (vEgoLoop == 0)      {      [ if Jerrod is by the nugget's position      if (posn(ego, 82, 147, 87, 151))        {        [ uncover the nuggets        Nugget8Status = NUGGET_FOUND;        draw(oNuggets2);        sound(m.FoundGold, DoneNoAction);        stop.update(oNuggets2);        [ score a point        ++currentScore;        }      }    if (vEgoLoop == 1)      {      if (posn(ego, 99, 147, 105, 151))        {        [ uncover the nuggets        Nugget8Status = NUGGET_FOUND;        draw(oNuggets2);        sound(m.FoundGold, DoneNoAction);        stop.update(oNuggets2);        [ score a point        ++currentScore;        }      }    }  }  [ when 30 cycles passif (vDigTimer == 30)  {  [ Jerrod is done digging    [ Jerrod no longer cycles when not moving  reset(CycleAtRest);  start.motion(ego);  [ restore normal tunnel view  set.view(ego, vw.WideJerrodCA);  }  [ after 31 cyclesif (vDigTimer == 31)  {  [ reset the timer  vDigTimer = 0;  [ if nugget is now found  if (Nugget8Status == NUGGET_FOUND)    {    if (vEgoLoop == 0)      {      if (posn(ego, 80, 147, 87, 151))        {        print.at("Ya struck gold!", 2, 26, 10);        goto(CheckExits);        }      }    if (vEgoLoop == 1)      {      if (posn(ego, 99, 147, 105, 151))        {        print.at("Ya struck gold!", 2, 26, 10);        goto(CheckExits);        }      }    }      [ if no gold found,   print.at("Nothin'!", 2, 26, 10);  }  CheckExits:[ **************************************[ CHECK FOR AN EXIT CONDITION[ **************************************[ right edgeif (posn(ego, 130, 20, 130, 167))  {  [ redraw dark panels  draw(oDark5);  draw(oDark13);  [ update all objects (not sure why they do this since the  [ new.room command comes next - I guess it's so there'a a  [ split second before the room change with the room  [ updated)  force.update(ego);    [ position Jerrod to appear correctly on next screen  position(ego, 2, 148);  new.room(rm.Tunnel_5); [ ##LE001##  }  [ bottom of ladder (not falling)if (posn(ego, 30, 165, 90, 166) && !isset(fFalling))  {  [ redraw dark panels  draw(oDark5);  draw(oDark13);  [ update all objects (not sure why they do this since the  [ new.room command comes next - I guess it's so there'a a  [ split second before the room change with the room  [ updated)  force.update(ego);    [ position Jerrod to appear correctly on next screen  position(ego, 72, 61);  new.room(rm.Tunnel_9); [ ##LE002##  }  [ left edgeif (posn(ego, 1, 50, 1, 160))  {  [ redraw dark panels  draw(oDark5);  draw(oDark13);  [ update all objects (not sure why they do this since the  [ new.room command comes next - I guess it's so there'a a  [ split second before the room change with the room  [ updated)  force.update(ego);    position(ego, 129, 115);  new.room(rm.Tunnel_11); [ ##LE003##  }  [ **************************************[ PROCESS PLAYER INPUT[ **************************************[ if player hasn't provided input no need to do said testsif (!isset(haveInput))  {  goto(Done);  }  [ look wall/lookif ((said("examine", "wall") ||     said("examine", "mine") ||     said("examine", "cave") ||     said("examine", "around") ||     said("examine")))  {  [ if Jerrod has a lit lantern or lit match  if ((isset(LanternLit) || isset(MatchLit)))    {    [ if near left mine shaft    if (posn(ego, 56, 90, 70, 124))      {      print.at("Ya notice a mine shaft to yer left.", 2, 26, 10);      }    else      {      print.at("The mine walls are rough and ragged.", 2, 26, 10);      }    }  else    {    print.at("It's too dern dark in here to see!", 2, 26, 10);    }  }[ look shaftif (said("examine", "shaft"))  {  [ if Jerrod has a lit lantern or lit match  if ((isset(LanternLit) || isset(MatchLit)))    {    if (posn(ego, 56, 90, 70, 124))      {      [ if near the left tunnel      print.at("The shaft to yer left is difficult to see.", 2, 26, 10);      }    else      {      print.at("Right here, ya notice nothin' unusual about the shaft.", 2, 26, 10);      }    }  else    {    print.at("It's too dern dark in here to see!", 2, 26, 10);    }  }  [ look goldif ((said("examine", "gold") ||     said("examine", "gold", "nugget") ||     said("examine", "nugget")))  {  [ if Jerrod has a lit lamp or lit match  if ((isset(LanternLit) || isset(MatchLit)))    {    [ if near either nugget pile    if ((posn(ego, 55, 58, 65, 99) ||         posn(ego, 77, 147, 108, 167)))      {      [ if near upper nugget pile      if (posn(ego, 55, 58, 65, 99))        {        [ if already taken        if (isset(Nugget8Taken))          {          print.at("There's no gold in sight right here.", 2, 26, 10);          }        else          {          print.at("Just look at that gold glitter!", 2, 26, 10);          }        }      else        {        [ must be near lower nugget pile; if nuggets have        [ been dug up, but not taken        if (Nugget8Status == NUGGET_FOUND)          {          print.at("Just look at that gold glitter!", 2, 26, 10);          }        else          {          print.at("There's no gold in sight right here.", 2, 26, 10);          }        }      }    else      {      [ the same message gets shown whether if test passes      [ or fails; this is a bug      if (isset(Nugget8Taken) && Nugget8Status != 1)        {        print.at("There's no gold in sight right here.", 2, 26, 10);        }      else        {        print.at("There's no gold in sight right here.", 2, 26, 10);        }      }    }  else    {    print.at("It's too dern dark in here to see!", 2, 26, 10);    }  }  [ get goldif ((said("acquire", "gold") ||     said("acquire", "gold", "nugget") ||     said("acquire", "nugget")))  {  [ if near eigher nugget pile  if ((posn(ego, 62, 58, 62, 84) ||       posn(ego, 83, 147, 102, 157)))    {    [ if near upper nugget pile    if (posn(ego, 62, 58, 62, 84))      {      [ if already taken      if (isset(Nugget8Taken))        {        print.at("Ya can't reach any gold from here.", 2, 26, 10);        }      else        {        [ get the gold!        print.at("Ya reach out and grab the gold nuggets!", 2, 26, 10);        [ remove nuggets from screen        erase(oNuggets1);        [ if gold amount is less than 110        if (GoldIndex < 110)          {          [ get two units of gold          GoldIndex  += 2;          }        else          {          [ otherwise get one unit of gold          GoldIndex  += 1;          }        [ set 'nugget taken' flag        set(Nugget8Taken);        [ update inventory with correct amount of gold        call(lgc.AdjustGold);        }      }    else      {      [ must be near lower nugget pile            [ if nuggets are uncovered and still there      if (Nugget8Status == NUGGET_FOUND)        {        [ get the gold!        print.at("Ya reach out and grab the gold nuggets!", 2, 26, 10);        [ remove nuggets froms screen        erase(oNuggets2);        [ if gold amount is less than 110        if (GoldIndex < 110)          {          [ get two units of gold           GoldIndex  += 2;          }        else          {          [ otherwise get one unit of gold          GoldIndex  += 1;          }        Nugget8Status = NUGGET_GONE;        [ update inventory with correct amount of gold        call(lgc.AdjustGold);        }      else        {        print.at("There's no gold in sight right here.", 2, 26, 10);        }      }    }  else    {    [ here, there are two different messages for the 'if'    [ statement        [ if both nugget piles have been taken    if (isset(Nugget8Taken) &&         Nugget8Status != NUGGET_FOUND)      {      print.at("There's no gold in sight right here.", 2, 26, 10);      }    else      {      print.at("Ya can't reach any gold from here.", 2, 26, 10);      }    }  }  [ use pickif ((said("pick") ||     said("pick", "gold") ||     said("use", "pick") ||     said("swing", "pick")))  {  [ if Jerrod has the pick  if (has("Pick"))    {    [ if Jerrod is climbing or falling    if ((isset(fClimbing) || isset(fFalling)))      {      [ can't dig while climbing or falling      if (isset(fClimbing))        {        print.at("Ya can't do that while yer climbin'!", 2, 26, 10);        }      if (isset(fFalling))        {        print.at("That's impossible right now!", 2, 26, 10);        }      }    else      {      [ if touching an alarm line       if (isset(egoHitSpecial))        {        [ this is an area where Jerrod can dig for gold        set.view(ego, vw.TunnelDigging);        [ start timer        vDigTimer = 1;        [ begin at first cel        set.cel(ego, 0);        stop.motion(ego);        [ allow ego object to cycle when not moving        set(CycleAtRest);        [ start digging        start.cycling(ego);        }      else        {        print.at("You're close to a likely spot. Try that nearby.", 2, 26, 10);        }      }    }  else    {    print.at("Ya don't have a pick.", 2, 26, 10);    }  }  [ look ladderif (said("examine", "ladder"))  {  [ if Jerrod has a lit lantern or lit match  if ((isset(LanternLit) || isset(MatchLit)))    {    [ if close to the ladder    if (posn(ego, 42, 0, 76, 167))      {      print.at("It's just a wooden ladder!", 2, 26, 10);      }    else      {      print.at("There's no ladder in sight right here.", 2, 26, 10);      }    }  else    {    print.at("It's too dern dark in here to see!", 2, 26, 10);    }  }  Done:[ call tunnel logic to run code common to all tunnelscall(lgc.Tunnels);return();[ **************************************[ MESSAGES[ **************************************#message 1 "The mine walls are rough and ragged."#message 13 "Ya can't do that while yer climbin'!"#message 14 "You're close to a likely spot. Try that nearby."#message 15 "Ya don't have a pick."#message 16 "That's impossible right now!"#message 17 "It's too dern dark in here to see!"#message 20 "Nothin'!"#message 25 "Just look at that gold glitter!"#message 26 "Ya struck gold!"#message 28 "Ya can't reach any gold from here."#message 29 "Ya notice a mine shaft to yer left."#message 30 "The shaft to yer left is difficult to see."#message 31 "Ya reach out and grab the gold nuggets!"#message 32 "Right here, ya notice nothin' unusual about the shaft."#message 47 "There's no gold in sight right here."#message 80 "There's no ladder in sight right here."#message 81 "It's just a wooden ladder!"