[***********************************************************[[ rm.ColomaNorth[[ This is the north edge of Coloma. There are a couple [ workers in this room that Jerrod can observe.[[***********************************************************[ **************************************[ LOCAL DEFINES[ **************************************#define oWorker1                     o1#define oWorker2                     o2#define vHammerTimer               v220#define vTmpX                      v221#define vTmpY                      v222#define vWorker1Status             v223#define vWorker2Status             v224#define vCelNum                    v225#define fMovingRight               f220#define fOnRight                   f221#define fWorker2Moved              f222#define fSndDone                   f223[ **************************************[ FIRST CYCLE ONLY[ **************************************if (isset(newRoom))  {  [ load the mule logic  load.logics(lgc.Mule);    [ load the current room picture  load.pic(currentRoom);    [ load views used in the room  load.view(vw.JerrodCA);  load.view(vw.ColomaArt);  load.view(vw.Sailor2);    [ load sound used in the room  load.sound(s.Hammer);    [ draw the current roomp picture  draw.pic(currentRoom);    [ add a sawhorse  add.to.pic(vw.ColomaArt, 2, 0, 109, 83, 0, 4);    [ set horizon  set.horizon(83);    [ worker #2 in building  animate.obj(oWorker2);  set.view(oWorker2, vw.Sailor2);  [ make sure he doesn't bump into horizon  ignore.horizon(oWorker2);  [ choose a random starting position  random(0, 1, vWorker2Status);  if (vWorker2Status == 0)    {    [ start on right side    set(fOnRight);    position(oWorker2, 72, 76);    }  else    {    [ start on left side    position(oWorker2, 50, 76);    }  draw(oWorker2);    [ worker #1 on roof, hammering away  animate.obj(oWorker1);  set.view(oWorker1, vw.ColomaArt);  [ choose a random facing  random(0, 1, vTmpX);  set.loop.v(oWorker1, vTmpX);  set.cel(oWorker1, 0);  set.priority(oWorker1, 11);  [ ignore the horizon  ignore.horizon(oWorker1);  [ pick a random position on the roof  random(30, 83, vTmpX);  vTmpY = 44;  position.v(oWorker1, vTmpX, vTmpY);  draw(oWorker1);  [ worker is currently resting  stop.cycling(oWorker1);  [ but ready to start hammering  vWorker1Status = 0;    [ Jerrod, in normal California attire  animate.obj(ego);  set.view(ego, vw.JerrodCA);  draw(ego);    [ if Jerrod has a mule  if ((has(LazyMule) || has("James' ol' mule")))    {    [ do mule initialization steps    call(lgc.Mule);    }      [ now show the picture  show.pic();    [ not necessary to reset this flag; AGI resets it  [ automatically  reset(newRoom);    [ OK to ignore horizon, but not necessary, since Jerrod is  [ blocked from getting there by control lines  ignore.horizon(ego);  }  [ if worker #2 is due to start movingif (vWorker2Status < 100)  {  [ random chance he moves  random(10, 80, vWorker2Status);  [ one in 70 chance  if (vWorker2Status == 77)    {    [ set status to 100 while he's moving    vWorker2Status = 100;        [ if he's on the right    if (isset(fOnRight))      {      [ move him to left      move.obj(oWorker2, 50, 76, 1, fWorker2Moved);      reset(fOnRight);      }    else      {      [ if on left, move to right      move.obj(oWorker2, 72, 76, 1, fWorker2Moved);      set(fOnRight);      }    }  }  [ when worker #2 is done movingif (isset(fWorker2Moved))  {  [ reset the flag  reset(fWorker2Moved);  [ change status so he is free to move again  vWorker2Status = 0;  }  [ if worker #1 is ready to start hammeringif (vWorker1Status == 0)  {  [ increment timer  ++vHammerTimer;  [ after three cycles  if (vHammerTimer == 3)    {    [ reset timer    vHammerTimer = 0;    [ worker #1 begins hammering    vWorker1Status = 1;    set.cel(oWorker1, 0);    start.cycling(oWorker1);    }  }  [ while worker #1 is hammeringif (vWorker1Status == 1)  {  [ increment timer  ++vHammerTimer;  [ use cel value to time the playing of the hammer sound  current.cel(oWorker1, vCelNum);  [ when hammer hits nail  if (vCelNum == 2)    {    [ play sound    sound(s.Hammer, fSndDone);    }      [ after seven cycles  if (vHammerTimer == 7)    {    [ reset timer    vHammerTimer = 0;    [ worker #1 stops hammering    vWorker1Status = 2;    stop.cycling(oWorker1);    }  }  [ when worker #1 is not hammeringif (vWorker1Status == 2)  {  [ increment timer  ++vHammerTimer;  [ after two cycles  if (vHammerTimer == 2)    {    [ reset timer and status to start another cycle    vHammerTimer = 0;    vWorker1Status = 0;    [ get the worker's current position    get.posn(oWorker1, vTmpX, vTmpY);    [ if at left edge of roof    if (vTmpX == 30)      {      [ worker #1 will move to the right      set(fMovingRight);      }    [ if at right edge of roof    if (vTmpX == 83)      {      [ worker #1 will move to the left      reset(fMovingRight);      }          [ if movign to the right    if (isset(fMovingRight))      {      [ move one pixel to right      vTmpX = 1;      vTmpY = 0;      reposition(oWorker1, vTmpX, vTmpY);      }    else      {      [ otherwise move one pixel left      vTmpX = -1; [ 255;      vTmpY = 0;      reposition(oWorker1, vTmpX, vTmpY);      }    }  }  [ **************************************[ PROCESS PLAYER INPUT[ **************************************[ if player hasn't provided input no need to do said testsif (!isset(haveInput))  {  goto(CheckExits);  }  [ look around/lookif ((said("examine", "around") || said("examine")))  {  print("There's a building under construction on Main Street.");  }  [ look grassif (said("examine", "grass"))  {  print("This is just wild grass.");  }  [ look treeif (said("examine", "forest"))  {  print("This is just one of the mighty trees found in these parts.");  }  [ look rockif (said("examine", "rock"))  {  print("This is just another rock.");  }  [ look riverif ((said("examine", "creek") ||     said("examine", "water") ||     said("examine", "american", "creek")))  {  print("The American River flows on the north edge of town.");  }  [ look across riverif ((said("examine", "across") ||     said("examine", "across", "creek") ||     said("examine", "across", "water") ||     said("examine", "across", "american", "creek")))  {  print("The wilderness on the other side of the river is the same as on this "        "side.");  }  [ look roadif ((said("examine", "path") ||     said("examine", "main", "path") ||     said("examine", "main")))  {  print("Main Street is behind the hotel.");  }  [ look buildingif ((said("examine", "building") ||     said("examine", "home") ||     said("examine", "church") ||     said("examine", "shop")))  {  print("Of all the buildings in town, the hotel is the most preferred.");  }  [ look hotelif ((said("examine", "hotel") ||     said("examine", "green", "pasture", "hotel") ||     said("examine", "green", "pasture") ||     said("examine", "coloma") ||     said("examine", "city")))  {  print("The Green Pastures Hotel is the main attraction in Coloma.");  }  [ look bushif (said("examine", "bush"))  {  print("This is a typical California bush.");  }  [ look at saw horseif ((said("examine", "looked at", "horse") ||     said("examine", "horse") ||     said("examine", "sawhorse")))  {  print("A sawhorse is sure useful fer a construction worker!");  }  [ look stumpif ((said("examine", "stump") || said("examine", "forest", "stump")))  {  [ if close to the stumps  if (posn(ego, 40, 138, 90, 167))    {    print("These were once mighty oaks!");    }  else    {    print("There are a couple of tree stumps on the south side of Main.");    }  }  [ look sidewalk/look boardwalkif ((said("examine", "sidewalk") || said("examine", "boardwalk")))  {  print("A boardwalk lines both sides of Main Street.");  }  [ look rail/look fenceif ((said("examine", "rail") || said("examine", "fence")))  {  print("A fence is nailed to the boardwalk.");  }  [ look tentif (said("examine", "tent"))  {  print("This miner decided to pitch his tent right on Main Street!");  }  [ look in tent/enter tentif ((said("examine", "in", "tent") || said("enter", "tent")))  {  print("There's nothin' of interest in the tent.");  }  [ look man/look workerif ((said("examine", "boy") || said("examine", "worker")))  {  [ if close to the door of the building  if (posn(ego, 40, 66, 89, 129))    {    print("This man is lucky to be workin' inside instead of outside in the "          "scorchin' sun!");    }  else    {    print("That man on the roof is a hammerin' fool!");    }  }  [ talk to man/talk to workerif ((said("speak", "boy") ||     said("speak") ||     said("speak", "worker")))  {  [ if close to the building  if (posn(ego, 40, 66, 89, 91))    {    print("The man inside says, \"Today's my day to work inside. Couldn't have "          "picked a better day to be outta the sun!\"");    }  else    {    print("That hammerin' fool can't hear ya over the poundin' of his hammer!");    }  }  [ use shovel/dig for goldif ((said("use", "shovel") ||     said("dig", "gold") ||     said("dig") ||     said("dig", "hole")))  {  [ if Jerrod has a shovel  if (has("Shovel"))    {    print("Don't dig up the town! Do that somewhere else!!");    }  else    {    print("No shovel, no diggin'!");    }  }  [ use pan/pan for goldif ((said("use", "pan") ||     said("pan", "gold") ||     said("pan")))  {  print("Ya need to be in the water!");  }  [ **************************************[ CHECK FOR AN EXIT CONDITION[ **************************************[ (unlike most other logics, the check for exit condition[ happens LAST in this room)CheckExits:[ if Jerrod has a muleif ((has(LazyMule) || has("James' ol' mule")))  {  [ process mule related commands before checking exits  call(lgc.Mule);  }  if (edgeEgoHit != NOT_HIT)  {  if (edgeEgoHit == LEFT_EDGE)    {    --WildernessX;    new.room(rm.ColomaNW); [ ##LE001##    }  if (edgeEgoHit == RIGHT_EDGE)    {    ++WildernessX;    new.room(rm.ColomaNE); [ ##LE002##    }  }  return();[ **************************************[ MESSAGES[ **************************************#message 1 "There's a building under construction on Main Street."#message 2 "This is just wild grass."#message 3 "This is just one of the mighty trees found in these parts."#message 4 "This is just another rock."#message 5 "The American River flows on the north edge of town."#message 6 "Main Street is behind the hotel."#message 7 "Of all the buildings in town, the hotel is the most preferred."#message 8 "This is a typical California bush."#message 9 "A sawhorse is sure useful fer a construction worker!"#message 10 "These were once mighty oaks!"#message 11 "A boardwalk lines both sides of Main Street."#message 12 "A fence is nailed to the boardwalk."#message 13 "There are a couple of tree stumps on the south side of Main."#message 14 "There's nothin' of interest in the tent."#message 15 "This miner decided to pitch his tent right on Main Street!"#message 16 "This man is lucky to be workin' inside instead of outside in the scorchin' sun!"#message 17 "That man on the roof is a hammerin' fool!"#message 18 "The man inside says, \"Today's my day to work inside. Couldn't have picked a better day to be outta the sun!\""#message 19 "That hammerin' fool can't hear ya over the poundin' of his hammer!"#message 20 "The Green Pastures Hotel is the main attraction in Coloma."#message 21 "The wilderness on the other side of the river is the same as on this side."#message 40 "Don't dig up the town! Do that somewhere else!!"#message 41 "No shovel, no diggin'!"#message 42 "Ya need to be in the water!"