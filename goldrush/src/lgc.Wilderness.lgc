[***********************************************************[[ lgc.Wilderness[[ This logic creates the random wilderness scenes as Jerrod[ moves way from Sutters Fort. The wilderness area is[ modeled as a grid, with each room's horizontal and[ vertical distance from Sutter's Fort given in miles. The[ American River acts as the northern edge of the wilderness[ area, and the Sacramento River is the western edge. [ depending on Jerrod's location in the grid, he might [ encounter other prospectors or bandits who will rob him of[ all his gold.[[***********************************************************[ **************************************[ LOCAL DEFINES[ **************************************#define oProspector                  o1#define oBandit1                     o2#define oBandit2                     o3#define vRandomPic                 v220#define vOverhangPic               v221#define vFrontTree1Pic             v222#define vFrontTree2Pic             v223#define vFrontTreeCount            v224#define vMidTree1Pic               v225#define vMidTree2Pic               v226#define vMidTree3Pic               v227#define vMidTree4Pic               v228#define vBackTree1Pic              v229#define vBackTree2Pic              v230#define vBackTree3Pic              v231#define vBackTree4Pic              v232#define vMidTreeCount              v233#define vBackTreeCount             v234#define vBushCount                 v235#define vGoldDensity               v236#define vGoldFound                 v237#define vDigTimer                  v238#define vDigStatus                 v239#define vHolesDug                  v240#define vProspectorChance          v241#define vDistance                  v242#define vRobberyStatus             v243#define vRobTimer                  v244#define fTreeAdded                 f220[ f221 is not used#define fBushAdded                 f222#define fSndDone                   f223#define fCaughtB1                  f224#define fCaughtB2                  f225#define fBanditWarning             f226#define fDoneDying                 f227#define fBanditsLeaving            f228#define fEffectDone                f229[ **************************************[ FIRST CYCLE ONLY[ **************************************if (isset(newRoom))  {  [ if Jerrod has been to a few rooms since bandits last  [ robbed Jerrod  if (BanditStatus == 102)    {    [ reset the status so he can get robbed again    BanditStatus = 0;    [ bandits are not present anymore    reset(BanditsPresent);    }      [ if Jerrod is in the zone where bandits are, and he  [ doesn't have the mule, and he has something to steal,   [ and he hasn't been robbed recently  if (WildernessX > 12 &&       WildernessX < 35 &&       WildernessY > 0 &&       WildernessY < 14 &&       !has("James' ol' mule") &&       !has(LazyMule) &&       GoldIndex > 59 &&       BanditStatus < 100)    {    [ random chance he's gonna get robbed    random(0, 8, BanditStatus);    [ one in 9 chance    if (BanditStatus == 7)      {      [ set status to show bandits are on the way      BanditStatus = 99;      [ and also set the flag indicating they are here now      set(BanditsPresent);      }    }      [ if bandits are now present  if (isset(BanditsPresent))    {    [ increment status; this prevents more bandits until    [ Jerrod moves into two more rooms after he gets robbed    ++BanditStatus;    }    [ grid showing gold density and prominent locations in the[ Sacramento/Sutters Fort area:[ S = Sutters Fort[ C = Coloma[ J = Jake's cabin[ gold density: likelihood of Jerrod finding gold by[               panning or digging[ - = 0 (no gold)[ + = 1 (small amount of gold)[ x = 2 ( medium amount of gold)[ # = 3 ( large amount of gold)[ @ = 4 ( most gold)[ R = robber area: inside these borders, there is a chance[                  that bandits will steal Jerrod's gold[ zero density continues to bottom and right edges (255)[      0         1         2         3         4         5         6 [      01234567890123456789012345678901234567890123456789012345678901[                   RRRRRRRRRRRRRRRRRRRRRRR [ 00   S--------++xx##@@CCCCCC@####xxxxxxxxxxxx+++++++++++++++++++++-[  1 R ---------++xx##@@@@@CCC@####xxxxxxxxxxxx+++++++++++++++++++++-[  2 R ---------++xx##@@@@@CCC@####xxxxxxxxxxxx+++++++++++++++++++++-[  3 R ---------++xx##@@@@@@@@@####xxxxxxxxxxxx+++++++++++++++++++++-[  4 R ---------++xx###############xxxxxxxxxxxx+++++++++++++++++++++-[  5 R ---------++xx#########@@@@@@@@@###xxxxxx+++++++++++++++++++++-[  6 R ---------++xx#########@@@@@@@@@###xxxxxx+++++++++++++++++++++-[  7 R ---------++xxxxxxx####@@@@@J@@@###xxxxxx+++++++++++++++++++++-[  8 R ---------++xxxxxxx####@@@@@@@@@###xxxxxx+++++++++++++++++++++-[  9 R ---------++xxxxxxx####@@@@@@@@@###xxxxxx+++++++++++++++++++++-[ 10 R ---------++xxxxxxx################xxxxxx+++++++++++++++++++++-[ 11 R ---------++xxxxxxx################xxxxxx+++++++++++++++++++++-[ 12   ---------+++++++xxxxxxxxxxxxxxxxxxxxxxxx+++++++++++++++++++++-[ 13   ---------+++++++xxxxxxxxxxxxxxxxxxxxxxxx+++++++++++++++++++++-[ 14   ---------+++++++xxxxxxxxxxxxxxxxxxxxxxxx+++++++++++++++++++++-[ 15   ---------+++++++xxxxxxxxxxxxxxxxxxxxxxxx+++++++++++++++++++++-[ 16   ---------+++++++xxxxxxxxxxxxxxxxxxxxxxxx+++++++++++++++++++++-[ 17   ---------+++++++xxxxxxxxxxxxxxxxxxxxxxxx+++++++++++++++++++++-[ 18   ---------++++++++++++++++++++++++++++++++++++++++++++++++++++-[ 19   ---------++++++++++++++++++++++++++++++++++++++++++++++++++++-[ 20   ---------++++++++++++++++++++++++++++++++++++++++++++++++++++-[ 21   ---------++++++++++++++++++++++++++++++++++++++++++++++++++++-[ 22   ---------++++++++++++++++++++++++++++++++++++++++++++++++++++-[ 23   ---------++++++++++++++++++++++++++++++++++++++++++++++++++++-[ 24   ---------++++++++++++++++++++++++++++++++++++++++++++++++++++-[ 25   ---------++++++++++++++++++++++++++++++++++++++++++++++++++++-[ 26   ---------++++++++++++++++++++++++++++++++++++++++++++++++++++-[ 27   ---------++++++++++++++++++++++++++++++++++++++++++++++++++++-[ 28   ---------++++++++++++++++++++++++++++++++++++++++++++++++++++-[ 29   ---------++++++++++++++++++++++++++++++++++++++++++++++++++++-[ 30   ---------++++++++++++++++++++++++++++++++++++++++++++++++++++-[ 31   --------------------------------------------------------------  [ depending on location, set the 'gold density' i.e. the  [ more gold in a room, the higher the chance that Jerrod  [ will encounter another prosepector, or find gold while  [ digging  if (WildernessX > 8 &&       WildernessX < 61 &&       WildernessY < 31)    {    if (WildernessX > 8 &&         WildernessX < 11 &&         WildernessY < 12)      {      vGoldDensity = 1;      }    if (WildernessX > 8 &&         WildernessX < 16 &&         WildernessY > 11 &&         WildernessY < 18)      {      vGoldDensity = 1;      }    if (WildernessX > 8 &&         WildernessX < 61 &&         WildernessY > 17 &&         WildernessY < 31)      {      vGoldDensity = 1;      }    if (WildernessX > 39 &&         WildernessX < 61 &&         WildernessY < 18)      {      vGoldDensity = 1;      }    if (WildernessX > 12 &&         WildernessX < 40 &&         WildernessY < 12)      {      vGoldDensity = 3;      }    if (WildernessX > 10 &&         WildernessX < 13 &&         WildernessY < 12)      {      vGoldDensity = 2;      }    if (WildernessX > 12 &&         WildernessX < 18 &&         WildernessY > 6 &&         WildernessY < 12)      {      vGoldDensity = 2;      }    if (WildernessX > 15 &&         WildernessX < 40 &&         WildernessY > 11 &&         WildernessY < 18)      {      vGoldDensity = 2;      }    if (WildernessX > 33 &&         WildernessX < 40 &&         WildernessY < 12)      {      vGoldDensity = 2;      }    if (WildernessX > 27 &&         WildernessX < 34 &&         WildernessY < 5)      {      vGoldDensity = 2;      }    if (WildernessX > 14 &&         WildernessX < 24 &&         WildernessY < 4)      {      vGoldDensity = 4;      }    if (WildernessX > 21 &&         WildernessX < 31 &&         WildernessY > 4 &&         WildernessY < 10)      {      vGoldDensity = 4;      }    }    ChooseBkgd:  [ choose a random wilderness background  random(127, 132, vRandomPic);  [ if same picture used in previous room  if (vRandomPic == PrevWildernessPic)    {    [ try again    goto(ChooseBkgd);    }      [ save this background as previous  PrevWildernessPic = vRandomPic;    [ load the chosen background  load.pic(vRandomPic);    [ now add trees based on tree count start with trees that  [ are at back of room    [ randomly decide how many trees to add  random(0, 8, vBackTreeCount);    [ if bandits will be in the room  if (isset(BanditsPresent))    {    [ force treecount to zero    vBackTreeCount = 0;    }      [ divide chosen count by 2, rounded down ( this would be  [ much easier and simpler to just do vBackTreeCount /= 2;)  if ((vBackTreeCount == 0 || vBackTreeCount == 1))    {    vBackTreeCount = 0;    }  if ((vBackTreeCount == 2 || vBackTreeCount == 3))    {    vBackTreeCount = 1;    }  if ((vBackTreeCount == 4 || vBackTreeCount == 5))    {    vBackTreeCount = 2;    }  if ((vBackTreeCount == 6 || vBackTreeCount == 7))    {    vBackTreeCount = 3;    }  if (vBackTreeCount == 8)    {    vBackTreeCount = 4;    }      [ treecount = 1,2 or 3:  if (vBackTreeCount > 0 && vBackTreeCount != 4)    {    [ choose a random tree from the back trees    random(163, 166, vBackTree1Pic);    [ set flag to show a back tree was added    set(fTreeAdded);    [ load the tree overlay    load.pic(vBackTree1Pic);    }      [ tree count = 2 or 3  if (vBackTreeCount > 1 && vBackTreeCount != 4)    {BackTreeTwo:    [ choose a second, different back tree    random(163, 166, vBackTree2Pic);    if (vBackTree2Pic == vBackTree1Pic)      {      goto(BackTreeTwo);      }    [ set flag to show a back tree was added    set(fTreeAdded);    [ load the tree overlay    load.pic(vBackTree2Pic);    }      [ treecount = 3  if (vBackTreeCount > 2 && vBackTreeCount != 4)    {BackTreeThree:    random(163, 166, vBackTree3Pic);    if ((vBackTree3Pic == vBackTree1Pic ||         vBackTree3Pic == vBackTree2Pic))      {      goto(BackTreeThree);      }    [ set flag to show a back tree was added    set(fTreeAdded);    [ load the tree overlay    load.pic(vBackTree3Pic);    }      [ treecount = 4  if (vBackTreeCount == 4)    {    [ add all the trees    vBackTree1Pic = ovl.Tree1;    vBackTree2Pic = ovl.Tree2;    vBackTree3Pic = ovl.Tree3;    vBackTree4Pic = ovl.Tree4;    [ set flag to show trees added    set(fTreeAdded);    [ load the tree overlays    load.pic(vBackTree1Pic);    load.pic(vBackTree2Pic);    load.pic(vBackTree3Pic);    load.pic(vBackTree4Pic);    }      [ next add trees that are in middle (Y value) of the room    [ randomly determine number of trees to add  random(0, 8, vMidTreeCount);  [ if bandits present  if (isset(BanditsPresent))    {    [ don't add any trees    vMidTreeCount = 0;    }      [ divide chosen count by 2, rounded down ( this would be  [ much easier and simpler to just do vMidTreeCount /= 2;)  if ((vMidTreeCount == 0 || vMidTreeCount == 1))    {    vMidTreeCount = 0;    }  if ((vMidTreeCount == 2 || vMidTreeCount == 3))    {    vMidTreeCount = 1;    }  if ((vMidTreeCount == 4 || vMidTreeCount == 5))    {    vMidTreeCount = 2;    }  if ((vMidTreeCount == 6 || vMidTreeCount == 7))    {    vMidTreeCount = 3;    }  if (vMidTreeCount == 8)    {    vMidTreeCount = 4;    }      [ treecount = 1,2 or 3  if (vMidTreeCount > 0 && vMidTreeCount != 4)    {    [ choose a random tree image    random(167, 170, vMidTree1Pic);    [ set flag to show a tree was added    set(fTreeAdded);    [ load the tree overlay    load.pic(vMidTree1Pic);    }      [ treecount = 2 or 3  if (vMidTreeCount > 1 && vMidTreeCount != 4)    {MidTreeTwo:    [ choose another random tree image    random(167, 170, vMidTree2Pic);    [ if already chosen    if (vMidTree2Pic == vMidTree1Pic)      {      [ try again      goto(MidTreeTwo);      }    [ set flag to show a tree was added    set(fTreeAdded);    [ load the tree overlay    load.pic(vMidTree2Pic);    }      [ treecount = 3  if (vMidTreeCount > 2 && vMidTreeCount != 4)    {MidTreeThree:    [ choose a third, different image    random(167, 170, vMidTree3Pic);    [ if already chosen    if ((vMidTree3Pic == vMidTree1Pic ||         vMidTree3Pic == vMidTree2Pic))      {      [ try again      goto(MidTreeThree);      }    [ set flag to show a tree was added    set(fTreeAdded);    [ load the overlay    load.pic(vMidTree3Pic);    }    [ treecount = 4  if (vMidTreeCount == 4)    {    [ add them all    vMidTree1Pic = ovl.Tree5;    vMidTree2Pic = ovl.Tree6;    vMidTree3Pic = ovl.Tree7;    vMidTree4Pic = ovl.Tree8;    [ set flag to show a tree was added    set(fTreeAdded);    [ load all the tree overlays    load.pic(vMidTree1Pic);    load.pic(vMidTree2Pic);    load.pic(vMidTree3Pic);    load.pic(vMidTree4Pic);    }      [ next, add trees that are in the foreground    [ randomly determine number of trees to add (for trees in  [ front, no more than two will ever be added)  random(0, 2, vFrontTreeCount);    [ if Jake's mule is leading Jerrod to Jake's cabin  if ((isset(MuleLeadingWay) ||       MuleFollowCounter > 0))    {    [ don't show any trees in front    vFrontTreeCount = 0;    }      [ if no trees in front  if (vFrontTreeCount == 0)    {    [ reset the OldTree values; in next     [ room, all four trees are available    OldFrontTree1 = 0;    OldFrontTree2 = 0;    }      [ tree count = 1 or 2  if (vFrontTreeCount > 0)    {FrontTreeOne:    [ randomly choose a tree    random(171, 174, vFrontTree1Pic);    [ if it matches a tree from the previous room    if ((vFrontTree1Pic == OldFrontTree1 ||         vFrontTree1Pic == OldFrontTree2))      {      [ try again      goto(FrontTreeOne);      }    [ set flag showing a tree was added    set(fTreeAdded);    [ load the tree overlay    load.pic(vFrontTree1Pic);    }      [ treecount = 2  if (vFrontTreeCount == 2)    {FrontTreeTwo:    [ randomly load a tree    random(171, 174, vFrontTree2Pic);    [ if it matches tree1, or a tree from previous room    if ((vFrontTree2Pic == OldFrontTree2 ||         vFrontTree2Pic == OldFrontTree1 ||         vFrontTree2Pic == vFrontTree1Pic))      {      [ try again      goto(FrontTreeTwo);      }    [ set flag to show a tree was added    set(fTreeAdded);    [ load the tree overlay    load.pic(vFrontTree2Pic);    }      [ save the tree numbers so they won't show up in next room  [ (helps the rooms to all look different)  OldFrontTree1 = vFrontTree1Pic;  OldFrontTree2 = vFrontTree2Pic;    [ finally, choose one random 'overhang' image  [ random chance an overhang image will be added  random(0, 6, vFrontTreeCount);    [ one in seven chance  if (vFrontTreeCount > 0)    {OverhangOne:    [ choose a random overhang    random(175, 180, vOverhangPic);    [ if it matches the overhang from previous room    if (vOverhangPic == OldOverhang)      {      [ try again      goto(OverhangOne);      }    [ save the overhang number so it doesn't show up in next    [ room (helps the rooms to all look different)    OldOverhang = vOverhangPic;    [ load the overhang overlay    load.pic(vOverhangPic);    }      [ now build the entire room image    [ first draw the background  draw.pic(vRandomPic);    [ tree #1 gets in the way of Jake's mule, so it only gets  [ added if Jake's mule isn't leading the way to Jerrod's  [ cabin  if (!isset(MuleLeadingWay))    {    [ if any of the selected overlays are ovl.Tree1    if ((vBackTree1Pic == ovl.Tree1 ||         vBackTree2Pic == ovl.Tree1 ||         vBackTree3Pic == ovl.Tree1 ||         vBackTree4Pic == ovl.Tree1))      {      [ add it to the picture      vFrontTreeCount = ovl.Tree1;      overlay.pic(vFrontTreeCount);      }    }      [ for other back trees it doesn't matter what the   [ mule is doing    [ if any of the selected overlays are ovl.Tree2  if ((vBackTree1Pic == ovl.Tree2 ||       vBackTree2Pic == ovl.Tree2 ||       vBackTree3Pic == ovl.Tree2 ||       vBackTree4Pic == ovl.Tree2))    {    [ add it to the picture    vFrontTreeCount = ovl.Tree2;    overlay.pic(vFrontTreeCount);    }      [ if any of the selected overlays are ovl.Tree3  if ((vBackTree1Pic == ovl.Tree3 ||       vBackTree2Pic == ovl.Tree3 ||       vBackTree3Pic == ovl.Tree3 ||       vBackTree4Pic == ovl.Tree3))    {    [ add it to the picture    vFrontTreeCount = ovl.Tree3;    overlay.pic(vFrontTreeCount);    }  [ if any of the selected overlays are ovl.Tree4  if ((vBackTree1Pic == ovl.Tree4 ||       vBackTree2Pic == ovl.Tree4 ||       vBackTree3Pic == ovl.Tree4 ||       vBackTree4Pic == ovl.Tree4))    {    [ add it to the picture    vFrontTreeCount = ovl.Tree4;    overlay.pic(vFrontTreeCount);    }      [ if any of the selected overlays are ovl.Tree5  if ((vMidTree1Pic == ovl.Tree5 ||       vMidTree2Pic == ovl.Tree5 ||       vMidTree3Pic == ovl.Tree5 ||       vMidTree4Pic == ovl.Tree5))    {    [ add it to the picture    vFrontTreeCount = ovl.Tree5;    overlay.pic(vFrontTreeCount);    }  [ if any of the selected overlays are ovl.Tree6  if ((vMidTree1Pic == ovl.Tree6 ||       vMidTree2Pic == ovl.Tree6 ||       vMidTree3Pic == ovl.Tree6 ||       vMidTree4Pic == ovl.Tree6))    {    [ add it to the picture    vFrontTreeCount = ovl.Tree6;    overlay.pic(vFrontTreeCount);    }      [ if any of the selected overlays are ovl.Tree7  if ((vMidTree1Pic == ovl.Tree7 ||       vMidTree2Pic == ovl.Tree7 ||       vMidTree3Pic == ovl.Tree7 ||       vMidTree4Pic == ovl.Tree7))    {    [ add it to the picture    vFrontTreeCount = ovl.Tree7;    overlay.pic(vFrontTreeCount);    }      [ if any of the selected overlays are ovl.Tree8  if ((vMidTree1Pic == ovl.Tree8 ||       vMidTree2Pic == ovl.Tree8 ||       vMidTree3Pic == ovl.Tree8 ||       vMidTree4Pic == ovl.Tree8))    {    [ add it to the picture    vFrontTreeCount = ovl.Tree8;    overlay.pic(vFrontTreeCount);    }  [ front trees have to be drawn in the correct order    [ if front tree#1 is less than #2  if (vFrontTree1Pic < vFrontTree2Pic)    {    [ draw tree #1 first (unless not used)    if (vFrontTree1Pic != 0)      {      overlay.pic(vFrontTree1Pic);      }    if (vFrontTree2Pic != 0)      {      overlay.pic(vFrontTree2Pic);      }    }  else    {    [ front tree#2 is less than tree #1 so draw tree #2    [ first (unless not used)    if (vFrontTree2Pic != 0)      {      overlay.pic(vFrontTree2Pic);      }    if (vFrontTree1Pic != 0)      {      overlay.pic(vFrontTree1Pic);      }    }      [ if there is an overhang  if (vOverhangPic != 0)    {    [ add it to picture    overlay.pic(vOverhangPic);    }      [ discard the room picture (this also dumps all the  [ loaded overlays- BE CAREFUL when doing things like  [ this!)  discard.pic(vRandomPic);    [ load views needed in the room    [ if Jerrod has a mule  if ((has("James' ol' mule") || has(LazyMule)))    {    [ load mule logic    load.logics(lgc.Mule);    }      [ Jerrod uses his normal California attire  load.view(vw.JerrodCA);    [ if bandits are present, Jerrod might get killed  if (isset(BanditsPresent))    {    load.view(vw.DyingJerrodCA);    }      [ rocks and bushes  load.view(vw.WildernessArt);    [ if in a room where there might be another prospector  [ (but no bandits)  if (vGoldDensity > 0 && !isset(BanditsPresent))    {    load.view(vw.Prospectors);    }    [ load view of Jerrod digging for gold  load.view(vw.JerrodDigging);    [ if bandits are present  if (isset(BanditsPresent))    {    [ load bandit views    load.view(vw.Bandit1);    load.view(vw.Bandit2);    }      [ load sounds used in the room    [ if bandits are present  if (isset(BanditsPresent))    {    [ these sounds are used in bandit scenes    load.sound(m.Death);    load.sound(m.Chase);    load.sound(s.Gunshot);    }      [ in case Jerrod finds gold, load the   [ score points sound  load.sound(m.FoundGold);  if (has("James' ol' mule"))    {    load.sound(m.FollowMule);    }      [ the variables used to load the tree overlays aren't  [ needed for that purpose anymore, so they are redefined  [ here to add random rocks and bushes to the background    #define vArtView        v220  [ override vRandomPic  #define vArtLoop        v224  [ override vFrontTreeCount  #define vArtCel         v233  [ override vMidTreeCount  #define vArtX           v234  [ override vBackTreeCount  #define vArtY           v221  [ override vOverhangPic  #define vArtPri         v229  [ override vBackTree1Pic  #define vArtMargin      v230  [ override vBackTree2Pic    [ use the wilderness art view   vArtView = vw.WildernessArt;    [ begin by adding three rocks    [ let priority be set based on position  vArtPri = 0;  [ include the control box  vArtMargin = 0;    [ Rock #1: pick a random cel  random(0, 8, vArtCel);    [ use loop variable, pick random X value  random(1, 2, vArtLoop);  if (vArtLoop == 1)    {    random(0, 57, vArtX);    }  if (vArtLoop == 2)    {    random(100, 139, vArtX);    }      [ use loop variable, pick random Y value  random(1, 7, vArtLoop);  if (vArtLoop == 1)    {    vArtY = 85;    }  if (vArtLoop == 2)    {    vArtY = 97;    }  if (vArtLoop == 3)    {    vArtY = 109;    }  if (vArtLoop == 4)    {    vArtY = 121;    }  if (vArtLoop == 5)    {    vArtY = 133;    }  if (vArtLoop == 6)    {    vArtY = 145;    }  if (vArtLoop == 7)    {    vArtY = 157;    }      [ set loop to zero (adds a rock)  vArtLoop = 0;    [ add it to picture  add.to.pic.v(vArtView, vArtLoop, vArtCel, vArtX, vArtY, vArtPri, vArtMargin);    [ Rock#2: pick a random cel  random(0, 8, vArtCel);    [ use loop variable, pick a random X value  random(1, 2, vArtLoop);  if (vArtLoop == 1)    {    random(0, 57, vArtX);    }  if (vArtLoop == 2)    {    random(100, 139, vArtX);    }      [ use loop variable, pick a random Y value  random(1, 7, vArtLoop);  if (vArtLoop == 1)    {    vArtY = 85;    }  if (vArtLoop == 2)    {    vArtY = 97;    }  if (vArtLoop == 3)    {    vArtY = 109;    }  if (vArtLoop == 4)    {    vArtY = 121;    }  if (vArtLoop == 5)    {    vArtY = 133;    }  if (vArtLoop == 6)    {    vArtY = 145;    }  if (vArtLoop == 7)    {    vArtY = 157;    }    [set loop to zero (adds a rock)  vArtLoop = 0;    [ add it to picture  add.to.pic.v(vArtView, vArtLoop, vArtCel, vArtX, vArtY, vArtPri, vArtMargin);    [ Rock #3: pick a random cel  random(0, 8, vArtCel);    [ use loop variable, choose random X value  random(1, 2, vArtLoop);  if (vArtLoop == 1)    {    random(0, 57, vArtX);    }  if (vArtLoop == 2)    {    random(100, 139, vArtX);    }      [ use loop variable, choose random Y variable  random(1, 7, vArtLoop);  if (vArtLoop == 1)    {    vArtY = 85;    }  if (vArtLoop == 2)    {    vArtY = 97;    }  if (vArtLoop == 3)    {    vArtY = 109;    }  if (vArtLoop == 4)    {    vArtY = 121;    }  if (vArtLoop == 5)    {    vArtY = 133;    }  if (vArtLoop == 6)    {    vArtY = 145;    }  if (vArtLoop == 7)    {    vArtY = 157;    }      [ set loop to zero (adds a rock)  vArtLoop = 0;    [ add it to picture  add.to.pic.v(vArtView, vArtLoop, vArtCel, vArtX, vArtY, vArtPri, vArtMargin);    [ choose a random number of bushes  random(0, 4, vBushCount);    [ if at least one bush  if (vBushCount > 0)    {    [ set flag to show a bush was added to picture    set(fBushAdded);        [ use the wilderness art view    vArtView = 130;        [ let priority be determined by position    vArtPri = 0;    [ include the control box    vArtMargin = 0;        [ Bush #1: choose a random cel    random(0, 6, vArtCel);        [ use loop view to choose random X value    random(1, 2, vArtLoop);    if (vArtLoop == 1)      {      random(0, 47, vArtX);      }    if (vArtLoop == 2)      {      random(100, 129, vArtX);      }          [ use loop value to choose random Y value    random(1, 7, vArtLoop);    if (vArtLoop == 1)      {      vArtY = 85;      }    if (vArtLoop == 2)      {      vArtY = 97;      }    if (vArtLoop == 3)      {      vArtY = 109;      }    if (vArtLoop == 4)      {      vArtY = 121;      }    if (vArtLoop == 5)      {      vArtY = 133;      }    if (vArtLoop == 6)      {      vArtY = 145;      }    if (vArtLoop == 7)      {      vArtY = 157;      }        [ set loop to two (adds a bush)    vArtLoop = 2;        [ add it to the picture    add.to.pic.v(vArtView, vArtLoop, vArtCel, vArtX, vArtY, vArtPri, vArtMargin);    }      [ if two or more bushes  if (vBushCount > 1)    {    [ Bush #2: choose a random cel    random(0, 6, vArtCel);        [ use loop variable to choose random X value    random(1, 2, vArtLoop);    if (vArtLoop == 1)      {      random(0, 47, vArtX);      }    if (vArtLoop == 2)      {      random(100, 129, vArtX);      }          [ use loop variable to choose random Y value    random(1, 7, vArtLoop);    if (vArtLoop == 1)      {      vArtY = 85;      }    if (vArtLoop == 2)      {      vArtY = 97;      }    if (vArtLoop == 3)      {      vArtY = 109;      }    if (vArtLoop == 4)      {      vArtY = 121;      }    if (vArtLoop == 5)      {      vArtY = 133;      }    if (vArtLoop == 6)      {      vArtY = 145;      }    if (vArtLoop == 7)      {      vArtY = 157;      }        [ set loop to 2 (adds a bush)    vArtLoop = 2;        [ add it to the picture    add.to.pic.v(vArtView, vArtLoop, vArtCel, vArtX, vArtY, vArtPri, vArtMargin);    }      [ if at least three bushes added  if (vBushCount > 2)    {    [ Bush #3: choose a random cel    random(0, 6, vArtCel);        [ use loop variable to choose random X value    random(1, 2, vArtLoop);    if (vArtLoop == 1)      {      random(0, 47, vArtX);      }    if (vArtLoop == 2)      {      random(100, 129, vArtX);      }          [ use loop variable to choose a random Y value    random(1, 7, vArtLoop);    if (vArtLoop == 1)      {      vArtY = 85;      }    if (vArtLoop == 2)      {      vArtY = 97;      }    if (vArtLoop == 3)      {      vArtY = 109;      }    if (vArtLoop == 4)      {      vArtY = 121;      }    if (vArtLoop == 5)      {      vArtY = 133;      }    if (vArtLoop == 6)      {      vArtY = 145;      }    if (vArtLoop == 7)      {      vArtY = 157;      }          [ set loop to 2 (adds a rock)    vArtLoop = 2;        [ add it to the picture    add.to.pic.v(vArtView, vArtLoop, vArtCel, vArtX, vArtY, vArtPri, vArtMargin);    }      [ if four bushes added  if (vBushCount > 3)    {    [ Bush #4: choose a random cel    random(0, 6, vArtCel);        [ use loop variable to choose random X value    random(1, 2, vArtLoop);    if (vArtLoop == 1)      {      random(0, 47, vArtX);      }    if (vArtLoop == 2)      {      random(100, 129, vArtX);      }          [ use loop variable to choose random Y value    random(1, 7, vArtLoop);    if (vArtLoop == 1)      {      vArtY = 85;      }    if (vArtLoop == 2)      {      vArtY = 97;      }    if (vArtLoop == 3)      {      vArtY = 109;      }    if (vArtLoop == 4)      {      vArtY = 121;      }    if (vArtLoop == 5)      {      vArtY = 133;      }    if (vArtLoop == 6)      {      vArtY = 145;      }    if (vArtLoop == 7)      {      vArtY = 157;      }          [ set loop to two (adds a bush)    vArtLoop = 2;        [ add it to picture    add.to.pic.v(vArtView, vArtLoop, vMidTreeCount, vArtX, vArtY, vArtPri, vArtMargin);    }      [ horizon is 80 in wilderness rooms  set.horizon(80);    [ if no bandits are present   if (!isset(BanditsPresent))    {    [ a random prospector might show up, depending on gold density    if (vGoldDensity == 1)      {      random(1, 6, vProspectorChance);      }    if (vGoldDensity == 2)      {      random(1, 5, vProspectorChance);      }    if (vGoldDensity == 3)      {      random(1, 3, vProspectorChance);      }    if (vGoldDensity == 4)      {      random(1, 2, vProspectorChance);      }          [ if prospector is due (and James doesn't have a mule)    if (vProspectorChance == 1 &&         !has("James' ol' mule") &&         !has(LazyMule))      {      [ add prospector      animate.obj(oProspector);      set.view(oProspector, vw.Prospectors);      [ pick a random loop      random(0, 3, vProspectorChance);      set.loop.v(oProspector, vProspectorChance);      [ pick a random location      random(3, 145, vFrontTreeCount);      random(80, 160, vProspectorChance);      position.v(oProspector, vFrontTreeCount, vProspectorChance);      [ draw prospector on screen      draw(oProspector);      }    }      [ if bandits are present  if (isset(BanditsPresent))    {    [ add bandit 1    animate.obj(oBandit1);    set.view(oBandit1, vw.Bandit1);    [ choose a random location    random(3, 145, vFrontTreeCount);    random(80, 165, vProspectorChance);    position.v(oBandit1, vFrontTreeCount, vProspectorChance);    [ add bandit to screen    draw(oBandit1);    [ start chasing Jerrod    follow.ego(oBandit1, 13, fCaughtB1);        [ add bandit 2    animate.obj(oBandit2);    set.view(oBandit2, vw.Bandit2);    [ choose random location    random(3, 145, vFrontTreeCount);    random(80, 165, vProspectorChance);    position.v(oBandit2, vFrontTreeCount, vProspectorChance);    [ add bandit to screen    draw(oBandit2);    [ start chasing jerrod    follow.ego(oBandit2, 13, fCaughtB2);    }      [ add Jerrod to the screen with normal California attire  animate.obj(ego);  set.view(ego, vw.JerrodCA);    [ if bandits are present  if (isset(BanditsPresent))    {    [ move ego to this position, instead of his normal    [ position based on previous room    position(ego, 80, 120);    }  draw(ego);    [ if Jerrod has his mule  if ((has(LazyMule) || has("James' ol' mule")))    {    [ add mule to screen    call(lgc.Mule);    }      [ after ALL THAT, finally, show the picture  show.pic();    [ not necessary to reset this flag, AGI resets it  [ automatically  reset(newRoom);    [ clear the custom status line  clear.lines(24, 24, BLACK);    [ force custom status line update  set(UpdateStatus);    [ if bandits present, play the chase music  if (isset(BanditsPresent))    {    sound(m.Chase, fSndDone);    }  }  [ **************************************[ EVERY CYCLE[ **************************************[ if custom status line needs to be drawnif (isset(UpdateStatus))  {  [ display the custom status line  display(24, 0, "Miles from Sutter's Fort: E: %v111 S: %v112");  }  [f chase music endedif (isset(fSndDone))  {  [ start it again  sound(m.Chase, fSndDone);  }  [ if bandit #1 catches Jerrodif (isset(fCaughtB1))  {  [ reset flag  reset(fCaughtB1);    [ advance to next stage  ++vRobberyStatus;    [ Jerrod stops  stop.motion(ego);  egoDir = STOPPED;    [ if bandits haven't spoken yet  if (!isset(fBanditWarning))    {    [ stop the chase music    stop.sound();    reset(fSndDone);    [ bandit gives warning to Jerrod    print.at("\"Don't move a muscle ya slitherin' rich gold man! That is if ya "             "value yer life at all!!\" says the bandit.", 2, 5, 0);    set(fBanditWarning);    }  [ bandit #1 is stopped  stop.cycling(oBandit1);  }  [ if bandit #2 catches Jerrodif (isset(fCaughtB2))  {  [ reset flag  reset(fCaughtB2);    [ advance to next stage  ++vRobberyStatus;    [ Jerrod stops  stop.motion(ego);  egoDir = STOPPED;    [ if bandits haven't spoken yet  if (!isset(fBanditWarning))    {    [ stop the chase music    stop.sound();    reset(fSndDone);    [ bandit gives warning to Jerrod    print.at("\"Don't move a muscle ya slitherin' rich gold man! That is if ya "             "value yer life at all!!\" says the bandit.", 2, 5, 0);    set(fBanditWarning);    }  [ bandit #2 is stopped  stop.cycling(oBandit2);  }  [ when both bandits reach Jerrodif (vRobberyStatus == 2)  {  [ allow Jerrod to move (but it's not advised!)  start.motion(ego);  [ advance to next stage  vRobberyStatus = 3;  }  [ if at robbery stage 3if (vRobberyStatus == 3)  {  [ increment timer  ++vRobTimer;  [ after 20 cycles  if (vRobTimer == 20)    {    [ reset timer    vRobTimer = 0;    [ advance to next status    vRobberyStatus = 4;    print.at("\"Move real slowly now and hand over every last ounce of gold ya "             "got!!\"", 2, 5, 0);    [ take all of Jerrod's gold    set(DropAllGold);    call(lgc.AdjustGold);    }  }  [ if at robbery stage 4if (vRobberyStatus == 4)  {  [ increment timer  ++vRobTimer;  [ after 30 cycles  if (vRobTimer == 30)    {    [ reset timer    vRobTimer = 0;    [ advance to next stage    vRobberyStatus = 5;    [ bandits got their money, and are set to leave    set(fBanditsLeaving);        print.at("\"Yer doin' just fine!!\"", 2, 8, 0);    print.at("\"Now just pretend yer feet are stuck in cement and don't ya move "             "an inch. Ya give us a one minute head start and then yer free to "             "go. If ya move one second sooner, yer dead. Ya got that?\"", 2, 5, 0);    [ reset bandits present flag    reset(BanditsPresent);    [ and reset bandit status    BanditStatus = 0;    [ both bandits wander until they reach a screen edge    start.cycling(oBandit1);    wander(oBandit1);    start.cycling(oBandit2);    wander(oBandit2);    }  }  [ if in robbery stage 5if (vRobberyStatus == 5)  {  [ increment timer  ++vRobTimer;  [ after 250 cycles  if (vRobTimer == 250)    {    [ reset timer    vRobTimer = 0;    [ assume robbers are gone; reset robbery status    vRobberyStatus = 0;    }  }  [ if Jerrod starts moving while being robbed[ or before waiting full amount of timeif (egoDir != STOPPED &&     (vRobberyStatus == 3 ||     vRobberyStatus == 4 ||     vRobberyStatus == 5))  {  [ bad news  print.at("\"I said DON'T MOVE!!!\"", 2, 9, 0);  [ bandits shoot Jerrod  sound(s.Gunshot, fEffectDone);  print.at("BANG!! BANG!!!", 2, 12, 0);  [ robbery is over  vRobberyStatus = 0;  [ Jerrod stops  egoDir = STOPPED;  stop.motion(ego);  [ no more input  prevent.input();  [ show Jerrod dying  set.view(ego, vw.DyingJerrodCA);  [ make sure to start with first cel  set.cel(ego, 0);  [ allow ego object to cycle at rest  set(CycleAtRest);  end.of.loop(ego, fDoneDying);  }  [ when Jerrod is done dyingif (isset(fDoneDying))  {  [ reset flag  reset(fDoneDying);  [ bandits begin wandering  start.cycling(oBandit1);  wander(oBandit1);  start.cycling(oBandit2);  wander(oBandit2);  [ and will leave if they get to an edge  set(fBanditsLeaving);    [ play death sound  sound(m.Death, DoneNoAction);  [ show death message  display(22, 0, "   These bandits mean business!!!");    [ Jerrod is officially dead  set(JerrodIsDead);  }  [ if bandits are leavingif (isset(fBanditsLeaving))  {  [ if bandit #1 hits an edge  if (objHitEdge == 2)    {    [ remove him from screen    erase(oBandit1);    }  [ if bandit #2 hits an edge  if (objHitEdge == 3)    {    [ remove him from screen    erase(oBandit2);    }  }  [ if Jerrod is diggingif (vDigTimer > 0)  {  [ increment dig timer  ++vDigTimer;  }  [ after 15 cycles in stage 1if (vDigTimer == 15 && vDigStatus == 1)  {  [ reset timer  vDigTimer = 1;  [ advance to next stage  vDigStatus = 2;  [ hole is a little deeper  set.loop(ego, 1);  }  [ after 15 cycles in stage 2if (vDigTimer == 15 && vDigStatus == 2)  {  [ reset timer  vDigTimer = 1;  [ advance to next stage  vDigStatus = 3;  [ hole is a little deeper  set.loop(ego, 2);  }  [ after 15 cycles in stage 3if (vDigTimer == 15 && vDigStatus == 3)  {  [ reset timer  vDigTimer = 1;  [ advance to next stage  vDigStatus = 4;  [ hole is even deeper  set.loop(ego, 3);  }  [ after 15 cycles in stage 4if (vDigTimer == 15 && vDigStatus == 4)  {  [ use timer as a view number   vDigTimer = vw.JerrodDigging;  [ use status as loop number and margin value  vDigStatus = 4;  [ use room number as cel number and priority  vRandomPic = 0;  [ add the hole to the scene  add.to.pic.v(vDigTimer, vDigStatus, vRandomPic, EgoX, EgoY, vRandomPic, vDigStatus);    [ turn off timer  vDigTimer = 0;  [ advance to next stage  vDigStatus = 5;  }  [ if at stage 5 (done digging)if (vDigStatus == 5)  {  [ digging sequence is done; reset back to zero  vDigStatus = 0;  [ if already at max points from gold  if (PointsFromGold > 49)    {    [ nothing more to find    print("Nothin'!");    }  else    {    [ if amount of gold found in this room is less than its    [ gold density    if (vGoldFound < vGoldDensity)      {      [ chance of finding gold depends on density      if (vGoldDensity == 4)        {        [ one in two chance when density == 4        random(1, 2, vFrontTreeCount);        if (vFrontTreeCount == 2)          {          [ display a random success message          random(5, 10, vFrontTreeCount);          print.v(vFrontTreeCount);          [ increase count of gold found          ++vGoldFound;          [ increase Jerrod's gold holdings          ++GoldIndex;          call(lgc.AdjustGold);          }        else          {          print("Nothin'!");          }        }              if (vGoldDensity == 3)        {        [ one in three chance when density == 3        random(1, 3, vFrontTreeCount);        if (vFrontTreeCount == 2)          {          [ display a random success message          random(5, 10, vFrontTreeCount);          print.v(vFrontTreeCount);          [ increase count of gold found          ++vGoldFound;          [ increase Jerrod's gold holdings          ++GoldIndex;          call(lgc.AdjustGold);          }        else          {          print("Nothin'!");          }        }              if (vGoldDensity == 2)        {        [ one in four chance when density == 2         random(1, 4, vFrontTreeCount);        if (vFrontTreeCount == 2)          {          [ display a random success message          random(5, 10, vFrontTreeCount);          print.v(vFrontTreeCount);          [ increase count of gold found          ++vGoldFound;          [ increase Jerrod's gold holdings          ++GoldIndex;          call(lgc.AdjustGold);          }        else          {          print("Nothin'!");          }        }              if (vGoldDensity == 1)        {        [ one in five chance when density == 1        random(1, 5, vFrontTreeCount);        if (vFrontTreeCount == 2)          {          [ display a random success message          random(5, 10, vFrontTreeCount);          print.v(vFrontTreeCount);          [ increase count of gold found          ++vGoldFound;          [ increase Jerrod's gold holdings          ++GoldIndex;          call(lgc.AdjustGold);          }        else          {          print("Nothin'!");          }        }      }    else      {      print("Nothin'!");      }    }  [ after resolving results of the dig, return ego back to  [ normal Jerrod view  set.view(ego, vw.JerrodCA);  set.loop(ego, 0);  [ restore motion  start.motion(ego);  [ reset cycle-at-rest flag so Jerrod won't cycle when he  [ stops moving  reset(CycleAtRest);  }  [ **************************************[ PROCESS PLAYER INPUT[ **************************************[ if player hasn't provided input no need to do said testsif (!isset(haveInput))  {  goto(CheckExits);  }  [ get goldif (said("acquire", "gold"))  {  print("Downright bright thinkin'! But how ya gonna do it?");  }  [ dig a hole/dig with shovelif ((said("use", "shovel", "rol") ||     said("dig", "rol")))  {  [ if Jerrod has a shovel  if (has("Shovel"))    {    [ get distance to prospector (if off screen, distance    [ will be 255)    distance(ego, oProspector, vDistance);        [ if too close to a prospector    if (vDistance < 60)      {      print("\"Don't be diggin' right there, pard!! That's part of my claim!!\"");      [ Jerrod gets hung for claim jumping      new.room(rm.Gallows); [ ##LE001##      }          [ increment number of holes dug    ++vHolesDug;    [ if at 20    if (vHolesDug == 20)      {      [ it's too many - reset back to 19      --vHolesDug;      [ and give Jerrod a suggestion to look elsewhere      print("You've put enough holes in this part of the earth. Go dig "            "somewhere else!");      goto(CheckExits);      }    [ begin digging by changing view    set.view(ego, vw.JerrodDigging);    set.loop(ego, 0);    set.cel(ego, 0);    [ stop moving, and allow ego object to cycle at rest    stop.motion(ego);    set(CycleAtRest);    start.cycling(ego);    [ set timer and status to begin the dig sequence    vDigTimer = 1;    vDigStatus = 1;    }  else    {    print("No shovel, no diggin'!!");    }  }  [ pan for gold/use panif ((said("use", "pan") ||     said("pan", "gold") ||     said("pan") ||     said("use", "gold", "pan")))  {  print("Ya can't be pannin' unless yer in the water!");  }  [ look manif ((said("examine", "boy") ||     said("examine", "miner") ||     said("examine", "digger") ||     said("examine", "bandit")))  {  [ get distance to bandit #1  distance(ego, oBandit1, vDistance);  [ this is a bug! this should be oBandit2 (o3)  distance(ego, oBandit1, vRandomPic);  [ if either bandit is on screen  if ((vDistance < 255 || vRandomPic < 255))    {    print("All ya can see is shifty eyes 'tween the brim of their hat and "          "bandanna!!");    goto(CheckExits);    }      [ get distance to prospector  distance(ego, oProspector, vDistance);  [ if not on screen  if (vDistance == 255)    {    print("There ain't no %w2 to look at!");    }  else    {    [ response depends on how close the prospector is    if (vDistance < 60)      {      print("That %w2 is workin' up a sweat!");      }    else      {      print("There's a %w2 workin' real close by!");      }    }  }  [ talk to manif ((said("speak", "boy") ||     said("speak", "miner") ||     said("speak", "digger") ||     said("speak", "bandit") ||     said("speak")))  {  [ get distance to bandit #1  distance(ego, oBandit1, vDistance);  [ same bug - this should be oBandit2 (o3)  distance(ego, oBandit1, vRandomPic);  [ if either bandit is on screen  if ((vDistance < 255 || vRandomPic < 255))    {    print("Bandits ain't got time fer small talk!");    goto(CheckExits);    }      [ get distance to prospector  distance(ego, oProspector, vDistance);  [ if not on screen  if (vDistance == 255)    {    print("Ya ain't close enough fer the %w2 to hear ya!");    }  else    {    [ response depends on how close prospector is    if (vDistance < 60)      {      [ choose a random response from the prospector      random(18, 24, vDistance);      print.v(vDistance);      }    else      {      print("There's a %w2 workin' real close by!");      }    }  }  [ look treeif (said("examine", "forest"))  {  if (isset(fTreeAdded))    {    print("Yer gonna see a whole lotta trees before yer through. I wouldn't "          "waste much time doin' that. There's GOLD in them thar hills!!");    }  else    {    print("What %w2?");    }  }  [ look bushif (said("examine", "bush"))  {  if (isset(fBushAdded))    {    print("This is just like every other bush you've seen!");    }  else    {    print("What %w2?");    }  }  [ look rockif (said("examine", "rock"))  {  print("If it ain't GOLD, you ain't interested! That rock ain't GOLD!!");  }  [ look/look aroundif ((said("examine", "around") ||     said("examine")))  {  print("Yer in GOLD country!");  }  [ look hillif (said("examine", "foot hill"))  {  print("There's GOLD in them thar hills!");  }  [ look grassif (said("examine", "grass"))  {  print("This is just wild grass.");  }[ look groundif (said("examine", "dirt"))  {  print("There may be gold galore right under you, but you can't tell just by "        "looking!");  }  [ **************************************[ CHECK FOR AN EXIT CONDITION[ **************************************[ (unlike most other logics, the check for exit condition[ happens LAST in this room)CheckExits:[ if James has a muleif ((has(LazyMule) || has("James' ol' mule")))  {  [ manage mule related commands before checking for exits  call(lgc.Mule);  }  [ if going up (north)if (edgeEgoHit == TOP_EDGE)  {  [ if below the mill tailrace  if (WildernessY == 1 && WildernessX == 17)    {    [ move to the tailrace    --WildernessY;    new.room(rm.MillTailrace); [ ##LE002##    }      [ if below Sutters mill  if (WildernessY == 1 && WildernessX == 18)    {    [ move to Sutters Mill    --WildernessY;    new.room(rm.SuttersMill); [ ##LE003##    }    [ if below Coloma West entrance  if (WildernessY == 1 && WildernessX == 19)    {    [ move to Coloma West entrance    --WildernessY;    new.room(rm.ColomaWestEntrance); [ ##LE004##    }      [ if below Coloma South (west edge)  if (WildernessY == 3 && WildernessX == 20)    {    [ mnove to Coloma South    --WildernessY;    new.room(rm.ColomaSouth); [ ##LE005##    }      [ if below Coloma South (east edge)  if (WildernessY == 3 && WildernessX == 21)    {    [ move to Coloma South    --WildernessY;    new.room(rm.ColomaSouth); [ ##LE006##    }      [ if below Coloma SE  if (WildernessY == 3 && WildernessX == 22)    {    [ move to Coloma SE    --WildernessY;    new.room(rm.ColomaSE); [ ##LE007##    }      [ if below Jake's cabin  if (WildernessY == 8 && WildernessX == 27)    {    [ if mule is leading the way, or Jerrod has already    [ found the cabin or mule is wandering    if ((isset(MuleLeadingWay) ||         isset(FoundCabin) ||         MuleFollowCounter > 0))      {      [ move to Jake's cabin      --WildernessY;      new.room(rm.JakesCabin); [ ##LE008##      }    }      [ if below the American River  if (WildernessY == 1)    {    [ move up to American River    --WildernessY;    new.room(lgc.AmRiverWild); [ ##LE009##    }      [ if no other special room above, move to another  [ wilderness room  --WildernessY;  new.room(lgc.Wilderness); [ ##LE010##  }  [ if not at right (eastern) edge of wildernessif (WildernessX != 255)  {  [ if going to the right  if (edgeEgoHit == RIGHT_EDGE)    {    [ if next to Coloma West    if (WildernessY == 1 && WildernessX == 19)      {      [ move to Coloma West      ++WildernessX;      new.room(rm.ColomaWest); [ ##LE011##      }          [ if next to Coloma South    if (WildernessY == 2 && WildernessX == 19)      {      [ move to Coloma South      ++WildernessX;      new.room(rm.ColomaSouth); [ ##LE012##      }          [ if next to Jake's cabin    if (WildernessY == 7 && WildernessX == 26)      {      [ if mule is leading the way, or Jerrod has already      [ found the cabin or mule is wandering      if ((isset(MuleLeadingWay) ||           isset(FoundCabin) ||           MuleFollowCounter > 0))        {        [ move to Jake's cabin        ++WildernessX;        new.room(rm.JakesCabin); [ ##LE013##        }      }          [ if no other special room to the right, move to another    [ wilderness room    ++WildernessX;    new.room(lgc.Wilderness); [ ##LE014##    }  }  [ if not at bottom (south) edge of wildernessif (WildernessY != 255)  {  [ if going south  if (edgeEgoHit == BOTTOM_EDGE)    {    [ if above Jake's cabin     if (WildernessY == 6 && WildernessX == 27)      {      [ if mule is leading the way, or Jerrod has already      [ found the cabin or mule is wandering      if ((isset(MuleLeadingWay) ||           isset(FoundCabin) ||           MuleFollowCounter > 0))        {        [ move to Jake's cabin        ++WildernessY;        new.room(rm.JakesCabin); [ ##LE015##        }      }          [ if no other special room below, move to another    [ wilderness room    ++WildernessY;    new.room(lgc.Wilderness); [ ##LE016##    }  }  [ if going left (west)if (edgeEgoHit == LEFT_EDGE)  {  [ if next to Coloma East  if (WildernessY == 1 && WildernessX == 23)    {    [ move to Coloma East    --WildernessX;    new.room(rm.ColomaEast); [ ##LE017##    }      [ if next to Coloma SE  if (WildernessY == 2 && WildernessX == 23)    {    [ move to Coloma SE    --WildernessX;    new.room(rm.ColomaSE); [ ##LE018##    }      [ if next to Jake's cabin  if (WildernessY == 7 && WildernessX == 28)    {    [ if mule is leading the way, or Jerrod has already    [ found the cabin or mule is wandering    if ((isset(MuleLeadingWay) ||         isset(FoundCabin) ||         MuleFollowCounter > 0))      {      [ move to Jake's cabin      --WildernessX;      new.room(rm.JakesCabin); [ ##LE019##      }    }      [ if next to the Sacramento River  if (WildernessX == 1)    {    [ move to the Sacramento River    --WildernessX;    new.room(lgc.SacRiverWild); [ ##LE020##    }      [ if not other special room to the left move to another  [ wilderness room  --WildernessX;  new.room(lgc.Wilderness); [ ##LE021##  }  return();[ **************************************[ MESSAGES[ **************************************#message 1 "Miles from Sutter's Fort: E: %v111 S: %v112"#message 2 "Downright bright thinkin'! But how ya gonna do it?"#message 3 "Nothin'!"#message 4 "Ya can't be pannin' unless yer in the water!"#message 5 "\"My, Oh My!! Ain't that a beauty!!!\""#message 6 "\"Willikers!! This is wonderful!!!\""#message 7 "\"If this keeps up, I'll be rich in no time!!\""#message 8 "\"Suuuuuweeeee!! If only those Brooklynites could see me now!!!\""#message 9 "\"Oh baby! Ooooohhh baby!!!\""#message 10 "\"Jumpin' bullfrogs!! Look what I found!!\""#message 11 "No shovel, no diggin'!!"#message 12 "Yer gonna see a whole lotta trees before yer through. I wouldn't waste much time doin' that. There's GOLD in them thar hills!!"#message 13 "There's a %w2 workin' real close by!"#message 14 "There ain't no %w2 to look at!"#message 17 "You've put enough holes in this part of the earth. Go dig somewhere else!"#message 18 "\"I thought I'd try my luck 'round these parts,\" says the miner."#message 19 "\"I been diggin' all dern day and I ain't got nothin'!\" exclaims the miner."#message 20 "\"I've heard 'bout some mighty good diggin's up 'round Coarsegold!\" says the miner."#message 21 "The miner says, \"The more I hear it, the more I believe it. Gold ain't no where but where ya find it!\""#message 22 "\"My pard and me, he done passed away, worked the land up by Mt. Bullion and did right nice,\" says the miner."#message 23 "\"The worst, lousy, hare-brained idea I ever had was to come here and look fer GOLD!! I ain't found a single nugget!\" says the miner."#message 24 "\"I saw the derndest thing up in Calaveras County, a jumpin' frog contest! I couldn't believe it!\" says the miner."#message 31 "That %w2 is workin' up a sweat!"#message 32 "\"Don't be diggin' right there, pard!! That's part of my claim!!\""#message 33 "Ya ain't close enough fer the %w2 to hear ya!"#message 34 "\"Don't move a muscle ya slitherin' rich gold man! That is if ya value yer life at all!!\" says the bandit."#message 35 "\"Move real slowly now and hand over every last ounce of gold ya got!!\""#message 36 "\"Yer doin' just fine!!\""#message 37 "\"I said DON'T MOVE!!!\""#message 38 "\"Now just pretend yer feet are stuck in cement and don't ya move an inch. Ya give us a one minute head start and then yer free to go. If ya move one second sooner, yer dead. Ya got that?\""#message 39 "BANG!! BANG!!!"#message 40 "   These bandits mean business!!!"#message 41 "All ya can see is shifty eyes 'tween the brim of their hat and bandanna!!"#message 42 "Bandits ain't got time fer small talk!"#message 45 "What %w2?"#message 47 "This is just like every other bush you've seen!"#message 48 "If it ain't GOLD, you ain't interested! That rock ain't GOLD!!"#message 49 "Yer in GOLD country!"#message 50 "There's GOLD in them thar hills!"#message 51 "This is just wild grass."#message 52 "There may be gold galore right under you, but you can't tell just by looking!"