[***********************************************************[[ lgc.SacRiverWild[[ This logic creates the random wilderness scenes along the [ Sacramento River, which acts as the western border to the[ wilderness area. Jerrod can pan for gold in the river, or[ dig for gold along the shore.[[ This room has a lot of coding errors and bugs, and is in[ general much more poorly written than other rooms. Not [ sure how it got past QA checks.[[***********************************************************[ **************************************[ LOCAL DEFINES[ **************************************#define vRandomPic                 v220#define vOverhangPic               v221#define vFrontTreePic              v222 [ v223 is not used#define vRndNum                    v224#define vMidTree1Pic               v225#define vMidTree2Pic               v226[ v227 and v228 are not used#define vBackTree1Pic              v229#define vBackTree2Pic              v230[ v231 and v232 are not used#define vMidTreeCount              v233#define vBackTreeCount             v234#define vRndNum2                   v235[ v236 and v237 are not used#define vTimer                     v238#define vDigStage                  v239#define vHolesDug                  v240#define vPanStage                  v241#define fTreeAdded                 f220[ f221 is not used#define fBushAdded                 f222[ f223 and f224 are not used#define fWading                    f225[ **************************************[ FIRST CYCLE ONLY[ **************************************if (isset(newRoom))  {  [ load mule logic  load.logics(lgc.Mule);    [ load views used in the room  load.view(vw.JerrodCA);  load.view(vw.WadingJerrodCA);  load.view(vw.WildernessArt);  load.view(vw.Panning);  load.view(vw.JerrodDigging);    [ if Jerrod has Jake's mule  if (has("James' ol' mule"))    {    [ load the follow mule sound in case Jerrod starts the    [ sequence to go to Jake's cabin    load.sound(m.FollowMule);    }ChoosePic:  [ choose a random river background  random(133, 135, vRandomPic);  [ if same picture used in previous room  if (vRandomPic == PrevWildernessPic)    {    [ try again    goto(ChoosePic);    }      [ save this background as previous  PrevWildernessPic = vRandomPic;    [ load the chosen background  load.pic(vRandomPic);    [ random chance that an overhang gets added  random(0, 6, vRndNum);  [ one in six chance  if (vRndNum > 0)    {ChooseOverhang:    [ choose one of two overhang pictures    random(1, 2, vRndNum2);    if (vRndNum2 == 1)      {      vOverhangPic = ovl.Tree14;      }    else      {      vOverhangPic = ovl.Tree17;      }          [ if the overhang was used in previous room    if (vOverhangPic == OldOverhang)      {      [ try again      goto(ChooseOverhang);      }          [ save as previous overhang    OldOverhang = vOverhangPic;    [ load the overhang    load.pic(vOverhangPic);    }      [ random chance that a large tree gets added  random(0, 1, vRndNum);  [ if Jerrod is following the mule to Jake's cabin  if (isset(MuleLeadingWay))    {    [ force choice to zero    vRndNum = 0;    }      [ one in two chance to add a large front tree  if (vRndNum == 1)    {    [ if the tree picture does not match the previous front    [ tree (this test will ALWAYS pass - it has to because    [ only one front tree is allowed; it would have made    [ more sense to just skip this test and just load the    [ tree picture if the random number passes)    if (vFrontTreePic != OldFrontTree1)      {      [ only front tree that can be used is Tree12      vFrontTreePic = ovl.Tree12;      [ save as previous front tree      OldFrontTree1 = vFrontTreePic;      [ set flag to show tree was added      set(fTreeAdded);      [ load the tree overlay      load.pic(vFrontTreePic);      }    }      [ random chance that a mid tree gets added  random(0, 8, vMidTreeCount);  [ convert random number into actual count with 1 tree  [ being most common, 2 trees being rarest    [ this is bug! they meant 'vMidTreeCount > 0', but as  [ written, this test will NEVER pass (My conjecture is  [ that their original source code said  [ 'vMidTreeCount > -1';  [ but negative numbers get converted to 2s complement,  [ which for -1 means 255). Upshot of this is that if  [ vMidTreeCount < 4, it doesn't get changed, meaning a  [ value of 0 or 3 means then no trees get added; if 1 or 2  [ then that number of trees gets added. This means the   [ actual distribution is 2/9 = no trees, 5/9 = one tree  [ and 2/9 = three trees, instead of the intended  [ distribution of 4/9 =0 trees, 4/9 = 1 tree and 1/9 =  [ two trees   if (vMidTreeCount > 255 && vMidTreeCount < 4)    {    vMidTreeCount = 0;    }  if (vMidTreeCount > 3 && vMidTreeCount < 8)    {    vMidTreeCount = 1;    }  if (vMidTreeCount == 8)    {    vMidTreeCount = 2;    }    [ if just one tree added  if (vMidTreeCount > 0 && vMidTreeCount != 2)    {    [ pick one of two random trees    random(1, 2, vRndNum2);    if (vRndNum2 == 1)      {      vMidTree1Pic = ovl.Tree7;      }    else      {      vMidTree1Pic = ovl.Tree5;      }    [ set flag to show a tree was added    set(fTreeAdded);    [ load the overlay    load.pic(vMidTree1Pic);    }      [ if two trees added  if (vMidTreeCount == 2)    {    [ add both trees on the right    vMidTree1Pic = ovl.Tree5;    vMidTree2Pic = ovl.Tree7;    [ set flag to show tree added    set(fTreeAdded);    [ load the overlays    load.pic(vMidTree1Pic);    load.pic(vMidTree2Pic);    }      [ random chance to add a back tree  random(0, 8, vBackTreeCount);  [ convert random number into actual count with 1 tree  [ being most common, 2 trees being rarest    [ SAME bug- should be 'vBackTreeCount > 0'  if (vBackTreeCount > 255 && vBackTreeCount < 4)    {    vBackTreeCount = 0;    }  if (vBackTreeCount > 3 && vBackTreeCount < 8)    {    vBackTreeCount = 1;    }  if (vBackTreeCount == 8)    {    vBackTreeCount = 2;    }      [ if just one tree added  if (vBackTreeCount > 0 && vBackTreeCount != 2)    {    [ pic one of two random trees    random(1, 2, vRndNum2);    if (vRndNum2 == 1)      {      vBackTree1Pic = ovl.Tree1;      }    else      {      vBackTree1Pic = ovl.Tree3;      }    [ set flag to show a tree was added    set(fTreeAdded);    [ load the overlay    load.pic(vBackTree1Pic);    }      [ if two trees added  if (vBackTreeCount == 2)    {    vBackTree1Pic = ovl.Tree1;    vBackTree2Pic = ovl.Tree3;    [ set flag to show a tree was added        set(fTreeAdded);    [ load both overlays    load.pic(vBackTree1Pic);    load.pic(vBackTree2Pic);    }      [ now assemble the background    [ draw the background picture  draw.pic(vRandomPic);    [ if Jerrod is not following mule to Jake's cabin  if (!isset(MuleLeadingWay))    {    [ if either back tree is ovl.Tree1    if ((vBackTree1Pic == ovl.Tree1 ||         vBackTree2Pic == ovl.Tree1))      {      [ overlay it      vRndNum = ovl.Tree1;      overlay.pic(vRndNum);      }    }      [ if either back tree is ovl.Tree3  if ((vBackTree1Pic == ovl.Tree3 ||       vBackTree2Pic == ovl.Tree3))    {    [ overlay it    vRndNum = ovl.Tree3;    overlay.pic(vRndNum);    }      [ if either mid tree is ovl.Tree5  if ((vMidTree1Pic == ovl.Tree5 ||       vMidTree2Pic == ovl.Tree5))    {    [ overlay it    vRndNum = ovl.Tree5;    overlay.pic(vRndNum);    }      [ if either mid tree is ovl.Tree7  if ((vMidTree1Pic == ovl.Tree7 ||       vMidTree2Pic == ovl.Tree7))    {    [ overlay it    vRndNum = ovl.Tree7;    overlay.pic(vRndNum);    }      [ if a front tree added  if (vFrontTreePic != 0)    {    [ overlay it    overlay.pic(vFrontTreePic);    }  [ if an overhang is addded  if (vOverhangPic != 0)    {    overlay.pic(vOverhangPic);    }      [ add random rocks and bushes; since tree variables not   [ needed anymore, we re-define them for use in the  [ add.to.pic.v commands    #define vArtPic         v220  [ override vRandomPic  #define vArtLoop        v224  [ override vRndNum  #define vArtCel         v233  [ override vMidTreeCount  #define vArtX           v234  [ override vBackTreeCount  #define vArtY           v221  [ override vOverhangPic  #define vArtPriority    v229  [ override vBackTree1Pic  #define vArtMargin      v230  [ override vBackTree2Pic    [ use the wilderness art view  vArtPic = vw.WildernessArt;    [ rocks first - add three rocks    [ rock #1 - set priority to automatic  vArtPriority = 0;  [ include control line box  vArtMargin = 0;    [ pick a random rock image  random(0, 8, vArtCel);    [ use art loop variable to determine random position  random(1, 7, vArtLoop);  if (vArtLoop == 1)    {    random(62, 139, vArtX);    vArtY = 85;    }  if (vArtLoop == 2)    {    random(62, 139, vArtX);    vArtY = 97;    }  if (vArtLoop == 3)    {    random(62, 139, vArtX);    vArtY = 109;    }  if (vArtLoop == 4)    {    random(110, 139, vArtX);    vArtY = 121;    }  if (vArtLoop == 5)    {    random(110, 139, vArtX);    vArtY = 133;    }  if (vArtLoop == 6)    {    random(110, 139, vArtX);    vArtY = 145;    }  if (vArtLoop == 7)    {    random(110, 139, vArtX);    vArtY = 157;    }      [ use loop with rock images  vArtLoop = 0;  [ add it to picture  add.to.pic.v(vArtPic, vArtLoop, vArtCel, vArtX, vArtY, vArtPriority, vArtMargin);    [ rock #2 - choose a random image  random(0, 8, vArtCel);    [ use loop variable to choose a random position  random(1, 7, vArtLoop);  if (vArtLoop == 1)    {    random(62, 139, vArtX);    vArtY = 85;    }  if (vArtLoop == 2)    {    random(62, 139, vArtX);    vArtY = 97;    }  if (vArtLoop == 3)    {    random(62, 139, vArtX);    vArtY = 109;    }  if (vArtLoop == 4)    {    random(110, 139, vArtX);    vArtY = 121;    }  if (vArtLoop == 5)    {    random(110, 139, vArtX);    vArtY = 133;    }  if (vArtLoop == 6)    {    random(110, 139, vArtX);    vArtY = 145;    }  if (vArtLoop == 7)    {    random(110, 139, vArtX);    vArtY = 157;    }      [ choose loop with rock images  vArtLoop = 0;  [ add it to picture  add.to.pic.v(vArtPic, vArtLoop, vArtCel, vArtX, vArtY, vArtPriority, vArtMargin);    [ rock #3 - choose a random image  random(0, 8, vArtCel);    [ use loop variable to choose a random position  random(1, 7, vArtLoop);  if (vArtLoop == 1)    {    random(62, 139, vArtX);    vArtY = 85;    }  if (vArtLoop == 2)    {    random(62, 139, vArtX);    vArtY = 97;    }  if (vArtLoop == 3)    {    random(62, 139, vArtX);    vArtY = 109;    }  if (vArtLoop == 4)    {    random(110, 139, vArtX);    vArtY = 121;    }  if (vArtLoop == 5)    {    random(110, 139, vArtX);    vArtY = 133;    }  if (vArtLoop == 6)    {    random(110, 139, vArtX);    vArtY = 145;    }  if (vArtLoop == 7)    {    random(110, 139, vArtX);    vArtY = 157;    }      [ use loop with rock images  vArtLoop = 0;  [ add it to picture  add.to.pic.v(vArtPic, vArtLoop, vArtCel, vArtX, vArtY, vArtPriority, vArtMargin);    [ add a random number of bushes - given the number of  [ errors already found in this logic, I wonder if this is  [ another; using upper value of five means that getting  [ four bushes will more likely (~33%) than getting 0, 1,  [ 2, or 3 bushes (~17% each)  random(0, 5, vRndNum2);    [ if at least one bush added  if (vRndNum2 > 0)    {    [ set flag to indicate a bush was added    set(fBushAdded);        [ use the wilderness art image view    vArtPic = vw.WildernessArt;        [ set priority to automatic    vArtPriority = 0;    [ include control line box    vArtMargin = 0;        [ choose a random image    random(0, 6, vArtCel);        [ use loop variable to choose a random position    random(1, 7, vArtLoop);    if (vArtLoop == 1)      {      random(62, 129, vArtX);      vArtY = 85;      }    if (vArtLoop == 2)      {      random(62, 129, vArtX);      vArtY = 97;      }    if (vArtLoop == 3)      {      random(62, 129, vArtX);      vArtY = 109;      }    if (vArtLoop == 4)      {      random(110, 129, vArtX);      vArtY = 121;      }    if (vArtLoop == 5)      {      random(110, 129, vArtX);      vArtY = 133;      }    if (vArtLoop == 6)      {      random(110, 129, vArtX);      vArtY = 145;      }    if (vArtLoop == 7)      {      random(110, 129, vArtX);      vArtY = 157;      }          [ use loop with bush images    vArtLoop = 2;    [ add it to picture    add.to.pic.v(vArtPic, vArtLoop, vArtCel, vArtX, vArtY, vArtPriority, vArtMargin);    }      [ if 2 or more bushes added  if (vRndNum2 > 1)    {    [ choose a random image    random(0, 6, vArtCel);        [ use loop variable to choose a random position    random(1, 7, vArtLoop);    if (vArtLoop == 1)      {      random(62, 129, vArtX);      vArtY = 85;      }    if (vArtLoop == 2)      {      random(62, 129, vArtX);      vArtY = 97;      }    if (vArtLoop == 3)      {      random(62, 129, vArtX);      vArtY = 109;      }    if (vArtLoop == 4)      {      random(110, 129, vArtX);      vArtY = 121;      }    if (vArtLoop == 5)      {      random(110, 129, vArtX);      vArtY = 133;      }    if (vArtLoop == 6)      {      random(110, 129, vArtX);      vArtY = 145;      }    if (vArtLoop == 7)      {      random(110, 129, vArtX);      vArtY = 157;      }          [ use loop with bush images    vArtLoop = 2;    [ add it to picture    add.to.pic.v(vArtPic, vArtLoop, vArtCel, vArtX, vArtY, vArtPriority, vArtMargin);    }      [ if three or more bushes added  if (vRndNum2 > 2)    {    [ choose a random image    random(0, 6, vArtCel);        [ use loop variable to choose random position    random(1, 7, vArtLoop);    if (vArtLoop == 1)      {      random(62, 129, vArtX);      vArtY = 85;      }    if (vArtLoop == 2)      {      random(62, 129, vArtX);      vArtY = 97;      }    if (vArtLoop == 3)      {      random(62, 129, vArtX);      vArtY = 109;      }    if (vArtLoop == 4)      {      random(110, 129, vArtX);      vArtY = 121;      }    if (vArtLoop == 5)      {      random(110, 129, vArtX);      vArtY = 133;      }    if (vArtLoop == 6)      {      random(110, 129, vArtX);      vArtY = 145;      }    if (vArtLoop == 7)      {      random(110, 129, vArtX);      vArtY = 157;      }          [ use loop with bush images    vArtLoop = 2;    [ add it to picture    add.to.pic.v(vArtPic, vArtLoop, vArtCel, vArtX, vArtY, vArtPriority, vArtMargin);    }      [ if four or more bushes added  if (vRndNum2 > 3)    {    [ choose a random image    random(0, 6, vArtCel);        [ use loop variable to choose a random position    random(1, 7, vArtLoop);    if (vArtLoop == 1)      {      random(62, 129, vArtX);      vArtY = 85;      }    if (vArtLoop == 2)      {      random(62, 129, vArtX);      vArtY = 97;      }    if (vArtLoop == 3)      {      random(62, 129, vArtX);      vArtY = 109;      }    if (vArtLoop == 4)      {      random(110, 129, vArtX);      vArtY = 121;      }    if (vArtLoop == 5)      {      random(110, 129, vArtX);      vArtY = 133;      }    if (vArtLoop == 6)      {      random(110, 129, vArtX);      vArtY = 145;      }    if (vArtLoop == 7)      {      random(110, 129, vArtX);      vArtY = 157;      }        [ use loop with bush images    vArtLoop = 2;        [ add it to picture    add.to.pic.v(vArtPic, vArtLoop, vArtCel, vArtX, vArtY, vArtPriority, vArtMargin);    }      [ horizon is 80 in these wilderness rooms  set.horizon(80);    [ add Jerrod, in his normal California attire  animate.obj(ego);  set.view(ego, vw.JerrodCA);    [ if his initial position puts him too close to the river  [ while he has a mule  if (posn(ego, 0, 167, 87, 167) &&       (has(LazyMule) ||       has("James' ol' mule")))    {    [ adjust his position    EgoX = 87;    EgoY = 167;    position.v(ego, EgoX, EgoY);    }  [ let Jerrod go into the river  ignore.blocks(ego);  [ draw Jerrod on screen  draw(ego);    [ if Jerrod is positioned left/center and has a mule  [ (another bad coding entry - this really should be done  [ BEFORE drawing ego object)  if (posn(ego, 0, 75, 58, 85) &&       (has(LazyMule) ||       has("James' ol' mule")))    {    EgoX = 58;    EgoY = 81;    [ remove him, position him, then redraw him    erase(ego);    position.v(ego, EgoX, EgoY);    draw(ego);    }      [if Jerrod has a mule  if ((has(LazyMule) || has("James' ol' mule")))    {    [ do the mule new.room initialization    call(lgc.Mule);    }      [ now show the assembled picture  show.pic();    [ not necessary to reset this flag; AGI resets it   [ automatically  reset(newRoom);    [ clear the custom status line  clear.lines(24, 24, BLACK);  [ and force an update  set(UpdateStatus);    [ this variable is never used (it's gold density   [ in other wilderness rooms)  v236 = 0;  }  [ **************************************[ EVERY CYCLE[ **************************************[ if updating custom status lineif (isset(UpdateStatus))  {  [ display it on line 24  display(24, 0, "Miles from Sutter's Fort: E: %v111 S: %v112");  }  [ if panning timer is setif (vTimer > 0)  {  [ increment timer  ++vTimer;  }  [ after eleven cycles in stage 1 of panningif (vTimer == 11 && vPanStage == 1)  {  [ done panning - reset timer and stage  vTimer = 0;  vPanStage = 0;  [ no gold in the Sacramento River  print("Nothin'!");  [ change back to normal wading view  set.view(ego, vw.WadingJerrodCA);  [ restore motion  start.motion(ego);  [ reset cycle-at-rest flag so Jerrod won't cycle when he  [ stops moving  reset(CycleAtRest);  }  [ after 15 cycles in first stage of diggingif (vTimer == 15 && vDigStage == 1)  {  [ reset timer  vTimer = 1;  [ advance to next stage  vDigStage = 2;  [ hole is a little deeper  set.loop(ego, 1);  }  [ after 15 cycles in stage 2 of diggingif (vTimer == 15 && vDigStage == 2)  {  [ reset timer  vTimer = 1;  [ advance to next stage  vDigStage = 3;  [ hole is a little deeper  set.loop(ego, 2);  }  [ after 15 cycles in stage 3 of diggingif (vTimer == 15 && vDigStage == 3)  {  [ reset timer  vTimer = 1;  [ advance to next stage  vDigStage = 4;  [ hole is almost done  set.loop(ego, 3);  }  [ after 15 cycles in stage 4 of diggingif (vTimer == 15 && vDigStage == 4)  {  [ use timer as view number for hole that will be added to  [ picture  vTimer = vw.JerrodDigging;  [ use vDigStage as loop number and margin value  vDigStage = 4;  [ use vRandomPic as cel number and priority  vRandomPic = 0;  [ add hole, with automatic priority, and no control line box  add.to.pic.v(vTimer, vDigStage, vRandomPic, EgoX, EgoY, vRandomPic, vDigStage);  [ reset timer  vTimer = 0;  [ advance to last stage  vDigStage = 5;  }  [ if at dig stage 5if (vDigStage == 5)  {  [ all done; reset dig stage  vDigStage = 0;  [ no gold by the Sacramento River  print("Nothin'!");  [ change back to normal view   set.view(ego, vw.JerrodCA);  [ reset to first loop  set.loop(ego, 0);  [ restore motion  start.motion(ego);  [ reset the cycle at rest flag  reset(CycleAtRest);  }  [ if Jerrod is in the water and not wadingif (isset(onWater) && !isset(fWading))  {  [ change to wading view  set(fWading);  set.view(ego, vw.WadingJerrodCA);  }  [ if Jerrod is out of the water and wadingif (!isset(onWater) && isset(fWading))  {  [ change to normal view  reset(fWading);  set.view(ego, vw.JerrodCA);  }  [ **************************************[ PROCESS PLAYER INPUT[ **************************************[ if player hasn't provided input no need to do said testsif (!isset(haveInput))  {  goto(CheckExits);  }  [ get goldif (said("acquire", "gold"))  {  print("Downright bright thinkin'! But how ya gonna do it?");  }  [ use pan/pan for goldif ((said("use", "pan") ||     said("pan", "gold") ||     said("pan") ||     said("use", "gold", "pan") ||     said("go", "pan", "rol")))  {  [ if Jerrod has a gold pan  if (has("Gold pan"))    {    [ and is on the water    if (isset(onWater))      {      [ change to panning view      set.view(ego, vw.Panning);      [ make sure to start with cel 0      set.cel(ego, 0);      [ Jerrod stops moving while panning      stop.motion(ego);      [ start the timer      vTimer = 1;      [ set pan stage      vPanStage = 1;      [ allow ego object to cycle at rest      set(CycleAtRest);      [ cycle ego object to show Jerrod panning      start.cycling(ego);      }    else      {      print("Ya can't be pannin unless yer in the water!");      }    }  else    {    print("Ya can't pan if ya don't have a pan.");    }  }  [ use shovel/dig holeif ((said("use", "shovel", "rol") ||     said("dig", "rol")))  {  [ if Jerrod has a shovel  if (has("Shovel"))    {    [ if Jerrod is on the water    if (isset(onWater))      {      print("Diggin' is for when yer on dry ground!!");      }    else      {      [ increment count of holes dug      ++vHolesDug;      [ if now at twenty      if (vHolesDug == 20)        {        [ back up one        --vHolesDug;        [ too many holes        print("You've done enough diggin' right here!");        goto(CheckExits);        }      [ ok to dig - change to Jerrod's digging view      set.view(ego, vw.JerrodDigging);      [ start with loop zero, cel one      set.loop(ego, 0);      set.cel(ego, 0);      [ Jerrod stops moving while digging      stop.motion(ego);      [ allow ego object to cycle at rest      set(CycleAtRest);      [ cycle ego object to show Jerrod digging      start.cycling(ego);      [ start the timer      vTimer = 1;      [ set dig stage to 1      vDigStage = 1;      }    }  else    {    print("Ya can't dig unless you have a shovel.");    }  }  [ look treeif (said("examine", "forest"))  {  if (isset(fTreeAdded))    {    print("A tree is a tree is a tree. That's all it is, just a tree!");    }  else    {    print("What %w2?");    }  }  [ look bushif (said("examine", "bush"))  {  if (isset(fBushAdded))    {    print("This is just like every other bush you've seen.");    }  else    {    print("What %w2?");    }  }  [ look rockif (said("examine", "rock"))  {  print("If it ain't GOLD, ya ain't interested. That rock ain't GOLD!");  }  [ look around/lookif ((said("examine", "around") || said("examine")))  {  print("Yer walkin' along the Sacramento River.");  }  [ look beachif ((said("examine", "beach") ||     said("examine", "creek", "beach")))  {  print("This is the shore of the Sacramento River.");  }  [ look hillif (said("examine", "foot hill"))  {  print("The hills across the river are out of reach.");  }  [ look grassif (said("examine", "grass"))  {  print("This is just wild grass.");  }  [ look groundif (said("examine", "dirt"))  {  print("There may be gold galore right under you, but you can't tell just by "        "looking!");  }  [ cross riverif (said("cross", "creek"))  {  print("There's no need to cross the river.");  }  [ look across the riverif ((said("examine", "across", "creek") ||     said("examine", "across", "water")))  {  print("You see more of the same terrain.");  }  [ look riverif ((said("examine", "creek") ||     said("examine", "anyword", "creek") ||     said("examine", "water") ||     said("examine", "anyword", "water")))  {  print("This is the Sacramento River. No miner's claim ever panned out in this "        "river.");  }  [ go swimmingif ((said("swim", "rol") ||     said("anyword", "swim", "rol") ||     said("go", "water") ||     said("go", "anyword", "water") ||     said("jump", "water") ||     said("jump", "anyword", "water") ||     said("go", "creek") ||     said("go", "anyword", "creek") ||     said("jump", "creek") ||     said("jump", "anyword", "creek") ||     said("enter", "water") ||     said("enter", "creek")))  {  print("There's no time for that. Yer lookin' for gold!");  }  [ drink water/get waterif ((said("acquire", "water") ||     said("anyword", "drink", "rol") ||     said("drink", "rol")))  {  print("You don't need any water.");  }  [ **************************************[ CHECK FOR AN EXIT CONDITION[ **************************************[ (unlike most other logics, the check for an exit condition[ happens LAST in this room)CheckExits:[ if Jerrod has a muleif ((has(LazyMule) || has("James' ol' mule")))  {  [ process mule related commands before checking for exits  call(lgc.Mule);  }  [ if at north end of the riverif (WildernessY == 1)  {  [ if Jerrod is at top of screen  if (posn(ego, 0, 81, 159, 81))    {    [ go back to Sutters Fort    --WildernessY;    clear.lines(24, 24, BLACK);    new.room(rm.SuttersFortArea); [ ##LE001##    }  }  [ if in any other location -[ if at top edge (north)if (edgeEgoHit == TOP_EDGE)  {  [ move up to another Sacramento River room  --WildernessY;  new.room(lgc.SacRiverWild); [ ##LE002##  }  [ if at right edgeif (edgeEgoHit == RIGHT_EDGE)  {  [ move right into the wilderness  ++WildernessX;  new.room(lgc.Wilderness); [ ##LE003##  }  [ if not at the southern (lower) limitif (WildernessY != 255)  {  [ if at bottom edge (south)  if (edgeEgoHit == BOTTOM_EDGE)    {    [ move down to another Sacramento River room    ++WildernessY;    new.room(lgc.SacRiverWild); [ ##LE004##    }  }  return();[ **************************************[ MESSAGES[ **************************************#message 1 "Miles from Sutter's Fort: E: %v111 S: %v112"#message 2 "Downright bright thinkin'! But how ya gonna do it?"#message 3 "Nothin'!"#message 4 "Ya can't be pannin unless yer in the water!"#message 5 "\"My, Oh My!! Ain't that a beauty!!!\""#message 6 "\"Willikers!! This is wonderful!!!\""#message 7 "\"If this keeps up, I'll be rich in no time!!\""#message 8 "\"Suuuuuweeeee!! If only those Brooklynites could see me now!!!\""#message 9 "\"Oh baby! Ooooohhh baby!!!\""#message 10 "\"Boiling Brooklyn!! What a beautiful baby!!\""#message 15 "Diggin' is for when yer on dry ground!!"#message 16 "Ya can't pan if ya don't have a pan."#message 17 "Ya can't dig unless you have a shovel."#message 18 "A tree is a tree is a tree. That's all it is, just a tree!"#message 20 "This is the Sacramento River. No miner's claim ever panned out in this river."#message 31 "You've done enough diggin' right here!"#message 35 "What %w2?"#message 37 "This is just like every other bush you've seen."#message 38 "If it ain't GOLD, ya ain't interested. That rock ain't GOLD!"#message 39 "Yer walkin' along the Sacramento River."#message 43 "This is the shore of the Sacramento River."#message 44 "The hills across the river are out of reach."#message 45 "This is just wild grass."#message 46 "There may be gold galore right under you, but you can't tell just by looking!"#message 47 "There's no time for that. Yer lookin' for gold!"#message 48 "You see more of the same terrain."#message 49 "There's no need to cross the river."#message 50 "You don't need any water."