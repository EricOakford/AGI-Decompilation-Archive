[***********************************************************[[ rm.ShipBowInterior[[ This room shows the interior spaces of the steamsdhip's[ bow which include the forward hold and the bunk room. [[***********************************************************[ **************************************[ LOCAL DEFINES[ **************************************#define oEngine                      o1#define oWake                        o2#define oWaves                       o3#define oDoor                        o4#define oLand                        o5#define oRock                        o6#define oIceberg                     o7#define oReadingMan                  o8#define vIcebergTime                v81  [ override TripPoint_20#define vRockTime                   v82  [ override TripPoint_21#define vStarveStart               v180  [ override LeafPileSize#define vOvlPic                    v220#define vTmpStep                   v221#define vLandStatus                v222#define vLandStep                  v223#define vRockStatus                v224#define vIcebergStatus             v225#define vRockStep                  v226#define vRockSize                  v227[ v228 is not used#define vFlipStatus                v229#define vBadHam                    v230#define fOnLadder                  f220#define fDoorClosed                f221#define fDoorOpen                  f222#define fLandMoved                 f223#define fRockMoved                 f224#define fIcebergMoved              f225#define fShipSinking               f226#define fDoneFlipping              f227#define fDoneDying                 f228#define fAteBadMeat                f229#define fSoundDone2                f230#define fSoundDone                 f231[ **************************************[ FIRST CYCLE ONLY[ **************************************if (isset(newRoom))  {  [ at trip point 2 (beginning of trip) or trip point 9  [ (after Cape Horn, heading north up South America coast)  if ((CurrentTripTime == 2 || CurrentTripTime == 9))    {    [ hold is full    vOvlPic = ovl.FwdHold1;    }  [ at trip point 4 (just before reaching Rio de Janeiro) or  [ at trip point 11 (half way up Pacific coast)  if ((CurrentTripTime == 4 || CurrentTripTime == 11))    {    [ hold is half empty    vOvlPic = ovl.FwdHold2;    }  [ at trip point 15 (last leg of journey, heading into  [ California)  if (CurrentTripTime == 15)    {    [ hold is mostly empty    vOvlPic = ovl.FwdHold3;    }      [ load the main timing logic  load.logics(lgc.CapeTripTiming);    [ load current room picture and overlay picture  load.pic(currentRoom);  load.pic(vOvlPic);    [ load views needed by objects in the room  load.view(vw.JerrodNY);  load.view(vw.ClimbingJerrodRight);  load.view(vw.SickJerrodNY);  load.view(vw.DyingJerrodNY);  load.view(vw.ShipBowArt);  load.view(vw.OceanItems);  load.view(vw.MidShipArt2);  load.view(vw.ShipSternArt);    [ load sounds used in the room  load.sound(s.AddToScore);  load.sound(s.RockCrash);    [ draw the room picture, and overlay the hold  draw.pic(currentRoom);  overlay.pic(vOvlPic);    [ add bunks to the picture  add.to.pic(vw.ShipSternArt, 3, 0, 31, 106, 7, 7);    [ if storm hasn't happened yet  if (CurrentTripTime < StormTime)    {    [ add personal gear to the picture    add.to.pic(vw.ShipSternArt, 3, 1, 31, 106, 7, 7);    }  [ add men to engine room  add.to.pic(vw.ShipSternArt, 2, 0, 91, 53, 7, 7);    [ ship's engine  animate.obj(oEngine);  set.view(oEngine, vw.ShipBowArt);  set.loop(oEngine, 0);  set.priority(oEngine, 14);  position(oEngine, 0, 92);  draw(oEngine);  start.cycling(oEngine);    [ islands/land  animate.obj(oLand);  set.view(oLand, vw.OceanItems);  set.priority(oLand, 4);  [ land step time  vLandStep = 14;  ignore.objs(oLand);  ignore.blocks(oLand);    [ rocks  animate.obj(oRock);  set.view(oRock, vw.OceanItems);  set.loop(oRock, 0);  fix.loop(oRock);  set.priority(oRock, 5);  vRockStep = 2;  ignore.objs(oRock);  ignore.blocks(oRock);    [ icebergs  animate.obj(oIceberg);  set.view(oIceberg, vw.OceanItems);  set.loop(oIceberg, 1);  fix.loop(oIceberg);  set.priority(oIceberg, 6);  ignore.objs(oIceberg);  ignore.blocks(oIceberg);    [ waves in front of ship  animate.obj(oWaves);  set.view(oWaves, vw.ShipBowArt);  set.loop(oWaves, 2);  set.cel(oWaves, 0);  set.priority(oWaves, 5);  position(oWaves, 101, 107);  draw(oWaves);  start.cycling(oWaves);    [ wake at bow of ship  animate.obj(oWake);  set.view(oWake, vw.ShipBowArt);  set.loop(oWake, 1);  set.cel(oWake, 0);  set.priority(oWake, 14);  position(oWake, 81, 108);  draw(oWake);  start.cycling(oWake);    [ door to bunkroom  animate.obj(oDoor);  stop.cycling(oDoor);  set.view(oDoor, vw.MidShipArt2);  set.loop(oDoor, 1);  set.cel(oDoor, 0);  set.priority(oDoor, 8);  ignore.objs(oDoor);  [ door is closed  set(fDoorClosed);  position(oDoor, 31, 106);  draw(oDoor);    [ man reading Bible  animate.obj(oReadingMan);  set.view(oReadingMan, vw.ShipBowArt);  [ if Jerrod has the Bible  if (has("Bible"))    {    [ use loop of man without Bible    set.loop(oReadingMan, 5);    }  else    {    [ use loop of man reading the Bible    set.loop(oReadingMan, 4);    }  set.cel(oReadingMan, 0);  set.priority(oReadingMan, 9);  position(oReadingMan, 53, 51);  draw(oReadingMan);  [ reader doesn't cycle until he needs to turn a page  stop.cycling(oReadingMan);    [ Jerrod  animate.obj(ego);  [ if trip time is not when Jerrod is sick OR on last leg  [ of journey  if (CurrentTripTime != ScurvyTime &&       CurrentTripTime != CholeraTime &&       CurrentTripTime != TripPoint_15)    {    [ use normal view    set.view(ego, vw.JerrodNY);    }  else    {    [ otherwise assume Jerrod is sick - use sick view    set.view(ego, vw.SickJerrodNY);    [ if on last leg of journey    if (CurrentTripTime == TripPoint_15)      {      [ if Jerrod isn't currently sick      if (!isset(SickAtSea))        {        [ reset to normal view        set.view(ego, vw.JerrodNY);        }      }    }  [ this room is 2D, so set priority and leave it  set.priority(ego, 10);    [ position Jerrod, depending on previous room    [ coming from mid ship, upper deck  if (posn(ego, 0, 56, 5, 58))    {    position(ego, 19, 57);    }  [ coming from mid ship, main deck  if (posn(ego, 0, 105, 5, 107))    {    position(ego, 19, 106);    }      [ if not coming from midship interior  if (previousRoom != rm.ShipMidInterior)    {    position(ego, 45, 57);    }  [ add Jerrod to screen  draw(ego);    [ now show the picture  show.pic();  }  [ **************************************[ EVERY CYCLE[ **************************************[ if at top of ladderif (posn(ego, 20, 58, 22, 58))  {  [ bump position so climbing view will be in correct spot  if (posn(ego, 20, 58, 20, 58))    {    TmpX = 0;    }  if (posn(ego, 21, 58, 21, 58))    {    TmpX = -1; [ 255;    }  [ Jerrod gets on the ladder  set(fOnLadder);  TmpY = 16;  [ set loop and fix it  set.view(ego, vw.ClimbingJerrodRight);  set.loop(ego, 0);  fix.loop(ego);  [ adjust step time on ladder to 2  vTmpStep = 2;  step.size(ego, vTmpStep);  reposition(ego, TmpX, TmpY);  }  [ if at bottom of ladder, and still on itif (posn(ego, 20, 106, 20, 106) && isset(fOnLadder))  {  [ Jerrod gets off the ladder  reset(fOnLadder);  [ bump position so view appears correctly  TmpX = 1;  TmpY = 0;  [ if not sick or not on last leg of journey  if (CurrentTripTime != ScurvyTime &&       CurrentTripTime != CholeraTime &&       CurrentTripTime != TripPoint_15)    {    [ use normal view    set.view(ego, vw.JerrodNY);    }  else    {    [ otherwise, assume sick    set.view(ego, vw.SickJerrodNY);    [ if on last leg of journey    if (CurrentTripTime == TripPoint_15)      {      [ if not sick      if (!isset(SickAtSea))        {        [ restore normal view        set.view(ego, vw.JerrodNY);        }      }    }  [ allow loop to change with direction  release.loop(ego);  [ restore step time to 1  vTmpStep = 1;  step.size(ego, vTmpStep);  reposition(ego, TmpX, TmpY);  }  [ if at bottom of ladder, but not on it yetif (posn(ego, 20, 105, 22, 105) && !isset(fOnLadder))  {  [ bump position so climbing view looks correct  if (posn(ego, 20, 105, 20, 105))    {    TmpX = 0;    }  if (posn(ego, 21, 105, 21, 105))    {    TmpX = -1; [ 255;    }  [ no check for 22; shouldn't it adjust position by -2?    [ Jerrod is now on the ladder  set(fOnLadder);  TmpY = -1; [ 255;  set.view(ego, vw.ClimbingJerrodRight);  [ set and fix the loop  set.loop(ego, 0);  fix.loop(ego);  [ adjust step time to 2  vTmpStep = 2;  step.size(ego, vTmpStep);  reposition(ego, TmpX, TmpY);  }  [ if at top of ladder and still on itif (posn(ego, 20, 72, 20, 72) && isset(fOnLadder))  {  [ Jerrod gets off the ladder  reset(fOnLadder);  [ bump position so normal view looks correct  TmpX = 1;  TmpY = -15; [ 241;  [ if not sick and not on last leg of journey   if (CurrentTripTime != ScurvyTime &&       CurrentTripTime != CholeraTime &&       CurrentTripTime != TripPoint_15)    {    [ use normal view    set.view(ego, vw.JerrodNY);    }  else    {    [ otherwise assume sick    set.view(ego, vw.SickJerrodNY);    [ if on last leg of journey    if (CurrentTripTime == TripPoint_15)      {      [ if not currently sick      if (!isset(SickAtSea))        {        [ restore normal view        set.view(ego, vw.JerrodNY);        }      }    }  [ allow loop to change with direction  release.loop(ego);  [ reset step time to 1  vTmpStep = 1;  step.size(ego, vTmpStep);  reposition(ego, TmpX, TmpY);  }  [ if Jerrod is due to get scurvyif (CurrentTripTime == ScurvyTime)  {  [ if currently healthy  if (EgoHealthStatus == 0)    {    [ if he's ready to die    if (isset(DyingAtSea))      {      [ can't die on a ladder (needs room to fall down)      if ((EgoY == 57 || EgoY == 106))        {        [ reset the flag        reset(DyingAtSea);        [ change view to Jerrod dying        set.view(ego, vw.DyingJerrodNY);        [ make sure to start with first cel        set.cel(ego, 0);        [ start cycling        end.of.loop(ego, fDoneDying);        [ allow ego object to cycle when not moving        set(CycleAtRest);        }      }          [ after Jerrod finishes dying    if (isset(fDoneDying))      {      [ reset the flag      reset(fDoneDying);      [ stop updating Jerrod      stop.update(ego);      [ set his health status to death by scurvy      EgoHealthStatus = 20;      [ load and call final death logic      load.logics(lgc.DeathScurvy);      call(lgc.DeathScurvy);      }    }  }  [if Jerrod is due to get choleraif (CurrentTripTime == CholeraTime)  {  [ if currently healthy  if (EgoHealthStatus == 0)    {    [ if he's ready to die    if (isset(DyingAtSea))      {      [ can't die on a ladder (needs room to fall down)      if ((EgoY == 57 || EgoY == 106))        {        [ reset the flag        reset(DyingAtSea);        [ change view to Jerrod dying        set.view(ego, vw.DyingJerrodNY);        [ make sure to start with first cel        set.cel(ego, 0);        [ start cycling        end.of.loop(ego, fDoneDying);        [ allow ego object to cycle when not moving        set(CycleAtRest);        }      }    [ after Jerrod finishes dying    if (isset(fDoneDying))      {      [ reset the flag      reset(fDoneDying);      [ stop updating Jerrod      stop.update(ego);      [ set health status to death by cholera      EgoHealthStatus = 21;      [ load and call final death logic      load.logics(lgc.DeathCholera);      call(lgc.DeathCholera);      }    }  }  [ during last leg of trip, there is possibility Jerrod might[ starveif (CurrentTripTime == TripPoint_15)  {  [ if Jerrod is currently healthy  if (EgoHealthStatus == 0)    {    [ if cycle count reaches starve time, and Jerrod is not    [ already sick and he hasn't eaten ham yet    if (TripCycles2 == vStarveStart &&         TripCycles == 100 &&         !isset(SickAtSea) &&         !isset(AteHam))      {      [ warn player that Jerrod is gonna die      print("All the supplies and food are running very low and you are feeling "            "weak to the point of death.");      [ set flag indicating he's sick      set(SickAtSea);      [ change to sick Jerrod view, but ONLY if not on a      [ ladder      if (!isset(fOnLadder))        {        set.view(ego, vw.SickJerrodNY);        }      }          [ if cycle count reaches time for Jerrod to die    if (TripCycles2 == StarveDying && TripCycles == 100)      {      [ if Jerrod is sick, but NOT from eating bad ham      if (isset(SickAtSea) && !isset(fAteBadMeat))        {        [ begin dying sequence        set(DyingAtSea);        }      [ of Jerrod isn't sick, and hasn't eaten bad ham      if (!isset(SickAtSea) && !isset(fAteBadMeat))        {        [ he made it! continue journey into California!        set(ContinueJourney);        }      }          [ if dying sequence is set    if (isset(DyingAtSea))      {      [ can only die if NOT on ladder (needs room to fall)      if ((EgoY == 57 || EgoY == 106))        {        [ reset flag        reset(DyingAtSea);        [ change view to dying Jerrod        set.view(ego, vw.DyingJerrodNY);        [ make sure to start with first cel        set.cel(ego, 0);        [ begin cycling        end.of.loop(ego, fDoneDying);        [ allow ego object to cycle when not moving        set(CycleAtRest);        }      }    [after Jerrod finishes dying    if (isset(fDoneDying))      {      [ rest flag      reset(fDoneDying);      [ stop updating Jerrod      stop.update(ego);      [ set health status, depending on how Jerrod died      if (isset(fAteBadMeat))        {        [ died from eating rotten ham        EgoHealthStatus = 25;        }      else        {        [ died from starvation        EgoHealthStatus = 26;        }      [ load and call logic to handle final death sequence      load.logics(lgc.DeathStarvation);      call(lgc.DeathStarvation);      }    }  }[ if no land currently in sightif (vLandStatus != 250)  {  [ random chance land shows up  random(210, 249, vLandStatus);  [ one in 40 chance  if (vLandStatus == 230)    {    [ if off coast of South America (in    [ rm.ShipSternInterior, this check is done during first    [ cycle when the object is animated; not sure why it was    [ done differently here. The stern room is actually a    [ better way to do it.)    if ((CurrentTripTime == 9 || CurrentTripTime == 11))      {      [ use lands with less vegetation      set.loop(oLand, 3);      }    else      {      [ further north, use lands with more vegetation      set.loop(oLand, 2);      }    [ fix loop (don't want it to change during movement)    fix.loop(oLand);    [ make sure first cel is selected    set.cel(oLand, 0);    [ set status to show land is visible    vLandStatus = 250;    [ position it on right edge of screen    position(oLand, 123, 107);    draw(oLand);    [ there's only one cel, so stop.cycling doesn't     [ actually do anything    stop.cycling(oLand);    [ move the land to left of screen (to simulate ship    [ is passing it)    move.obj(oLand, 48, 107, 1, fLandMoved);    step.time(oLand, vLandStep);    }  }  [ when land has passed byif (isset(fLandMoved))  {  [ remove it from screen  reset(fLandMoved);  erase(oLand);  [ increment status so randomizer can start again  ++vLandStatus;  [ releasing loop doesn't actually do anything in this  [ case  release.loop(oLand);  }  [ if trip time point is one of the South America legsif ((CurrentTripTime == 9 || CurrentTripTime == 11))  {  [ if currently no rock in sight  if (vRockStatus != 250)    {    [ random chance a rock will appear    random(210, 249, vRockStatus);    [ one in 40 chance    if (vRockStatus == 230)      {      [ rock is visible      vRockStatus = 250;      [ randomly choose size of rock      random(0, 5, vRockSize);      set.cel.v(oRock, vRockSize);      [ position rock on right edge of screen      position(oRock, 140, 167);      draw(oRock);      stop.cycling(oRock);      [ move rock to left (simulate ship passing it by)      move.obj(oRock, 45, 167, 1, fRockMoved);      step.time(oRock, vRockStep);      }    }      [ when rock gets to the ship  if (isset(fRockMoved))    {    [ reset the flag    reset(fRockMoved);    [ two in six chance it's bad    if ((vRockSize == 0 || vRockSize == 1))      {      [ ship hits rock; play sound      sound(s.RockCrash, fSoundDone);      [ shake screen (but not if VGA)      if (monitorType != VGA)        {        shake.screen(5);        }      [ if trip time is designated for sinking by rock      if (CurrentTripTime == vRockTime)        {        [ if Jerrod is currently OK        if (EgoHealthStatus == 0)          {          [ he's not OK anymore...          print("This rock has done serious damage to the hull of the ship.");          print("The captain orders the crew and passengers to abandon ship, "                "but it is too late.");          print("The lowest level of the ship fills with water and the ship is "                "on its way down in some of the most frigid water in the world.");          }        [ ship is now going to sink        set(fShipSinking);        }      }    [ three in six chance the rock isn't too bad    if ((vRockSize == 2 || vRockSize == 3 || vRockSize == 4))      {      [ ship hits rock; play sound      sound(s.RockCrash, fSoundDone);      [ if monitor is anything other than VGA      if (monitorType != VGA)        {        [ shake screen        shake.screen(3);        }      [ increment status so randomizer can find another one      ++vRockStatus;      }    [ one in six chance ship just grazes the rock    if (vRockSize == 5)      {      [ ship hits rock; play sound      sound(s.RockCrash, fSoundDone);      [ if monitor is anything other than VGA      if (monitorType != VGA)        {        [ only one shake        shake.screen(1);        }      [ increment status so randomizer can find another one      ++vRockStatus;      }    [ rock is out of view; remove it from screen    erase(oRock);    }  }  [ if trip timer matches time for rock to sink shipif (CurrentTripTime == vRockTime)  {  [ if ship hit rock and is sinking  if (isset(fShipSinking))    {    [ reset the flag    reset(fShipSinking);    [ use vRockSize as a counter    vRockSize = 7;    }  [ if counter is initiated  if (vRockSize > 6)    {    [ increment timer    ++vRockSize;    [ when counter reaches 26 (+19 cycles)    if (vRockSize == 26)      {      [ set status to sinking by hitting a rock      EgoHealthStatus = 27;      [ switch to sinking ship cutscene (normal)       new.room(cs.SinkingShipClear); [ ##LE001##      }    }  }  [ if off the coast of South Americaif ((CurrentTripTime == 9 || CurrentTripTime == 11))  {  [ if no iceberg present  if (vIcebergStatus != 250)    {    [ random chance one appears    random(210, 249, vIcebergStatus);    [ one in 40 chance    if (vIcebergStatus == 230)      {      [ iceberg is visible       vIcebergStatus = 250;      [ position it on right edge of screen      position(oIceberg, 143, 126);      draw(oIceberg);      [ move it to left (simulate ship passing it by)      move.obj(oIceberg, 69, 126, 1, fIcebergMoved);      [ use same step time as rock      step.time(oIceberg, vRockStep);      }    }      [ when iceberg reaches ship  if (isset(fIcebergMoved))    {    [ reset flag    reset(fIcebergMoved);    [ iceberg hits; play sound    sound(s.RockCrash, fSoundDone);    [ if monitor is anything other than VGA    if (monitorType != VGA)      {      [ shake screen three times      shake.screen(3);      }    [ iceberg is behind/past ship so remove it from screen    erase(oIceberg);    [ set status so randomizer can find another iceberg    ++vIcebergStatus;    [ increment count of iceberg hits     ++IcebergCounter;    [ if five hits    if (IcebergCounter == 5)      {      [ set rock status, so no rock hits occur while ship is      [ sinking due to iceberg hit      vRockStatus = 250;      [ if trip time point is time for iceberg to sink the      [ ship      if (CurrentTripTime == vIcebergTime)        {        [ if Jerrod is currently OK        if (EgoHealthStatus == 0)          {          [ he isn't OK anymore...          print("The iceberg once again pounds the side of the ship, but this "                "time the force is too much for the hull to withstand.");          print("The wretched iceberg punctures the shell of the ship, flooding "                "the lower levels.");          print("The end is near.");          }        [ set flag to begin sinking sequence        set(fShipSinking);        }      }    else      {      [ empty block; there was probably something here at      [ one point but it appears to have been deleted      }    }  }  [ if trip time point matches time for iceberg to sink shipif (CurrentTripTime == vIcebergTime)  {  [ if ship is set to sink  if (isset(fShipSinking))    {    [ reset the flag    reset(fShipSinking);    [ use vRockSize as a counter    vRockSize = 7;    }  [ if counter is initiated  if (vRockSize > 6)    {    [ increment counter    ++vRockSize;    [ when counter reaches 26 (+19 cycles)    if (vRockSize == 26)      {      [ change status to death by hitting iceberg      EgoHealthStatus = 28;      [ switch to sinking ship cutscene (normal)      new.room(cs.SinkingShipClear); [ ##LE002##      }    }  }  [ if off the coast of South Americaif (CurrentTripTime != 9 && CurrentTripTime != 11)  {  [ reading man will randomly flip pages ( programmers  [ didn't bother to check if he still has the Bible; if he  [ doesn't, this code doesn't do anything, since the loop  [ assigned to oReadingMan only has one cel)  [ programmers also don't bother checking current value of  [ vFlipStatus; it doesn't affect the cycling of the loop,  [ but it's not good coding      [ random chance reading man flips page  random(1, 40, vFlipStatus);  [ one in 40 chance  if (vFlipStatus == 23)    {    [ cycle the view to flip a page    end.of.loop(oReadingMan, fDoneFlipping);    }  [ if done flipping  if (isset(fDoneFlipping))    {    [ reset back to first cel    reset(fDoneFlipping);    set.cel(oReadingMan, 0);    }  }  [ if Jerrod is near the bunkroom door and it is closedif (posn(ego, 23, 106, 35, 106) && (isset(fDoorClosed)))  {  [ open it  reset(fDoorClosed);  end.of.loop(oDoor, fDoorOpen);  }  [ if Jerrod is NOT by bunkroom door, and it's openif (!posn(ego, 23, 106, 35, 106) && (isset(fDoorOpen)))  {  [ close it  reset(fDoorOpen);  reverse.loop(oDoor, fDoorClosed);  }  [ **************************************[ CHECK FOR AN EXIT CONDITION[ **************************************if (edgeEgoHit == LEFT_EDGE)  {  new.room(rm.ShipMidInterior); [ ##LE003##  }  [ **************************************[ PROCESS PLAYER INPUT[ **************************************[ if player hasn't provided input no need to do said testsif (!isset(haveInput))  {  goto(Done);  }  [ talk to boy/manif ((said("speak", "boy") || said("speak")))  {  [ if near the reading man or in bunkroom  if ((posn(ego, 39, 57, 75, 57) || posn(ego, 76, 57, 105, 57)))    {    [ near the reading man    if (posn(ego, 39, 57, 75, 57))      {      [ if Jerrod already has the Bible      if (has("Bible"))        {        print("\"What are you going to do with all this time you have on your "              "hands?\" you ask the man.");        print("He replies, \"It's a long voyage to those gold fields. I figure "              "I'm just going to relax and enjoy the ride.\"");        }      else        {        [ the reading man has the Bible        print("You say to the man reading the book, \"We are on our way to "              "California, but we have a long trip ahead of us.\"");        print("The man continues, \"You are right, it's going to be a long trip "              "and you will want something to read.\"");        [ he offers it to Jerrod        print("\"Take this book. I'd like to give it to you; please take it.\"");        [ Jerrod accepts        sound(s.AddToScore, fSoundDone2);        print("You say, \"Thank you!\"");        print.at("\"You're welcome!\"", 2, 16, 17);        [ take the Bible        get("Bible");        [ score 7 points        currentScore  += 7;        [ change loop to show man without the Bible        set.loop(oReadingMan, 5);        }      }    else      {      [ in bunkroom, Jerrod chats with the men      print("You ask these men, \"How much gold do you figure you're going to "            "take out of those California hills?\"");      print("One of the men replies, \"I'm not greedy. If I can fill my hat "            "with gold everyday, I'll be happy!\"");      print("The other man replies, \"I fear we will arrive in California too "            "late. By the time we get there, most of the gold may be gone!\"");      }    }  else    {    print("Get a little closer.");    }  }  [ look manif (said("examine", "boy"))  {  [ if near the reading man or in the bunkroom  if ((posn(ego, 0, 57, 75, 57) || posn(ego, 76, 57, 105, 57)))    {    [ near the reading man    if (posn(ego, 0, 57, 75, 57))      {      [ if Jerrod already has the Bible      if (has("Bible"))        {        print("The long days, filled with nothing to do, don't seem to bother "              "this man. He's perfectly content to bask in the sun.");        }      else        {        print("Reading a good book helps this man pass the time.");        }      }    else      {      print("These men are standing in the bow because they want to be the "            "first ones to California!");      }    }  else    {    print("Get a little closer.");    }  }    [ look at Bibleif ((said("examine", "Bible") || said("examine", "book")))  {  [ if Jerrod does NOT have the Bible yet  if (!has("Bible"))    {    [ if near the reading man (who has the Bible)    if (posn(ego, 47, 57, 67, 57))      {      print("It is a black bound book with pages edged with gold.");      print("It definitely resembles what some folks would call \"The Good "            "Book\", the Bible.");      }    else      {      print("Get a little closer.");      }    }  }  [ take Bible/ask boy for Bibleif ((said("acquire", "Bible") ||     said("acquire", "book") ||     said("ask", "Bible") ||     said("ask", "book") ||     said("ask", "boy", "book") ||     said("ask", "boy", "Bible") ||     said("ask", "boy", "read", "book") ||     said("ask", "boy", "read", "Bible") ||     said("ask", "read", "Bible") ||     said("ask", "read", "book")))  {  [ if Jerrod already has the Bible  if (has("Bible"))    {    print("You already have the Bible.");    }  else    {    [ if near the reading man    if (posn(ego, 47, 57, 67, 57))      {      [ you can't just take the man's Bible!      print("The Bible is not yours.");      [ luckily he's a nice guy, and offers it to you even      [ though you tried to take it      print("However, the man has just finished reading the Bible and offers to "            "give it to you.");      print("You graciously receive it.");      sound(s.AddToScore, fSoundDone2);      print("You say, \"Thank you!\"");      print.at("\"You're welcome!\"", 2, 16, 17);      [ take the Bible      get("Bible");      [ score 7 points      currentScore  += 7;      [ change loop to show man without the Bible      set.loop(oReadingMan, 5);      }    else      {      print("Get a little closer.");      }    }  }  [ look aroundif ((said("examine", "around") ||     said("examine", "boat") ||     said("examine")))  {  [ if on top deck  if (EgoY == 57)    {    print("This is the forward section of the top deck.");    print("You see people enjoying the fresh air and also notice a ladder "          "leading to the lower decks.");    }  [ on ladder  if (EgoY > 57 && EgoY < 106)    {    print("You are on the ladder between the top deck and main deck.");    }  [ on main deck  if (EgoY == 106)    {    [ depending on X position, either in the bunk room or    [ just outside of it    if (EgoX > 33)      {      print("You are in the bunk room.");      }    else      {      print("You are just outside of the bunk room.");      }    }  }  [ look top deckif (said("examine", "top", "deck"))  {  print("The top deck is affectionately called the sun, rain, hail, snow and "        "sleet deck!");  }  [ look main deckif (said("examine", "main", "deck"))  {  [ this response gets shown no matter where Jerrod is there  [ should probably be a position check here  print("You are just outside of the bunk room.");  }  [ look at bunk roomif (said("examine", "bed", "around"))  {  [ if in the bunk room  if (posn(ego, 34, 106, 150, 106))    {    [ if after the storm    if (CurrentTripTime > StormTime)      {      [ if string hasn't been picke up yet      if (StringStatus == 0)        {        [ give clue that string is there to pick up        print("The bunk room looks bare since the storm. Everything had to be "              "thrown overboard. In the process, some string was left on the "              "floor.");        }      else        {        print("The bunk room looks bare since the storm. Everything had to be "              "thrown overboard.");        }      }    else      {      print("The bunk room is neat considering the number of people sharing it. "            "But, so far, it's been smooth sailing.");      }    }  else    {    print("You are not in the bunk room.");    }  }  [ get stringif (said("acquire", "string"))  {  [ if Jerrod currentlty has the string  if (StringStatus == 1)    {    print("You already have some string.");    }  else    {    [ if Jerrod is in the bunk room    if (posn(ego, 34, 106, 150, 106))      {      [ if string hasn't been picked up yet      if (StringStatus == 0)        {        [ if storm has already passed        if (CurrentTripTime > StormTime)          {          print("Thinking that the string might come in handy someday, you pick "                "it up and put it in your pocket.");          [ get the string, score 3 points          sound(s.AddToScore, fSoundDone2);          currentScore  += 3;          StringStatus = 1;          get("String");          }        else          {          print("There's no string here now.");          }        }      else        {        print("There's no string here now.");        }      }    else      {      print("You see no string right here.");      }    }  }  [ look stringif (said("examine", "string"))  {  [ if in the bunk room  if (posn(ego, 34, 106, 150, 106))    {    [ and storm has passed    if (CurrentTripTime > StormTime)      {      [ and string is still on floor      if (StringStatus == 0)        {        print("There is a long piece of string on the floor.");        }      else        {        print("There's no string here now.");        }      }    else      {      print("There's no string here now.");      }    }  else    {    print("You see no string right here.");    }  }[ look deckif (said("examine", "deck"))  {  [ if in bunk room  if (posn(ego, 34, 106, 150, 106))    {    [ and storm has passed    if (CurrentTripTime > StormTime)      {      [ and string hasn't been picked up yet      if (StringStatus == 0)        {        [ WHAT THE HECK??? looks like a bug! this message        [ makes no sense; it should say something like         [ 'there is a string on the floor'        print("The lowest level of the ship fills with water and the ship is on "              "its way down in some of the most frigid water in the world.");        }      else        {        print("You notice nothing unusual right now.");        }      }    else      {      print("You notice nothing unusual right now.");      }    }  else    {    print("You see nothing important right here.");    }  }  [ eat ham/bacon/pigif ((said("eat", "bacon") ||     said("eat", "meat") ||     said("eat", "bacon", "meat")))  {  [ if Jerrod has the piece of ham  if (isset(HasHam))    {    [ random chance the meat is OK    random(0, 9, vBadHam);    [ only ONE in TEN chance the ham is safe    if (vBadHam == 0)      {      print("You eat the piece of ham you have been carrying around. It really "            "hits the spot!");      [ checking this flag isn't necessary; once this flag      [ gets set, Jerrod doesn't have the ham anymore so      [ Jerrod can't eat it again      if (!isset(AteHam))        {        [ eat it, score 3 points        set(AteHam);        if (!isset(ScoreEatHam))          {          sound(s.AddToScore, fSoundDone2);          currentScore  += 3;          }        }      drop("Piece of ham");      reset(HasHam);      [ if not on a ladder, make sure normal view is set (in      [ case it was the sick Jerrod view)      if (!isset(fOnLadder))        {        set.view(ego, vw.JerrodNY);        }      [ and Jerrod is no longer sick      reset(SickAtSea);      }    else      {      [ NINE in TEN chance the ham is BAD      print("As soon as you sink your teeth into this piece of meat, you "            "realize something terrible is about to happen.");      print("That pig had some type of disease that poisoned the meat. It looks "            "like your trip is over!");      [ Jerrod is gonna die from eating tainted meat      set(DyingAtSea);      set(fAteBadMeat);      }    }  else    {    print("How can you do that? You don't have anything to eat!");    }  }  [ go fishingif ((said("go", "fish") ||     said("go", "fishing") ||     said("fish") ||     said("acquire", "fish") ||     said("catch", "fish")))  {  print("Fishing would be fun, and maybe helpful, but there is a better place!");  }  [ look bed/bunkif (said("examine", "bed"))  {  [ if in the bunk room  if (posn(ego, 34, 106, 159, 106))    {    print("Some bunks are neat, others are a mess!");    }  else    {    print("You are not in the bunk room.");    }  }  [ climb ladderif ((said("go", "ladder") ||     said("go", "up", "ladder") ||     said("go", "down", "ladder") ||     said("use", "ladder") ||     said("climb", "ladder")))  {  print("Go ahead and climb on!");  }  [ look riggingif ((said("examine", "rope") ||     said("examine", "rigging")))  {  print("The rigging on the Sea Farer isn't nearly as complicated as on some "        "clippers you've seen.");  }  [ look mastif (said("examine", "mast"))  {  print("Made of strong wood the mast goes through both decks to the keel, "        "making a sturdy structure.");  }  [ look paddle wheelif ((said("examine", "wheel") ||     said("examine", "paddle", "wheel") ||     said("examine", "paddle")))  {  print("The paddles are turning, propelling the ship without the wind's aid.");  }  [ look ladderif (said("examine", "ladder"))  {  print("The ladder provides access between the top deck and the main deck.");  }  [ look doorif (said("examine", "door"))  {  print("This is the door to the bunk room.");  }  [ open doorif (said("open", "door"))  {  if (isset(fDoorClosed))    {    print("Just walk up to it.");    }  else    {    print("The door is open.");    }  }  [ close doorif (said("close", "door"))  {  if (isset(fDoorOpen))    {    print("Just walk away from it.");    }  else    {    print("The door is closed.");    }  }  [ look oceanif ((said("examine", "water") ||     said("examine", "ocean")))  {  [ if on top deck  if (posn(ego, 0, 57, 130, 57))    {    print("The ocean stretches as far as the eye can see.");    }  else    {    print("You can't do that from here.");    }  }  [ look engineif (said("examine", "engine"))  {  [ if below deck  if (posn(ego, 0, 88, 35, 106))    {    print("That engine sure looks powerful!");    }  else    {    print("You can't do that from here.");    }  }  [ look landif ((said("examine", "island") || said("examine", "land")))  {  [ if on top deck  if (posn(ego, 0, 57, 130, 57))    {    print("The ship passes an occasional island.");    }  else    {    print("You can't do that from here.");    }  }  [ look icebergif (said("examine", "iceberg"))  {  [ if on top deck  if (posn(ego, 0, 57, 130, 57))    {    [ if off the coast of South America    if ((CurrentTripTime == 9 || CurrentTripTime == 11))      {      print("You see icebergs bobbing in the frigid sea.");      }    else      {      print("There are no icebergs in sight.");      }    }  else    {    print("You can't do that from here.");    }  }  [ look rockif (said("examine", "rock"))  {  [ if on top deck  if (posn(ego, 0, 57, 130, 57))    {    print("You can't see the rocks through the water.");    }  else    {    print("You can't do that from here.");    }  }  [ read Bible[ (This will only get processed if Jerrod doesn't have the[ Bible. if he DOES have it, the main logic will process[ the 'read Bible' inputif ((said("read", "book") ||     said("read", "Bible")))  {  print("You don't have a %w2!");  }  Done:[ call main timing logiccall(lgc.CapeTripTiming);return();[ **************************************[ MESSAGES[ **************************************#message 1 "You feel the ship shaking from hitting the iceberg, but the hull continues to hold out the water."#message 2 "The iceberg once again pounds the side of the ship, but this time the force is too much for the hull to withstand."#message 3 "The wretched iceberg punctures the shell of the ship, flooding the lower levels."#message 4 "The end is near."#message 5 "You ask these men, \"How much gold do you figure you're going to take out of those California hills?\""#message 6 "One of the men replies, \"I'm not greedy. If I can fill my hat with gold everyday, I'll be happy!\""#message 7 "This rock has done serious damage to the hull of the ship."#message 8 "The captain orders the crew and passengers to abandon ship, but it is too late."#message 9 "The lowest level of the ship fills with water and the ship is on its way down in some of the most frigid water in the world."#message 10 "The long days, filled with nothing to do, don't seem to bother this man. He's perfectly content to bask in the sun."#message 11 "Reading a good book helps this man pass the time."#message 12 "These men are standing in the bow because they want to be the first ones to California!"#message 13 "Get a little closer."#message 14 "It is a black bound book with pages edged with gold."#message 15 "It definitely resembles what some folks would call \"The Good Book\", the Bible."#message 16 "He replies, \"It's a long voyage to those gold fields. I figure I'm just going to relax and enjoy the ride.\""#message 17 "\"What are you going to do with all this time you have on your hands?\" you ask the man."#message 19 "You already have the Bible."#message 20 "The other man replies, \"I fear we will arrive in California too late. By the time we get there, most of the gold may be gone!\""#message 21 "You are in the bunk room."#message 22 "The Bible is not yours."#message 23 "However, the man has just finished reading the Bible and offers to give it to you."#message 24 "You graciously receive it."#message 25 "You say, \"Thank you!\""#message 26 "\"You're welcome!\""#message 27 "You are just outside of the bunk room."#message 29 "The bunk room is neat considering the number of people sharing it. But, so far, it's been smooth sailing."#message 30 "You say to the man reading the book, \"We are on our way to California, but we have a long trip ahead of us.\""#message 31 "The man continues, \"You are right, it's going to be a long trip and you will want something to read.\""#message 32 "\"Take this book. I'd like to give it to you; please take it.\""#message 33 "Thinking that the string might come in handy someday, you pick it up and put it in your pocket."#message 34 "You already have some string."#message 35 "You see no string right here."#message 36 "This is the forward section of the top deck."#message 37 "You see people enjoying the fresh air and also notice a ladder leading to the lower decks."#message 38 "You are on the ladder between the top deck and main deck."#message 39 "There is a long piece of string on the floor."#message 41 "Fishing would be fun, and maybe helpful, but there is a better place!"#message 42 "All the supplies and food are running very low and you are feeling weak to the point of death."#message 43 "Some bunks are neat, others are a mess!"#message 44 "You don't have a %w2!"#message 45 "There's no string here now."#message 46 "You notice nothing unusual right now."#message 69 "You eat the piece of ham you have been carrying around. It really hits the spot!"#message 70 "As soon as you sink your teeth into this piece of meat, you realize something terrible is about to happen."#message 71 "That pig had some type of disease that poisoned the meat. It looks like your trip is over!"#message 72 "How can you do that? You don't have anything to eat!"#message 76 "The top deck is affectionately called the sun, rain, hail, snow and sleet deck!"#message 77 "You are not in the bunk room."#message 78 "The bunk room looks bare since the storm. Everything had to be thrown overboard. In the process, some string was left on the floor."#message 79 "The bunk room looks bare since the storm. Everything had to be thrown overboard."#message 90 "Go ahead and climb on!"#message 91 "The rigging on the Sea Farer isn't nearly as complicated as on some clippers you've seen."#message 92 "Made of strong wood the mast goes through both decks to the keel, making a sturdy structure."#message 93 "You can't do that from here."#message 94 "This is the door to the bunk room."#message 95 "The paddles are turning, propelling the ship without the wind's aid."#message 96 "The ladder provides access between the top deck and the main deck."#message 98 "Just walk up to it."#message 99 "Just walk away from it."#message 100 "The door is closed."#message 101 "The ocean stretches as far as the eye can see."#message 102 "That engine sure looks powerful!"#message 103 "The door is open."#message 104 "There are no icebergs in sight."#message 106 "Just walk away from it."#message 107 "You see nothing important right here."#message 108 "You see icebergs bobbing in the frigid sea."#message 109 "You can't see the rocks through the water."#message 110 "The ship passes an occasional island."