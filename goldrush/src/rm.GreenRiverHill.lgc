[***********************************************************[[ rm.GreenRiverHill[[ This detail room shows the animal teams and wagon going[ down the hill. Depending on whether or not Jerrod [ unhitched the teams first, they either come down and [ get a drink, or drag the wagons down and crash, killing[ Jerrod. Once they have had a drink, they will still crash[ coming down the hill unless Jerrod has used chains to [ lock the wheels.[[***********************************************************[ **************************************[ LOCAL DEFINES[ **************************************#define oTeam1                       o0  [ override ego[ even though ego object is used, it's never set to[ program.control - which turns out not to be a problem[ because the loop/cel and position of the object are[ manually controlled throughout the scene. So it doesn't[ matter if player tries to use direction keys or not. It[ still would be good practice to switch to program.control[ anyway#define oWagon                       o1[ o2 is not used#define oTeam2                       o3#define oWagonTrain                  o4[ v220 through v223 are not used#define vDX                        v224#define vDY                        v225#define vCelValue                  v226#define vOxTimer                   v227#define vTeam2Dist                 v228#define vWagonDist                 v229[ f220 through f223 are not used#define fNoAction                  f224#define fTeam2Moved                f225#define fSndDone                   f226[ **************************************[ FIRST CYCLE ONLY[ **************************************if (isset(newRoom))  {  [ load main timing logic  load.logics(lgc.WagonTripTiming);    [ load current room picture  load.pic(currentRoom);    [ load the view needed in the scene  load.view(vw.GreenRiverArt);    [ load the only sound used in the room  load.sound(s.AddToScore);    [ draw the curren room picture  draw.pic(currentRoom);    [ wagon train (those that remain at top of hill)  animate.obj(oWagonTrain);  set.view(oWagonTrain, vw.GreenRiverArt);  set.loop(oWagonTrain, 4);  [ default shows Jerrod's wagon AND animal team gone (they  [ are on the hill going down)  set.cel(oWagonTrain, 1);  fix.loop(oWagonTrain);  position(oWagonTrain, 94, 33);  set.priority(oWagonTrain, 9);  stop.cycling(oWagonTrain);    [ wagon, coming down the hill  animate.obj(oWagon);  set.view(oWagon, vw.GreenRiverArt);  ignore.objs(oWagon);    [ animal team #2, coming down the hill  animate.obj(oTeam2);  set.view(oTeam2, vw.GreenRiverArt);    [ use ego object for animal team #1 (so follow.ego command  [ will make it easier for the other team and wagon follow)  animate.obj(oTeam1);  set.view(oTeam1, vw.GreenRiverArt);  set(CycleAtRest);  start.cycling(oTeam1);    [if wagon is coming down out of control  if (GreenRiverStatus == GR_RUNAWAY_START)    {    [ adjust status    GreenRiverStatus = GR_RUNAWAY_HILL;        [ start with smaller image of wagon (it's further away    [ at start)    set.loop(oWagon, 5);    fix.loop(oWagon);    [ start at top of hill    position(oWagon, 89, 36);    set.priority(oWagon, 9);    draw(oWagon);    [ follow team 1 down the hill    follow.ego(oWagon, 1, fNoAction);        [ smaller image of team 2    set.loop(oTeam2, 6);    fix.loop(oTeam2);    [ start at top of hill, in front of wagon    position(oTeam2, 85, 44);    set.priority(oTeam2, 9);    draw(oTeam2);    [ follow team 1 down the hill    follow.ego(oTeam2, 1, fNoAction);        [ use ego object, small image of team 1    set.loop(oTeam1, 6);    fix.loop(oTeam1);    position(oTeam1, 83, 52);    set.priority(oTeam1, 9);    draw(oTeam1);    }      [ if just oxen are coming down  if (GreenRiverStatus == GR_UNHOOKED)    {    [ adjust status    GreenRiverStatus = GR_UNHOOKED_FAR;    [ show unhitched wagon (with other wagons behind) at top    [ of hill    set.loop(oWagon, 4);    set.cel(oWagon, 0);    fix.loop(oWagon);    ignore.horizon(oWagon);    position(oWagon, 94, 33);    set.priority(oWagon, 9);    draw(oWagon);    stop.cycling(oWagon);        [ smaller image of team 2    set.loop(oTeam2, 6);    fix.loop(oTeam2);    [ start at top of hill    position(oTeam2, 85, 44);    set.priority(oTeam2, 9);    draw(oTeam2);    [ follow team 1 down    follow.ego(oTeam2, 1, fNoAction);        [ smaller image of team 1 (using ego object)    set.loop(oTeam1, 6);    fix.loop(oTeam1);    [ start at top of hill    position(oTeam1, 83, 52);    set.priority(oTeam1, 9);    draw(oTeam1);    }      [ if coming down hill in control  if (GreenRiverStatus == GR_IN_CONTROL)    {    [ adjust status    GreenRiverStatus = GR_IN_CONTROL_FAR;    [ show rest of wagons at top of hill    draw(oWagonTrain);        [ smaller image of wagon    set.loop(oWagon, 5);    fix.loop(oWagon);    [ start at top of hill    position(oWagon, 89, 36);    set.priority(oWagon, 9);    draw(oWagon);        [ smaller image of ox team 2    set.loop(oTeam2, 6);    fix.loop(oTeam2);    [ start at top of hill    position(oTeam2, 85, 44);    set.priority(oTeam2, 9);    draw(oTeam2);    [ follow team 1 down    follow.ego(oTeam2, 1, fNoAction);        [ smaller image of ox team 1 (use ego object)    set.loop(oTeam1, 6);    fix.loop(oTeam1);    [ start at top of hill    position(oTeam1, 83, 52);    set.priority(oTeam1, 9);    draw(oTeam1);    }      [ now show the picture  show.pic();  }  [ **************************************[ EVERY CYCLE[ **************************************[ if wagon is out of control running down hillif (GreenRiverStatus == GR_RUNAWAY_HILL)  {  [ adjust position of team 1 manually, instead of using  [ move.obj; team 2 and wagon will follow automatically    [ if team 1 is on the alarm line  if (isset(egoHitSpecial))    {    [ move left one pixel and down one pixel    vDX = -1; [ 255;    vDY = 1;    reposition(oTeam1, vDX, vDY);    }  else    {    [ otherwise, just move down one pixel    vDX = 0;    vDY = 1;    reposition(oTeam1, vDX, vDY);    }  }  [ when at the crash pointif (GreenRiverStatus == GR_CRASH_POINT)  {  [ adjust status to 'crashing'  GreenRiverStatus = GR_CRASHING;  [ change loop to show the crash  set.loop(oTeam1, 9);  set.cel(oTeam1, 0);  [ adjust position to account for new image  vDX = -10; [ 246;  vDY = 9;  reposition(oTeam1, vDX, vDY);  [ force it to redraw right now  force.update(oTeam1);  [ crash cycles a bit slower  vDX = 3;  cycle.time(oTeam1, vDX);  [ now start the crash sequence  end.of.loop(oTeam1, fNoAction);  [ wagon and team 2 objects no longer needed; they are part  [ of the crash sequence  erase(oWagon);  erase(oTeam2);  }  [ while crashingif (GreenRiverStatus == GR_CRASHING)  {  [ reposition based on current cel value  current.cel(oTeam1, vCelValue);  if (vCelValue == 1)    {    vDX = -2; [ 254;    vDY = 2;    reposition(oTeam1, vDX, vDY);    }  if (vCelValue == 2)    {    vDX = 0;    vDY = 1;    reposition(oTeam1, vDX, vDY);    }  if (vCelValue == 3)    {    vDX = -1; [ 255;    vDY = 1;    reposition(oTeam1, vDX, vDY);    }  if (vCelValue == 4)    {    vDX = -2; [ 254;    vDY = 2;    reposition(oTeam1, vDX, vDY);    }  [ when last cel is reached  if (vCelValue == 5)    {    vDX = -2; [ 254;    vDY = 1;    reposition(oTeam1, vDX, vDY);    [ crash is over    GreenRiverStatus = GR_CRASHED;    [ Jerrod is dead    EgoHealthStatus = 46;    [ load and call logic to handle details    [ of Jerrod's death    load.logics(lgc.DeathOnTrail);    call(lgc.DeathOnTrail);    }  }  [ when team 1 reaches halfway point while running down out[ of controlif (EgoY == 84 && GreenRiverStatus == GR_RUNAWAY_HILL)  {  [ this is the crash point  GreenRiverStatus = GR_CRASH_POINT;  [ wagon and oxen are a bit closer; shift to slightly  [ larger images  set.loop(oTeam1, 8);  set.loop(oTeam2, 8);  set.loop(oWagon, 7);  }  [ if just the oxen teams are coming down the hill  if (GreenRiverStatus == GR_UNHOOKED_FAR)  {  [ adjust position of team 1 manually, instead of using  [ move.obj; team 2 will follow automatically    [ if team 1 is on the alarm line  if (isset(egoHitSpecial))    {    [ move left one pixel and down one pixel    vDX = -1; [ 255;    vDY = 1;    reposition(oTeam1, vDX, vDY);    }  else    {    [ otherwise just move down one pixel    vDX = 0;    vDY = 1;    reposition(oTeam1, vDX, vDY);    }  }  [ when teams get to half way pointif (EgoY == 84 && GreenRiverStatus == GR_UNHOOKED_FAR)  {  [ adjust status  GreenRiverStatus = GR_UNHOOKED_NEAR;  [ they are closer; use larger views  set.loop(oTeam1, 8);  set.loop(oTeam2, 8);  }  [ while team is on bottom half of hillif (GreenRiverStatus == GR_UNHOOKED_NEAR)  {  [ if team one is on the alarm line  if (isset(egoHitSpecial))    {    [ move left one pixel and down one pixel    vDX = -1; [ 255;    vDY = 1;    reposition(oTeam1, vDX, vDY);    }  else    {    [ otherwise just move down one pixel    vDX = 0;    vDY = 1;    reposition(oTeam1, vDX, vDY);    }  }  [ when teams reach bottomif (EgoY > 161 && GreenRiverStatus == 12)  {  [ adjust status  GreenRiverStatus = GR_AT_BOTTOM;  [ move team #2 next to team #1  move.obj(oTeam2, 15, 162, 1, fTeam2Moved);  [ team 1 stops moving/cycling   stop.motion(oTeam1);  stop.cycling(oTeam1);  }  [ when team 2 gets to its destinationif (isset(fTeam2Moved))  {  [ it also stops moving/cycling  reset(fTeam2Moved);  stop.cycling(oTeam2);  }  [ while ox teams are at the bottomif (GreenRiverStatus == GR_AT_BOTTOM)  {  [ increment timer  ++vOxTimer;  [ after 70 cycles  if (vOxTimer == 70)    {    [ reset timer    vOxTimer = 0;    [ animals are done drinking, ready to come back    GreenRiverStatus = GR_RETURNING;    start.cycling(oTeam1);    start.motion(oTeam1);    start.motion(oTeam2);    start.cycling(oTeam2);    [ team two will follow team 1     follow.ego(oTeam2, 1, fNoAction);    }  }  [ while teams are going up hillif (GreenRiverStatus == GR_RETURNING)  {  [ if on alarm line  if (isset(egoHitSpecial))    {    [ just move up one pixel    vDX = 0;    vDY = -1; [ 255;    reposition(oTeam1, vDX, vDY);    }  else    {    [ otherwise move left one pixel and up one pixel    vDX = 1;    vDY = -1; [ 255;    reposition(oTeam1, vDX, vDY);    }  }  [ when teams reach halfway point on returnif (EgoY == 84 && GreenRiverStatus == GR_RETURNING)  {  [ adjust status  GreenRiverStatus = GR_RETURNING_FAR;  [ go back to the smaller images  set.loop(oTeam1, 6);  set.loop(oTeam2, 6);  }  [ while team is climbing top half of hillif (GreenRiverStatus == GR_RETURNING_FAR)  {  [ if on alarm line  if (isset(egoHitSpecial))    {    [ just move up one pixel    vDX = 0;    vDY = -1; [ 255;    reposition(oTeam1, vDX, vDY);    }  else    {    [ otherwise move right one pixel and up one pixel    vDX = 1;    vDY = -1; [ 255;    reposition(oTeam1, vDX, vDY);    }  }[ when teams get to topif (EgoY < 39 && GreenRiverStatus == GR_RETURNING_FAR)  {  [ they are back at the top, ready to be hitched back to  [ the wagon  GreenRiverStatus = GR_TEAM_BACK;  [ done using ego for team 1, so reset cycle at rest flag  reset(CycleAtRest);  [ go back to main Green River room  new.room(rm.GreenRiver); [ ##LE001##  }  [ if coming down the hill, in controlif (GreenRiverStatus == GR_IN_CONTROL_FAR)  {  [ if on alarm line  if (isset(egoHitSpecial))    {    [ move left one pixel and down one pixel    vDX = -1; [ 255;    vDY = 1;    reposition(oTeam1, vDX, vDY);    }  else    {    [ otherwise just move down one pixel    vDX = 0;    vDY = 1;    reposition(oTeam1, vDX, vDY);    }  }  [ at halfway point, while in controlif (EgoY == 84 && GreenRiverStatus == GR_IN_CONTROL_FAR)  {  [ adjust status  GreenRiverStatus = GR_IN_CONTROL_NEAR;  [ animals and teams are closer now; switch to larger  [ images  set.loop(oTeam1, 8);  set.loop(oTeam2, 8);  set.loop(oWagon, 7);  }  [ while in control, bottom half of hillif (GreenRiverStatus == GR_IN_CONTROL_NEAR)  {  [ if on alarm line  if (isset(egoHitSpecial))    {    [ move left one pixel and down one pixel    vDX = -1; [ 255;    vDY = 1;    reposition(oTeam1, vDX, vDY);    }  else    {    [ otherwise, just move down one pixel    vDX = 0;    vDY = 1;    reposition(oTeam1, vDX, vDY);    }  }  [ when team1 gets to bottomif (EgoY == 158 && GreenRiverStatus == GR_IN_CONTROL_NEAR)  {  GreenRiverStatus = GR_FINISHED;  [ let message stay up while sequence ends  set(leaveWindow);  print("Congratulations!!!");    [ done using ego for team 1; reset cycle at rest flag  reset(CycleAtRest);    [ Jerrod is ready to go to next scene in his journey  set(ContinueJourney);  }  [ while coming down hill in controlif (GreenRiverStatus > 29)  {  [ use distances to team 1 determine how to move/position  [ team 2 and the wagon  distance(oTeam1, oWagon, vTeam2Dist);  distance(oTeam1, oTeam2, vWagonDist);  [ keep wagon distance of 8 away from team 1  if (vTeam2Dist > 8)    {    vDX = 1;    step.size(oWagon, vDX);    follow.ego(oWagon, 1, fNoAction);    }  else    {    vDX = 0;    step.size(oWagon, vDX);    }  [ keep team 2 distance of 3 from team 1  if (vWagonDist > 3)    {    vDX = 1;    step.size(oTeam2, vDX);    follow.ego(oTeam2, 1, fNoAction);    }  else    {    vDX = 0;    step.size(oTeam2, vDX);    }  }  [ **************************************[ PROCESS PLAYER INPUT[ **************************************[ if player hasn't provided input no need to do said testsif (!isset(haveInput))  {  goto(Done);  }[ look/look around/look hillif ((said("examine", "around") ||     said("examine", "foot hill") ||     said("examine")))  {  print("This is the treacherous Green River descent!");  }  [ drink waterif ((said("drink", "water") ||     said("acquire", "water")))  {  print("When you get to the bottom of the hill, there will be plenty of water "        "for drinking!");  }  [ look waterif ((said("examine", "water") ||     said("examine", "creek")))  {  print("This is the Green River!");  }  [ climb down hillif ((said("climb", "foot hill") ||     said("climb", "down", "foot hill") ||     said("go", "foot hill") ||     said("go", "down", "foot hill")))  {  print("The only way to get down this hill is in your company wagon!");  }  [ climb up hillif ((said("go", "up", "foot hill") ||     said("climb", "up", "foot hill")))  {  print("Why?  The goal is to get down the hill!");  }  [ look wagonif (said("examine", "cart"))  {  print("At the top of the hill are wagons which have yet to attempt this feat. "        " Strewn across the side of the hill are those that have tried, but "        "failed.");  }  [ look wagon crashesif ((said("examine", "crash") ||     said("examine", "cart", "crash")))  {  print("The side of the hill is covered with wrecked wagons.");  }  [ look rocksif (said("examine", "rock"))  {  print("This is very rocky terrain!");  }  [ look oxenif ((said("examine", "animal") ||     said("examine", "ox") ||     said("examine", "team") ||     said("examine", "animal", "team") ||     said("examine", "ox", "team")))  {  print("You get a distant view of the oxen.");  }  [ put chains on wheelsif ((said("place", "chain", "wheel") ||     said("place", "chain", "cart", "wheel") ||     said("place", "chain", "in", "wheel") ||     said("place", "chain", "in", "cart", "wheel") ||     said("place", "chain") ||     said("place", "chain", "in") ||     said("chain", "wheel") ||     said("chain", "cart", "wheel") ||     said("chain", "in", "wheel") ||     said("chain", "in", "cart", "wheel") ||     said("lock", "wheel") ||     said("lock", "cart", "wheel") ||     said("lock", "wheel", "chain") ||     said("lock", "cart", "wheel", "chain") ||     said("apply", "chain") ||     said("apply", "chain", "wheel") ||     said("apply", "chain", "cart", "wheel") ||     said("tie", "chain") ||     said("tie", "chain", "wheel") ||     said("tie", "chain", "cart", "wheel") ||     said("tie", "chain", "around", "wheel") ||     said("tie", "chain", "around", "cart", "wheel")))  {  [ if crash is imminent or has happened  if (GreenRiverStatus > 1 && GreenRiverStatus < 7)    {    print("That will do you no good now.");    }  else    {    [ if wheels already locked    if (isset(LockedWheels))      {      print("You have already brilliantly locked the wagon wheels with the "            "chain.");      }    else      {      [ only allowed if oxen are in their journey up/down      [ to get water      if (GreenRiverStatus > 9 && GreenRiverStatus < 16)        {        [ play sound        sound(s.AddToScore, fSndDone);        [ lock the wheels        set(LockedWheels);        [ score four points        currentScore  += 4;        print("While the animals are getting water, you put the chains through "              "the wagon wheels to keep the wheels from turning.");        }      }    }  }  [ look brakes/use brakesif ((said("examine", "brake") ||     said("apply", "brake") ||     said("apply", "brake", "wheel") ||     said("apply", "brake", "cart", "wheel") ||     said("use", "brake") ||     said("apply", "cart", "brake") ||     said("brake", "wheel") ||     said("place", "brake") ||     said("set", "brake") ||     said("set", "wheel", "brake") ||     said("set", "cart", "brake") ||     said("brake", "cart", "wheel")))  {  print("This wagon has no brakes.");  }  Done:[ call main timing logiccall(lgc.WagonTripTiming);return();[ **************************************[ MESSAGES[ **************************************#message 1 "Congratulations!!!"#message 2 "This is the treacherous Green River descent!"#message 3 "When you get to the bottom of the hill, there will be plenty of water for drinking!"#message 4 "This is the Green River!"#message 5 "The only way to get down this hill is in your company wagon!"#message 6 "Why?  The goal is to get down the hill!"#message 7 "At the top of the hill are wagons which have yet to attempt this feat.  Strewn across the side of the hill are those that have tried, but failed."#message 8 "The side of the hill is covered with wrecked wagons."#message 9 "This is very rocky terrain!"#message 10 "You get a distant view of the oxen."#message 11 "It's too late for that!"#message 12 "You have already brilliantly locked the wagon wheels with the chain."#message 13 "That will do you no good now."#message 14 "While the animals are getting water, you put the chains through the wagon wheels to keep the wheels from turning."#message 39 "This wagon has no brakes."