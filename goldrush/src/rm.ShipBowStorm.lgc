[***********************************************************[[ rm.ShipBowStorm[[ This room is basically the same as rm.ShipBowInterior, [ except that it shows the stern interior spaces during the[ storm[[***********************************************************[ **************************************[ LOCAL DEFINES[ **************************************#define oEngine                      o1#define oWake                        o2#define oWaves                       o3#define oDoor                        o4#define oLand                        o5#define oRock                        o6#define oIceberg                     o7#define vIcebergTime                v81  [ override TripPoint_20#define vRockTime                   v82  [ override TripPoint_21#define vOvlPic                    v220#define vTmpStep                   v221#define vLandStatus                v222#define vLandStep                  v223#define vRockStatus                v224#define vRockSize                  v225#define vRockStep                  v226#define vIcebergStatus             v227#define fOnLadder                  f220#define fDoorClosed                f221#define fDoorOpen                  f222#define fLandMoved                 f223[ flag 224 is not used#define fRockMoved                 f225#define fShipSinking               f226#define fIcebergMoved              f227#define fDoneDying                 f228#define fSoundDone                 f229[ **************************************[ FIRST CYCLE ONLY[ **************************************if (isset(newRoom))  {  [ (for this room, trip time point can only be 9 or 11  [ since those are the only points where the storm happens  [ programmers just cut/pasted code from other room; they  [ should have cleaned it up)    [ at trip point 2 (beginning of trip) or trip point 9  [ (after Cape Horn, heading north up South America coast)  if ((CurrentTripTime == 2 || CurrentTripTime == 9))    {    [ hold is full    vOvlPic = ovl.FwdHold1;    }  [ at trip point 4 (just before reaching Rio de Janeiro) or  [ at trip point 11 (half way up Pacific coast)  if ((CurrentTripTime == 4 || CurrentTripTime == 11))    {    [ hold is half empty    vOvlPic = ovl.FwdHold2;    }  [ at trip point 15 (last leg of journey, heading into  [ California)  if (CurrentTripTime == 15)    {    [ hold is mostly empty    vOvlPic = ovl.FwdHold3;    }      [ load current room picture and overlay picture  load.pic(currentRoom);  load.pic(vOvlPic);    [ draw picture and add forehold overlay  draw.pic(currentRoom);  overlay.pic(vOvlPic);  [ done with current room picture  discard.pic(currentRoom);    [ load views with art to add to the room  load.view(vw.Pig);  load.view(vw.ShipSternArt);  [ add bunks, with sleeping passengers  add.to.pic(vw.ShipSternArt, 1, 0, 31, 106, 7, 7);  [ pig hangs out in bow of the ship  add.to.pic(vw.Pig, 1, 0, 87, 57, 10, 10);  [ done with pig view  discard.view(vw.Pig);    [ load main timing logic  load.logics(lgc.CapeTripTiming);    [ if trip point time matches either scurvy time or cholera  [ time (this will NEVER be true; the time points for  [ scurvy and cholera will never coincide with the storm;  [ programmers should have cleaned up their code here)  if ((CurrentTripTime == ScurvyTime ||       CurrentTripTime == CholeraTime))    {    [ load sick view (which never gets used)    load.view(vw.SickJerrodNY);    }  else    {    [ otherwise, use normal view (in this room, they didn't    [ use the 2D version of Jerrod that is used in the other    [ ship interior rooms; looks like a minor oversight)    load.view(vw.JerrodNY);    }      [ load other views used in the room  load.view(vw.ClimbingJerrodRight);  load.view(vw.WindyJerrod);  load.view(vw.DyingJerrodNY);  load.view(vw.ShipBowArt);  load.view(vw.OceanItems);  load.view(vw.MidShipArt2);  load.view(vw.StormWaves);    [ load sounds used in the room  load.sound(s.AddToScore);  load.sound(s.RockCrash);    [ land/island that occasionally passes by  animate.obj(oLand);  set.view(oLand, vw.OceanItems);  [ storm only occurs by South America so always use land  [ with less vegetation  set.loop(oLand, 3);  fix.loop(oLand);  set.priority(oLand, 4);  vLandStep = 10;  ignore.objs(oLand);  ignore.blocks(oLand);    [ rock  animate.obj(oRock);  set.view(oRock, vw.OceanItems);  set.loop(oRock, 0);  fix.loop(oRock);  set.priority(oRock, 5);  vRockStep = 2;  ignore.objs(oRock);  ignore.blocks(oRock);    [ iceberg  animate.obj(oIceberg);  set.view(oIceberg, vw.OceanItems);  set.loop(oIceberg, 1);  fix.loop(oIceberg);  set.priority(oIceberg, 5);  ignore.objs(oIceberg);  ignore.blocks(oIceberg);    [ ship's engine  animate.obj(oEngine);  set.view(oEngine, vw.ShipBowArt);  set.loop(oEngine, 0);  set.priority(oEngine, 14);  position(oEngine, 0, 92);  draw(oEngine);  start.cycling(oEngine);    [ waves in front of ship  animate.obj(oWaves);  set.view(oWaves, vw.StormWaves);  set.loop(oWaves, 0);  set.cel(oWaves, 0);  set.priority(oWaves, 5);  position(oWaves, 100, 107);  draw(oWaves);  start.cycling(oWaves);    [ wake at bow of ship  animate.obj(oWake);  set.view(oWake, vw.StormWaves);  set.loop(oWake, 2);  set.cel(oWake, 0);  set.priority(oWake, 14);  position(oWake, 81, 108);  draw(oWake);  start.cycling(oWake);    [ bunkroom door  animate.obj(oDoor);  stop.cycling(oDoor);  set.view(oDoor, vw.MidShipArt2);  set.loop(oDoor, 1);  set.cel(oDoor, 0);  set.priority(oDoor, 8);  ignore.objs(oDoor);  set(fDoorClosed);  position(oDoor, 31, 106);  draw(oDoor);    [ Jerrod  animate.obj(ego);  [ if trip time is not when Jerrod is sick (which is never  [ possible in this room)  if ((CurrentTripTime == ScurvyTime ||       CurrentTripTime == CholeraTime))    {    [ use sick view    set.view(ego, vw.SickJerrodNY);    }  else    {    [ use normal view    set.view(ego, vw.JerrodNY);    }  [ this room is 2D, so set priority and leave it  set.priority(ego, 10);    [ position Jerrod, depending on previous room  if (posn(ego, 0, 56, 5, 58))    {    [ coming from mid ship, upper deck    position(ego, 19, 57);    }  if (posn(ego, 0, 105, 5, 107))    {    [ coming from mid ship, main deck    position(ego, 19, 106);    }  if (previousRoom != rm.ShipMidStorm)    {    [ NOT coming from mid ship    [ (not sure why they specifically adjust value of 'EgoY'    [ here; none of the other positioning  statements do    [ that)    EgoY = 106;    position(ego, 45, 106);    }    [ add Jerrod to screen  draw(ego);    [ now show the picture  show.pic();  }  [ **************************************[ EVERY CYCLE[ **************************************[ if Jerrod is at bottom of ladder, and still on itif (posn(ego, 20, 106, 20, 106) && isset(fOnLadder))  {  [ Jerrod gets off the ladder  reset(fOnLadder);  [ bump position so view appears correctly  TmpX = 1;  TmpY = 0;  [ if not sick or not on last leg of journey (storm is  [ never on last leg, so that's not really an option here)  if (CurrentTripTime != ScurvyTime &&       CurrentTripTime != CholeraTime &&       CurrentTripTime != TripPoint_15)    {    [ use normal view    set.view(ego, vw.JerrodNY);    }  else    {    [ otherwise, assume sick    set.view(ego, vw.SickJerrodNY);    [ if on last leg of journey (storm is never on last leg,    [ so that's not really an option here)    if (CurrentTripTime == TripPoint_15)      {      [ if not sick      if (!isset(SickAtSea))        {        [ restore normal view        set.view(ego, vw.JerrodNY);        }      }    }  [ allow loop to change with direction  release.loop(ego);  [ restore step time to 1  vTmpStep = 1;  step.size(ego, vTmpStep);  reposition(ego, TmpX, TmpY);  }  [ if Jerrod is at bottom of ladder, but not on it yetif (posn(ego, 20, 105, 22, 105) && !isset(fOnLadder))  {  [ bump position so climbing view looks correct  if (posn(ego, 20, 105, 20, 105))    {    TmpX = 0;    }  if (posn(ego, 21, 105, 21, 105))    {    TmpX = -1; [ 255;    }  [ no check for 22; shouldn't it adjust position by -2?    [ Jerrod is now on the ladder  set(fOnLadder);  TmpY = -1; [ 255;  set.view(ego, vw.ClimbingJerrodRight);  [ set and fix the loop  set.loop(ego, 0);  fix.loop(ego);  [ adjust step time to 2  vTmpStep = 2;  step.size(ego, vTmpStep);  reposition(ego, TmpX, TmpY);  }  [ if Jerrod is at top of ladder and still on itif (posn(ego, 20, 72, 20, 72) && isset(fOnLadder))  {  [ Jerrod gets off the ladder  reset(fOnLadder);  [ bump position so normal view looks correct  TmpX = 1;  TmpY = -15; [ 241;  [ Jerrod is topside in the storm; show 'windy' view  set.view(ego, vw.WindyJerrod);  [ allow loop to change with direction  release.loop(ego);  [ reset step time to 1  vTmpStep = 1;  step.size(ego, vTmpStep);  reposition(ego, TmpX, TmpY);  }  [ if Jerrod is due to get scurvy (which will never be true[ in this room)if (CurrentTripTime == ScurvyTime)  {  [ if currently healthy  if (EgoHealthStatus == 0)    {    [ if he's ready to die    if (isset(DyingAtSea))      {      [ can only die if he's on main deck (not topside, or      [ on ladder)      if (EgoY == 106)        {        [ reset the flag        reset(DyingAtSea);        [ change view to Jerrod dying        set.view(ego, vw.DyingJerrodNY);        [ make sure to start with first cel        set.cel(ego, 0);        [ start cycling        end.of.loop(ego, fDoneDying);        [ allow ego object to cycle when not moving        set(CycleAtRest);        }      }    [ after Jerrod finishes dying    if (isset(fDoneDying))      {      [ reset the flag      reset(fDoneDying);      [ stop updating Jerrod      stop.update(ego);      [ set his health status to death by scurvy      EgoHealthStatus = 20;      load.logics(lgc.DeathScurvy);      [ load and call final death logic      call(lgc.DeathScurvy);      }    }  }  [ if Jerrod is due to get cholera (which will never be true[ in this room)if (CurrentTripTime == CholeraTime)  {  [ if currently healthy  if (EgoHealthStatus == 0)    {    [ if he's ready to die    if (isset(DyingAtSea))      {      [ can only die if he's on main deck      [ (not topside, or on ladder)      if (EgoY == 106)        {        [ reset the flag        reset(DyingAtSea);        [ change view to Jerrod dying        set.view(ego, vw.DyingJerrodNY);        [ make sure to start with first cel        set.cel(ego, 0);        [ start cycling        end.of.loop(ego, fDoneDying);        [ allow ego object to cycle when not moving        set(CycleAtRest);        }      }    [ after Jerrod finishes dying    if (isset(fDoneDying))      {      [ reset the flag      reset(fDoneDying);      [ stop updating Jerrod      stop.update(ego);      [ set health status to death by cholera      EgoHealthStatus = 21;      [ load and call final death logic      load.logics(lgc.DeathCholera);      call(lgc.DeathCholera);      }    }  }  [ if Jerrod is near the bunkroom door and it is closedif (posn(ego, 23, 106, 35, 106) && (isset(fDoorClosed)))  {  [ open it  reset(fDoorClosed);  end.of.loop(oDoor, fDoorOpen);  }[ if Jerrod is NOT by bunkroom door, and it's openif (!posn(ego, 23, 106, 35, 106) && (isset(fDoorOpen)))  {  [ close it  reset(fDoorOpen);  reverse.loop(oDoor, fDoorClosed);  }  [ if no rock in sightif (vRockStatus != 250)  {  [ random chance a rock will appear  random(210, 249, vRockStatus);  [ one in 40 chance  if (vRockStatus == 230)    {    [ rock is now visible    vRockStatus = 250;    [ if trip time matches time to sink from hitting a rock    if (CurrentTripTime == vRockTime)      {      [ use largest rock      vRockSize = 0;      set.cel.v(oRock, vRockSize);      }    else      {      [ randomly choose a rock size      random(0, 5, vRockSize);      set.cel.v(oRock, vRockSize);      }    [ position rock on right edge of screen    position(oRock, 140, 167);    draw(oRock);    stop.cycling(oRock);    [ move it to left (simulate ship passing it by)    move.obj(oRock, 45, 167, 1, fRockMoved);    step.time(oRock, vRockStep);    }  }  [ when rock gets to the shipif (isset(fRockMoved))  {  reset(fRockMoved);  [ two in six chance it's bad  if ((vRockSize == 0 || vRockSize == 1))    {    [ ship hits rock; play sound    sound(s.RockCrash, fSoundDone);    [ for any monitor EXCEPT VGA    if (monitorType != VGA)      {      [ shake screen five times      shake.screen(5);      }    [ if trip time matches time to sink by hitting a rock    if (CurrentTripTime == vRockTime)      {      [ if Jerrod is currently OK      if (EgoHealthStatus == 0)        {        [ he's not OK anymore...        print("This rock has done serious damage to the hull of the ship.");        print("The captain orders the crew and passengers to abandon ship, but "              "it is too late.");        print("Sea water rushes through the gaping hole. The ship is on its way "              "to the ocean floor in some of the most frigid water in the "              "world.");        }      [ ship is now going to sink      set(fShipSinking);      }    }  [ three in six chance the rock isn't too bad  if ((vRockSize == 2 || vRockSize == 3 || vRockSize == 4))    {    [ ship hits rock; play sound    sound(s.RockCrash, fSoundDone);    [ for any monitor type EXCEPT VGA    if (monitorType != VGA)      {      [ shake screen three times      shake.screen(3);      }    [ increment status so randomizer can find another rock    ++vRockStatus;    }  [ one is six chance ship just grazes the rock  if (vRockSize == 5)    {    [ ship hits rock; play sound    sound(s.RockCrash, fSoundDone);    [ for any monitor EXCEPT VGA    if (monitorType != VGA)      {      [ shake screen once      shake.screen(1);      }    ++vRockStatus;    [ increment status so randomizer can find another rock    }  [ rock is now out of view; remove it from screen  erase(oRock);  }  [ if trip timer matches time for rock to sink shipif (CurrentTripTime == vRockTime)  {  [ if ship hit rock and is sinking  if (isset(fShipSinking))    {    [ reset the flag    reset(fShipSinking);    [ use vRockSize as a counter    vRockSize = 7;    }  [ if counter is initiated  if (vRockSize > 6)    {    [ increment timer    ++vRockSize;    [ when counter reaches 26 (+19 cycles)    if (vRockSize == 26)      {      [ set status to sinking by hitting a rock      EgoHealthStatus = 27;      [ switch to sinking ship cutscene (storm)      new.room(cs.SinkingShipStorm); [ ##LE001##      }    }  }  [ if no iceberg is on screenif (vIcebergStatus != 250)  {  [ random chance an iceberg appears  random(210, 249, vIcebergStatus);  [ one in 40 chance  if (vIcebergStatus == 230)    {    [ iceberg is visible    vIcebergStatus = 250;    [ position it on right edge of screen    position(oIceberg, 143, 126);    draw(oIceberg);    [ move it to left (simulate ship passing it by)    move.obj(oIceberg, 69, 126, 1, fIcebergMoved);    [ use same step time as rock    step.time(oIceberg, vRockStep);    }  }  [ when iceberg reaches shipif (isset(fIcebergMoved))  {  [ reset flag  reset(fIcebergMoved);  [ iceberg hits; play sound  sound(s.RockCrash, fSoundDone);  [ for any monitor EXCEPT VGA  if (monitorType != VGA)    {    [ shake screen three times    shake.screen(3);    }  [ iceberg is behind/past ship; remove it from screen  erase(oIceberg);  [ set status so randomizer can find another iceberg  ++vIcebergStatus;  [ increment count of iceberg hits  ++IcebergCounter;  if (IcebergCounter == 2)    {    [ set rock status, so no rock hits occur  while ship is    [ sinking due to iceberg hit    vRockStatus = 250;    [ it trip time point is time for iceberg to sink the    [ ship    if (CurrentTripTime == vIcebergTime)      {      [ if Jerrod is currently OK      if (EgoHealthStatus == 0)        {        [ he isn't OK anymore...        print("The iceberg once again pounds the side of the ship, but this "              "time the force is too much for the hull to withstand.");        print("The wretched iceberg punctures the shell of the ship, flooding "              "the lower levels.");        print("The end is near.");        }      set(fShipSinking);      }    }  else    {    [ empty block; there was probably something here at one    [ point but it appears to have been deleted    }  }  [ if trip time point matches time for iceberg to sink shipif (CurrentTripTime == vIcebergTime)  {  [ if ship is set to sink  if (isset(fShipSinking))    {    [ reset the flag    reset(fShipSinking);    [ use vRockSize as a counter    vRockSize = 7;    }  [ if counter is initiated  if (vRockSize > 6)    {    [ increment counter    ++vRockSize;    [ when counter reaches 26 (+19 cycles)    if (vRockSize == 26)      {      [ change status to death by hitting iceberg      EgoHealthStatus = 28;      [ switch to sinking ship cutscene (storm)      new.room(cs.SinkingShipStorm); [ ##LE002##      }    }  }  [ if currently no land in sightif (vLandStatus != 250)  {  [ random chance land appears  random(210, 249, vLandStatus);  [ one in 40 chance  if (vLandStatus == 230)    {    [ make sure first cel is selected    set.cel(oLand, 0);    [ set status to show land is visible    vLandStatus = 250;    [ postition it on right edge of screen    position(oLand, 123, 107);    draw(oLand);    [ there's only one cel, so stop.cycling doesn't    [ actually do anything    stop.cycling(oLand);    [ move it to left edge (simulate ship passing it by)    move.obj(oLand, 48, 107, 1, fLandMoved);    step.time(oLand, vLandStep);    }  }  [ when land has passed byif (isset(fLandMoved))  {  [ remove it from screen  reset(fLandMoved);  erase(oLand);  [ increment status so randomizer can find more land  ++vLandStatus;  }  [ if Jerrod is on top deck, and hasn't set flag yetif (EgoY == 57 && !isset(OnDeckInStorm))  {  [ Jerrod is caught in the storm  set(OnDeckInStorm);  [ adjust position so windy view appears correctly  TmpX = -1; [ 255;  TmpY = 0;  reposition(ego, TmpX, TmpY);  [ switch to 'windy' view  set.view(ego, vw.WindyJerrod);  [ cycle the view   start.cycling(ego);  [ and allow ego object to cycle at rest  set(CycleAtRest);  }  [ if Jerrod is on top deck in the stormif (isset(OnDeckInStorm))  {  [ if trying to move to the right  if (egoDir == RIGHT)    {    [ not allowed; he stands in place    vTmpStep = 0;    step.size(ego, vTmpStep);    }  else    {    [ any other direction, wind blows him     [ to the left    egoDir = LEFT;    [ and he moves FAST    vTmpStep = 4;    step.size(ego, vTmpStep);    }  }  [ **************************************[ CHECK FOR AN EXIT CONDITION[ **************************************if (edgeEgoHit == LEFT_EDGE)  {  new.room(rm.ShipMidStorm); [ ##LE003##  }  [ **************************************[ PROCESS PLAYER INPUT[ **************************************[ if player hasn't provided input no need to do said testsif (!isset(haveInput))  {  goto(Done);  }  [ look/look aroundif ((said("examine", "around") ||     said("examine", "boat") ||     said("examine")))  {  [ response depends on Jerrod's location    [ on top deck  if (EgoY == 57)    {    print("You are on the sun, rain, snow, hail, and sleet deck.");    print("This is not the place to be at a time like this!");    print("Things don't look too good for you!");    }  [ on ladder between decks  if (EgoY > 57 && EgoY < 106)    {    print("You are on the ladder between the top deck and main deck.");    }  [ on main deck  if (EgoY == 106)    {    [ in the bunk room    if (EgoX > 33)      {      print("You are in the bunk room, the most popular spot to wait out the "            "storm.");      }    else      {      print("You are just outside of the bunk room.");      }    }  }  [ look bunk roomif (said("examine", "bed", "around"))  {  [ if in the bunk room  if (posn(ego, 34, 106, 150, 106))    {    [ if string hasn't been picke up yet    if (StringStatus == 0)      {      print("The bunk room has just been emptied to lighten the ship. "            "Everything that wasn't nailed down is gone. The floor is a mess.");      }    else      {      print("The bunk room has just been emptied to lighten the ship. "            "Everything that wasn't nailed down is gone.");      }    }  else    {    print("You are not in the bunk room.");    }  }  [ look pigif (said("examine", "bacon"))  {  [ if on stairs, able to see top deck  if (EgoY < 85)    {    print("That poor pig looks like it is freezing its curly little tail off!");    }  else    {    print("From here you can't see the pig.");    }  }  [ eat bacon/ham/pigif (said("eat", "bacon"))  {  print("Go ahead and give it a try, if you can get to it!");  }  [ look bedsif (said("examine", "bed"))  {  [ if in bunk room  if (posn(ego, 34, 106, 159, 106))    {    print("The bunks are filled, but no one is sleeping. Everyone knows that "          "mother nature could crack this ship like an egg.");    }  else    {    print("You are not in the bunk room.");    }  }  [ look skyif (said("examine", "sky"))  {  [ response doesn't consider location, like some of the  [ other inquiries  print("The sky is dark and dreary.");  }  [ go fishingif ((said("go", "fish") ||     said("go", "fishing") ||     said("fish") ||     said("acquire", "fish") ||     said("catch", "fish")))  {  print("They won't be biting today!");  }  [ get stringif (said("acquire", "string"))  {  [ if Jerrod already has the string  if (StringStatus == 1)    {    print("You have the string from the bunk room and don't see any more.");    }  else    {    [ if in the bunk room    if (posn(ego, 34, 106, 150, 106))      {      [ if string is still on floor      if (StringStatus == 0)        {        sound(s.AddToScore, fSoundDone);        print("Thinking that the string might come in handy someday, you pick "              "it up and put it in your pocket.");        [ score three points        currentScore  += 3;        [ get the string        StringStatus = 1;        get("String");        }      else        {        print("There's no string here now.");        }      }    else      {      print("There is no string right here.");      }    }  }  [ look stringif (said("examine", "string"))  {  [ if in bunk room  if (posn(ego, 34, 106, 150, 106))    {    [ if string is still on the floor    if (StringStatus == 0)      {      print("There is a long piece of string on the floor.");      }    else      {      print("There's no string here now.");      }    }  else    {    print("There is no string right here.");    }  }  [ climb ladderif ((said("go", "ladder") ||     said("go", "up", "ladder") ||     said("go", "down", "ladder") ||     said("use", "ladder") ||     said("climb", "ladder")))  {  print("Go ahead and climb on!");  }  [ look riggingif ((said("examine", "rope") ||     said("examine", "rigging")))  {  print("The rigging on the Sea Farer isn't nearly as complicated as on some "        "clippers you've seen.");  }  [ look mastif (said("examine", "mast"))  {  print("Made of strong wood, the mast goes through both decks to the keel, "        "making a sturdy structure.");  }  [ look wheelif ((said("examine", "wheel") ||     said("examine", "paddle", "wheel") ||     said("examine", "paddle")))  {  print("The paddles are turning, propelling the ship without the wind's aid.");  }  [ look ladderif (said("examine", "ladder"))  {  print("This ladder provides access between two decks of the ship.");  }  [ look doorif (said("examine", "door"))  {  print("This is the door to the bunk room.");  }  [ look deckif (said("examine", "deck"))  {  [ if in bunk room  if (posn(ego, 34, 106, 150, 106))    {    [ if string is still on floor    if (StringStatus == 0)      {      print("There is a long piece of string on the floor.");      }    else      {      print("You see nothing important here now.");      }    }  else    {    print("You see nothing important right here.");    }  }  [ open doorif (said("open", "door"))  {  if (isset(fDoorClosed))    {    print("Just walk up to it.");    }  else    {    print("The door is open.");    }  }  [ close doorif (said("close", "door"))  {  if (isset(fDoorOpen))    {    print("Just walk away from it.");    }  else    {    print("The door is closed.");    }  }  [ look oceanif ((said("examine", "water") || said("examine", "ocean")))  {  if (posn(ego, 0, 57, 130, 57))    {    print("The ocean stretches as far as the eye can see.");    }  else    {    print("You can't do that from here.");    }  }  [ look engineif (said("examine", "engine"))  {  [ if near the engine  if (posn(ego, 0, 88, 35, 106))    {    print("That engine sure looks powerful.");    }  else    {    print("You can't do that from here.");    }  }  [ look landif ((said("examine", "island") || said("examine", "land")))  {  [ if topside  if (posn(ego, 0, 57, 130, 57))    {    [ doesn't acknowledge that Jerrod is being blown    [ overboard like some of the other rooms    print("An occasional island passes by the ship.");    }  else    {    print("You can't do that from here.");    }  }  [ look icebergif (said("examine", "iceberg"))  {  [ if topside  if (posn(ego, 0, 57, 130, 57))    {    [ time is always 9 or 11 when there's a storm so this    [ check isn't necessary    if ((CurrentTripTime == 9 || CurrentTripTime == 11))      {      [ also, response doesn't acknowledge that Jerrod is      [ being blown overboard      print("You see icebergs bobbing in the frigid sea.");      }    else      {      print("You can't do that from here.");      }    }  else    {    print("You can't do that from here.");    }  }  [ look rockif (said("examine", "rock"))  {  [ if topside  if (posn(ego, 0, 57, 130, 57))    {    [ doesn't acknowledge that Jerrod is being blown    [ overboard    print("You can't see the rocks through the water.");    }  else    {    print("You can't do that from here.");    }  }  [ talk to manif ((said("speak", "boy") || said("speak")))  {  [ if in the bunk room  if (posn(ego, 34, 106, 150, 106))    {    print("None of these men are interested in talking right now. They are busy "          "worrying whether the ship will survive the storm.");    }  else    {    print("You can't do that from here.");    }  }  [ look manif (said("examine", "boy"))  {  [ if in bunk room  if (posn(ego, 34, 106, 150, 106))    {    print("These men are weathering the storm in the bunk room.");    }  else    {    print("You can't do that from here.");    }  }  Done:[ call the main timing logiccall(lgc.CapeTripTiming);return();[ **************************************[ MESSAGES[ **************************************#message 6 "That poor pig looks like it is freezing its curly little tail off!"#message 7 "From here you can't see the pig."#message 8 "Go ahead and give it a try, if you can get to it!"#message 9 "These men are weathering the storm in the bunk room."#message 11 "This rock has done serious damage to the hull of the ship."#message 12 "The captain orders the crew and passengers to abandon ship, but it is too late."#message 13 "Sea water rushes through the gaping hole. The ship is on its way to the ocean floor in some of the most frigid water in the world."#message 15 "The iceberg once again pounds the side of the ship, but this time the force is too much for the hull to withstand."#message 16 "The wretched iceberg punctures the shell of the ship, flooding the lower levels."#message 17 "The end is near."#message 18 "None of these men are interested in talking right now. They are busy worrying whether the ship will survive the storm."#message 20 "Get a little closer."#message 21 "You are in the bunk room, the most popular spot to wait out the storm."#message 27 "You are just outside of the bunk room."#message 30 "The sky is dark and dreary."#message 33 "Thinking that the string might come in handy someday, you pick it up and put it in your pocket."#message 34 "You have the string from the bunk room and don't see any more."#message 35 "There is no string in sight."#message 36 "You are on the sun, rain, snow, hail, and sleet deck."#message 37 "This is not the place to be at a time like this!"#message 38 "Things don't look too good for you!"#message 39 "There is a long piece of string on the floor."#message 41 "You are on the ladder between the top deck and main deck."#message 43 "The bunks are filled, but no one is sleeping. Everyone knows that mother nature could crack this ship like an egg."#message 44 "They won't be biting today!"#message 45 "There is no string right here."#message 46 "There's no string here now."#message 47 "The bunk room has just been emptied to lighten the ship. Everything that wasn't nailed down is gone. The floor is a mess."#message 48 "The bunk room has just been emptied to lighten the ship. Everything that wasn't nailed down is gone."#message 77 "You are not in the bunk room."#message 90 "Go ahead and climb on!"#message 91 "The rigging on the Sea Farer isn't nearly as complicated as on some clippers you've seen."#message 92 "Made of strong wood, the mast goes through both decks to the keel, making a sturdy structure."#message 93 "You can't do that from here."#message 94 "This is the door to the bunk room."#message 95 "The paddles are turning, propelling the ship without the wind's aid."#message 96 "This ladder provides access between two decks of the ship."#message 98 "Just walk up to it."#message 99 "Just walk away from it."#message 100 "The door is closed."#message 101 "The ocean stretches as far as the eye can see."#message 102 "That engine sure looks powerful."#message 103 "The door is open."#message 106 "You see nothing important here now."#message 107 "You see nothing important right here."#message 108 "You see icebergs bobbing in the frigid sea."#message 109 "You can't see the rocks through the water."#message 110 "An occasional island passes by the ship."