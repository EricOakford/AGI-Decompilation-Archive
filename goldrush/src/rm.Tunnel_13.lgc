[***********************************************************[[ rm.Tunnel_13[[ Another tunnel location, this one is a dead end. There is[ a pile of gold nuggets in plain sight that Jerrod can pick[ up.[ [***********************************************************[ **************************************[ LOCAL DEFINES[ **************************************#define oDark1                       o1#define oDark2                       o2#define oDark3                       o3#define oDark4                       o4#define oDark5                       o5#define oDark6                       o6#define oDark7                       o7#define oDark8                       o8#define oDark9                       o9#define oDark10                     o10#define oDark11                     o11#define oDark12                     o12#define oDark13                     o13#define oDark14                     o14#define oNuggets                    o15#define vFlicker                   v220[ v221 and v222 are not used#define vDigTimer                  v223#define fDrawDark                  f220#define fLight1                    f221#define fLight2                    f222#define fLight3                    f223#define fLight4                    f224#define fLight5                    f225#define fLight6                    f226#define fLight7                    f227#define fLight8                    f228#define fLight9                    f229#define fLight10                   f230#define fLight11                   f231#define fLight12                   f232#define fLight13                   f233#define fLight14                   f234[ **************************************[ FIRST CYCLE ONLY[ **************************************if (isset(newRoom))  {  [ load the tunnel logic, that handles all the common  [ tunnel functions  load.logics(lgc.Tunnels);    [ load picture for current room  load.pic(currentRoom);    [ load views used in the room  load.view(vw.WideJerrodCA);  load.view(vw.Darkness);  load.view(vw.TunnelDigging);  load.view(vw.TunnelArt);    [ load sound used in the room  load.sound(m.FoundGold);    [ draw the picture  draw.pic(currentRoom);    [ add the darkness panels - these black out areas of the  [ tunnel that are beyond the range of Jerrod's light  [ (don't draw them yet, lgc.DarkenTunnel will do that)  animate.obj(oDark1);  set.view(oDark1, vw.Darkness);  set.loop(oDark1, 0);  set.cel(oDark1, 1);  set.priority(oDark1, 15);  ignore.objs(oDark1);  ignore.blocks(oDark1);  position(oDark1, 149, 138);  [ darkness panel 2  animate.obj(oDark2);  set.view(oDark2, vw.Darkness);  set.loop(oDark2, 0);  set.cel(oDark2, 1);  set.priority(oDark2, 15);  ignore.objs(oDark2);  ignore.blocks(oDark2);  position(oDark2, 138, 138);  [ darkness panel 3  animate.obj(oDark3);  set.view(oDark3, vw.Darkness);  set.loop(oDark3, 0);  set.cel(oDark3, 1);  set.priority(oDark3, 15);  ignore.objs(oDark3);  ignore.blocks(oDark3);  position(oDark3, 127, 138);  [ darkness panel 4  animate.obj(oDark4);  set.view(oDark4, vw.Darkness);  set.loop(oDark4, 0);  set.cel(oDark4, 1);  set.priority(oDark4, 15);  ignore.objs(oDark4);  ignore.blocks(oDark4);  position(oDark4, 116, 138);  [ darkness panel 5  animate.obj(oDark5);  set.view(oDark5, vw.Darkness);  set.loop(oDark5, 0);  set.cel(oDark5, 1);  set.priority(oDark5, 15);  ignore.objs(oDark5);  ignore.blocks(oDark5);  position(oDark5, 105, 138);  [ darkness panel 6  animate.obj(oDark6);  set.view(oDark6, vw.Darkness);  set.loop(oDark6, 0);  set.cel(oDark6, 1);  set.priority(oDark6, 15);  ignore.objs(oDark6);  ignore.blocks(oDark6);  position(oDark6, 94, 138);  [ darkness panel 7  animate.obj(oDark7);  set.view(oDark7, vw.Darkness);  set.loop(oDark7, 0);  set.cel(oDark7, 1);  set.priority(oDark7, 15);  ignore.objs(oDark7);  ignore.blocks(oDark7);  position(oDark7, 83, 138);  [ darkness panel 8  animate.obj(oDark8);  set.view(oDark8, vw.Darkness);  set.loop(oDark8, 0);  set.cel(oDark8, 1);  set.priority(oDark8, 15);  ignore.objs(oDark8);  ignore.blocks(oDark8);  position(oDark8, 72, 138);  [ darkness panel 9  animate.obj(oDark9);  set.view(oDark9, vw.Darkness);  set.loop(oDark9, 0);  set.cel(oDark9, 1);  set.priority(oDark9, 15);  ignore.objs(oDark9);  ignore.blocks(oDark9);  position(oDark9, 61, 138);  [ darkness panel 10  animate.obj(oDark10);  set.view(oDark10, vw.Darkness);  set.loop(oDark10, 0);  set.cel(oDark10, 1);  set.priority(oDark10, 15);  ignore.objs(oDark10);  ignore.blocks(oDark10);  position(oDark10, 46, 138);  [ darkness panel 11  animate.obj(oDark11);  set.view(oDark11, vw.Darkness);  set.loop(oDark11, 0);  set.cel(oDark11, 1);  set.priority(oDark11, 15);  ignore.objs(oDark11);  ignore.blocks(oDark11);  position(oDark11, 35, 138);  [ darkness panel 12  animate.obj(oDark12);  set.view(oDark12, vw.Darkness);  set.loop(oDark12, 0);  set.cel(oDark12, 1);  set.priority(oDark12, 15);  ignore.objs(oDark12);  ignore.blocks(oDark12);  position(oDark12, 24, 138);  [ darkness panel 13  animate.obj(oDark13);  set.view(oDark13, vw.Darkness);  set.loop(oDark13, 0);  set.cel(oDark13, 1);  set.priority(oDark13, 15);  ignore.objs(oDark13);  ignore.blocks(oDark13);  position(oDark13, 13, 138);  [ darkness panel 14  animate.obj(oDark14);  set.view(oDark14, vw.Darkness);  set.loop(oDark14, 0);  set.cel(oDark14, 1);  set.priority(oDark14, 15);  ignore.objs(oDark14);  ignore.blocks(oDark14);  position(oDark14, 5, 138);    [ gold nuggets  animate.obj(oNuggets);  set.view(oNuggets, vw.TunnelArt);  set.loop(oNuggets, 0);  set.cel(oNuggets, 1);  set.priority(oNuggets, 4);  position(oNuggets, 99, 103);  [ if the nuggets haven't been taken yet  if (!isset(Nugget13Taken))    {    [ show them    draw(oNuggets);    stop.update(oNuggets);    }      [ Jerrod  animate.obj(ego);  [ Jerrod only walks in this room; no climbing  set.view(ego, vw.WideJerrodCA);  draw(ego);    [ the room starts out all darkened  call(lgc.DarkenTunnel);    [ now show the picture  show.pic();  }  [ **************************************[ EVERY CYCLE[ **************************************[ when Jerrod's y value is greater than 127, priority needs[ to be forced to 12 so he gets displayed correctlyif (EgoY > 127)  {  set.priority(ego, 12);  }else  {  release.priority(ego);  }  [ to simulate flickering of torch, use a random timer to[ redraw a black box over the area of tunnel that is[ darkened[ if flicker timer has counted downif (vFlicker == 0)  {  [ if Jerrod is stopped  if (egoDir == STOPPED)    {    [ if the redraw darkness flag is NOT set    if (!isset(fDrawDark))      {      [ draw a black box over the entire tunnel (when Jerrod      [ moves, the cleared areas will be uncovered)      clear.text.rect(2, 0, 21, 39, BLACK);      set(fDrawDark);      }    }  else    {    [ Jerrod is moving; clear the redraw darkness flag    reset(fDrawDark);    [ choose a random time between 2 and 4 cycles    random(2, 4, FlickerTime);    [ set flicker delay to the random vlaue    vFlicker = FlickerTime;    [ draw a black box over the entire tunnel    clear.text.rect(2, 0, 21, 39, BLACK);    }  }  [ decrement flicker counter--vFlicker;[ if Jerrod has a lit lantern or lit matchif ((isset(LanternLit) || isset(MatchLit)))  {  [ depending on position, remove the darkness panels so  [ Jerrod can see the area around him  if (posn(ego, 125, 110, 154, 150) && !isset(fLight1))    {    erase(oDark1);    set(fLight1);    }  if (posn(ego, 114, 110, 143, 150) && !isset(fLight2))    {    erase(oDark2);    set(fLight2);    }  if (posn(ego, 103, 110, 132, 150) && !isset(fLight3))    {    erase(oDark3);    set(fLight3);    }  if (posn(ego, 92, 110, 121, 150) && !isset(fLight4))    {    erase(oDark4);    set(fLight4);    }  if (posn(ego, 81, 110, 110, 150) && !isset(fLight5))    {    erase(oDark5);    set(fLight5);    }  if (posn(ego, 70, 110, 99, 150) && !isset(fLight6))    {    erase(oDark6);    set(fLight6);    }  if (posn(ego, 59, 110, 88, 150) && !isset(fLight7))    {    erase(oDark7);    set(fLight7);    }  if (posn(ego, 48, 110, 77, 150) && !isset(fLight8))    {    erase(oDark8);    set(fLight8);    }  if (posn(ego, 37, 110, 66, 150) && !isset(fLight9))    {    erase(oDark9);    set(fLight9);    }  if (posn(ego, 22, 110, 51, 150) && !isset(fLight10))    {    erase(oDark10);    set(fLight10);    }  if (posn(ego, 10, 110, 40, 150) && !isset(fLight11))    {    erase(oDark11);    set(fLight11);    }  if (posn(ego, 0, 110, 29, 150) && !isset(fLight12))    {    erase(oDark12);    set(fLight12);    }  if (posn(ego, 0, 110, 18, 150) && !isset(fLight13))    {    erase(oDark13);    set(fLight13);    }  if (posn(ego, 0, 110, 10, 150) && !isset(fLight14))    {    erase(oDark14);    set(fLight14);    }  }[ if timer is activated (>0)if (vDigTimer > 0)  {  [ increment timer each cycle  ++vDigTimer;  }  [ when 30 cycles passif (vDigTimer == 30)  {  [ Jerrod is done digging    [ Jerrod no longer cycles when not moving  reset(CycleAtRest);  start.motion(ego);  [ restore normal tunnel view  set.view(ego, vw.WideJerrodCA);  }  [ after 31 cyclesif (vDigTimer == 31)  {  [ reset the timer  vDigTimer = 0;  [ nothing to be found by digging  print.at("Nothin'!", 2, 5, 0);  }  [ **************************************[ CHECK FOR AN EXIT CONDITION[ **************************************[ right edgeif (posn(ego, 130, 30, 130, 167))  {  [ redraw dark panels  draw(oDark6);  draw(oDark7);  [ update all objects (not sure why they do this since the  [ new.room command comes next - I guess it's so there'a a  [ split second before the room change with the room  [ updated)  force.update(ego);  [ position Jerrod to appear correctly on next screen  position(ego, 2, 122);  new.room(rm.Tunnel_12); [ ##LE001##  }  [ **************************************[ PROCESS PLAYER INPUT[ **************************************[ if player hasn't provided input no need to do said testsif (!isset(haveInput))  {  goto(Done);  }  [ look golg/look nuggetif ((said("examine", "gold") ||     said("examine", "gold", "nugget") ||     said("examine", "nugget")))  {  [ if Jerrod has a lit lantern or lit match  if ((isset(LanternLit) || isset(MatchLit)))    {    [ if near the pile of nuggets    if (posn(ego, 71, 116, 101, 153))      {      [ if nuggets are already taken      if (isset(Nugget13Taken))        {        print.at("There's no gold in sight right here.", 2, 5, 0);        }      else        {        print.at("Just look at that gold glitter!", 2, 5, 0);        }      }    else      {      [ if block is unnecessary- response is the same      if (isset(Nugget13Taken))        {        print.at("There's no gold in sight right here.", 2, 5, 0);        }      else        {        print.at("There's no gold in sight right here.", 2, 5, 0);        }      }    }  else    {    print.at("It's too dern dark in here to see!", 2, 5, 0);    }  }  [ get goldif ((said("acquire", "gold") ||     said("acquire", "gold", "nugget") ||     said("acquire", "nugget")))  {  [ if near the pile of nuggets  if (posn(ego, 77, 116, 95, 128))    {    [ if nuggets already taken    if (isset(Nugget13Taken))      {      print.at("There's no gold in sight right here.", 2, 5, 0);      }    else      {      [ get the nuggets      print.at("Ya reach out and grab the GOLD nuggets!", 2, 5, 0);      [ remove the nuggets from screen      erase(oNuggets);      [ if gold amount is less than 110      if (GoldIndex < 110)        {        [ get two units of gold        GoldIndex  += 2;        }      else        {        [ otherwise get one unit of gold        GoldIndex  += 1;        }      [ set 'nugget taken' flag      set(Nugget13Taken);      [ update inventory with correct amount of gold      call(lgc.AdjustGold);      }    }  else    {    [ not near the nuggets        [ if already taken    if (isset(Nugget13Taken))      {      print.at("There's no gold in sight right here.", 2, 5, 0);      }    else      {      print.at("Ya can't reach any gold from here.", 2, 5, 0);      }    }  }  [ use pick (Jerrod can dig, but no gold can be found here)if ((said("pick") ||     said("pick", "gold") ||     said("use", "pick") ||     said("swing", "pick")))  {  [ if Jerrod has the pick  if (has("Pick"))    {    [ if touching an alarm line     if (isset(egoHitSpecial))      {        [ this is an area where Jerrod can dig for gold      set.view(ego, vw.TunnelDigging);        [ start timer      vDigTimer = 1;        [ begin at first cel      set.cel(ego, 0);      stop.motion(ego);      set(CycleAtRest);      [ start digging      start.cycling(ego);      }    else      {      print.at("You're close to a likely spot. Try that nearby.", 2, 5, 0);      }    }  else    {    print.at("Ya don't have a pick.", 2, 5, 0);    }  }  [ look ladder (there are no ladders in this room)if (said("examine", "ladder"))  {  if ((isset(LanternLit) || isset(MatchLit)))    {    print.at("There's no ladder in sight right here.", 2, 5, 0);    }  else    {    print.at("It's too dern dark in here to see!", 2, 5, 0);    }  }  Done:[ call tunnel logic to run code common to all tunnelscall(lgc.Tunnels);return();[ **************************************[ MESSAGES[ **************************************#message 13 "Ya can't do that while yer climbin'!"#message 14 "You're close to a likely spot. Try that nearby."#message 15 "Ya don't have a pick."#message 16 "That's impossible right now!"#message 17 "It's too dern dark in here to see!"#message 20 "Nothin'!"#message 25 "Just look at that gold glitter!"#message 26 "You've struck gold!"#message 28 "Ya can't reach any gold from here."#message 31 "Ya reach out and grab the GOLD nuggets!"#message 47 "There's no gold in sight right here."#message 80 "There's no ladder in sight right here."