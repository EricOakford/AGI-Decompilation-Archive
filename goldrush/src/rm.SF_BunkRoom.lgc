[***********************************************************[[ rm.SF_Bunkroom[ [ This room includes bunkrooms for hired hands, and a hat[ and boot shop. There is nothing for Jerrod to do here.[[***********************************************************[ **************************************[ LOCAL DEFINES[ **************************************#define oDoor1                       o1#define oDoor2                       o2#define oDoor3                       o3#define oDoor4                       o4#define vTmpX                      v220[ f220 is not used#define fDoor1Moved                f221#define fDoor1Open                 f222#define fDoor2Moved                f223#define fDoor2Open                 f224#define fDoor4Moved                f225#define fDoor4Open                 f226#define fDoor3Moved                f227#define fDoor3Open                 f228#define fBehindWindow              f229[ f230 through f237 are not used#define fEffectDone                f238[ **************************************[ FIRST CYCLE ONLY[ **************************************if (isset(newRoom))  {  [ load mule logic  load.logics(lgc.Mule);    [ load picture for current room  load.pic(currentRoom);    [ load views used in the room  load.view(vw.JerrodCA);  load.view(vw.SF_Doors1);  load.view(vw.SuttersFortArt);  load.view(vw.WindowJerrod);    [ load sounds used in the room  load.sound(s.Effect1);  load.sound(s.Effect2);    [ draw the current room picture  draw.pic(currentRoom);  [ add bunks to bunk rooms  add.to.pic(vw.SuttersFortArt, 4, 0, 12, 86, 6, 6);  add.to.pic(vw.SuttersFortArt, 4, 1, 51, 82, 6, 6);  [ add hat/boot items to hat/boot shop  add.to.pic(vw.SuttersFortArt, 4, 2, 102, 86, 6, 0);    [ four doors, from right to left    [ door #1 (bunkroom)  animate.obj(oDoor1);  set.view(oDoor1, vw.SF_Doors1);  set.loop(oDoor1, 2);  set.cel(oDoor1, 0);  ignore.objs(oDoor1);  ignore.blocks(oDoor1);  set.priority(oDoor1, 8);  position(oDoor1, 12, 93);  draw(oDoor1);  stop.update(oDoor1);  [ door #2 (bunkroom)  animate.obj(oDoor2);  set.view(oDoor2, vw.SF_Doors1);  set.loop(oDoor2, 2);  set.cel(oDoor2, 0);  ignore.objs(oDoor2);  ignore.blocks(oDoor2);  set.priority(oDoor2, 8);  position(oDoor2, 51, 93);  draw(oDoor2);  stop.update(oDoor2);  [ door #3 (hat/boot shop)  animate.obj(oDoor3);  set.view(oDoor3, vw.SF_Doors1);  set.loop(oDoor3, 2);  set.cel(oDoor3, 0);  ignore.objs(oDoor3);  ignore.blocks(oDoor3);  set.priority(oDoor3, 8);  position(oDoor3, 102, 93);  draw(oDoor3);  stop.update(oDoor3);  [ door #4 (empty hallway)  animate.obj(oDoor4);  set.view(oDoor4, vw.SF_Doors1);  set.loop(oDoor4, 2);  set.cel(oDoor4, 0);  ignore.objs(oDoor4);  ignore.blocks(oDoor4);  set.priority(oDoor4, 8);  position(oDoor4, 139, 93);  draw(oDoor4);  stop.update(oDoor4);    [ Jerrod, in normal California attire  animate.obj(ego);  set.view(ego, vw.JerrodCA);  [ if coming from the blacksmith shop  if (previousRoom == rm.SF_Blacksmith)    {    [ change direction and loop    egoDir = RIGHT;    set.loop(ego, 0);    }  [ if coming from administrative offices  if (previousRoom == rm.SF_Admin)    {    [ change direction and loop    egoDir = UP;    set.loop(ego, 3);    }  draw(ego);    [ if Jerrod has a mule  if ((has(LazyMule) || has("James' ol' mule")))    {    [ do mule initialization    call(lgc.Mule);    }      [ now show the picture  show.pic();    [ not necessary to reset this flag; AGI resets it  [ automatically  reset(newRoom);  }  [ **************************************[ EVERY CYCLE[ **************************************[ if Jerrod is on an alarm line and not marked as behind a[ windowif (isset(egoHitSpecial) && !isset(fBehindWindow))  {  [ show Jerrod behind window  set(fBehindWindow);  set.view(ego, vw.WindowJerrod);  }  [ if Jerrod is not on an alarm line but is marked as behind[ a windowif (!isset(egoHitSpecial) && isset(fBehindWindow))  {  [ no longer behind window  reset(fBehindWindow);  [ restore normal view  set.view(ego, vw.JerrodCA);  }  [ if Jerrod is by door #1 and it is not openif (posn(ego, 1, 81, 24, 96) && !isset(fDoor1Open))  {  [ play door-open sound  sound(s.Effect1, fEffectDone);  [ allow door #1 to update  start.update(oDoor1);  [ temporarily halt Jerrod while door #1 opens  stop.update(ego);  [ open door #1  end.of.loop(oDoor1, fDoor1Moved);  set(fDoor1Open);  }  [ if Jerrod is not by door #1 and it is openif (!posn(ego, 1, 81, 24, 96) && isset(fDoor1Open))  {  [ allow door #1 to update  start.update(oDoor1);  [ close it  reverse.loop(oDoor1, fDoor1Moved);  reset(fDoor1Open);  }  [ if door #1 is done cyclingif (isset(fDoor1Moved))  {  [ stop updating door #1  stop.update(oDoor1);  [ allow Jerrod to continue moving  start.update(ego);  [ reset the movement flag  reset(fDoor1Moved);  [ if door #1 is now closed  if (!isset(fDoor1Open))    {    [ play door-closed sound    sound(s.Effect2, fEffectDone);    }  }  [ if Jerrod is by door #2 and it is not openif (posn(ego, 32, 81, 74, 96) && !isset(fDoor2Open))  {  [ play door-open sound  sound(s.Effect1, fEffectDone);  [ allow door #2 to update  start.update(oDoor2);  [ temporarily halt Jerrod while door #2 opens  stop.update(ego);  [ open door #2  end.of.loop(oDoor2, fDoor2Moved);  set(fDoor2Open);  }  [ if Jerrod is not by door #2 and it is openif (!posn(ego, 32, 81, 74, 96) && isset(fDoor2Open))  {  [ allow door #2 to update  start.update(oDoor2);  [ close it  reverse.loop(oDoor2, fDoor2Moved);  reset(fDoor2Open);  }  [ if door #2 is done cyclingif (isset(fDoor2Moved))  {  [ stop updating door #2  stop.update(oDoor2);  [ allow Jerrod to continue moving  start.update(ego);  [ reset the movement flag  reset(fDoor2Moved);  [ if door #2 is now closed  if (!isset(fDoor2Open))    {    [ play door-closed sound    sound(s.Effect2, fEffectDone);    }  }  [ if Jerrod is by door#3 and it is not openif (posn(ego, 82, 81, 125, 96) && !isset(fDoor3Open))  {  [ play door-open sound  sound(s.Effect1, fEffectDone);  [ allow door #3 to update  start.update(oDoor3);  [ temporarily halt Jerrod while door opens  stop.update(ego);  [ open door #3  end.of.loop(oDoor3, fDoor3Moved);  set(fDoor3Open);  }  [ if Jerrod is not by door #3 and it is openif (!posn(ego, 82, 81, 125, 96) && isset(fDoor3Open))  {  [ allow door #3 to update  start.update(oDoor3);  [ close it  reverse.loop(oDoor3, fDoor3Moved);  reset(fDoor3Open);  }  [ if door #3 is done cyclingif (isset(fDoor3Moved))  {  [ stop updating door #3  stop.update(oDoor3);  [ allow Jerrod to continue moving  start.update(ego);  [ reset movement flag  reset(fDoor3Moved);  [ if door #3 is now closed  if (!isset(fDoor3Open))    {    [ play door-closed sound    sound(s.Effect2, fEffectDone);    }  }  [ if Jerrod is by door#4 and it is not openif (posn(ego, 126, 81, 152, 96) && !isset(fDoor4Open))  {  [ play door-open sound  sound(s.Effect1, fEffectDone);  [ allow door #4 to update  start.update(oDoor4);  [ temporarily halt Jerrod while door opens  stop.update(ego);  [ open door #4  end.of.loop(oDoor4, fDoor4Moved);  set(fDoor4Open);  }  [ if Jerrod is not by door #4 and it is openif (!posn(ego, 126, 81, 152, 96) && isset(fDoor4Open))  {  [ allow door #4 to update  start.update(oDoor4);  [ close it  reverse.loop(oDoor4, fDoor4Moved);  reset(fDoor4Open);  }  [ if door #4 is done cyclingif (isset(fDoor4Moved))  {  [ stop updating door #4  stop.update(oDoor4);  [ allow Jerrod to continue moving  start.update(ego);  [ reset movement flag  reset(fDoor4Moved);  [ if door #4 is now closed  if (!isset(fDoor4Open))    {    [ play door-closed sound    sound(s.Effect2, fEffectDone);    }  }  [ **************************************[ CHECK FOR AN EXIT CONDITION[ **************************************[ to the right is the Corralif (posn(ego, 152, 81, 152, 166))  {  [ adjust Jerrod's position for new room  vTmpX = 2;  if (EgoY > 96 && EgoY < 102)    {    EgoY = 102;    }  position.v(ego, vTmpX, EgoY);  new.room(rm.SF_Corral); [ ##LE001##  }  [ going left-center leads to the blacksmith shopif (posn(ego, 1, 97, 1, 120))  {  [ adjust Jerrod's position for new room  position(ego, 143, 165);  new.room(rm.SF_Blacksmith); [ ##LE002##  }  [ left-bottom also goes to blacksmith shop but Jerrod starts[ further left in new roomif (posn(ego, 1, 121, 1, 166))  {  [ adjust Jerrod's position for new room  position(ego, 100, 165);  new.room(rm.SF_Blacksmith); [ ##LE003##  }[ bottom edge goes to the admin room  if (posn(ego, 1, 166, 152, 166))  {  [ adjust Jerrod's position for new room  position(ego, 76, 165);  new.room(rm.SF_Admin); [ ##LE004##  }  [ **************************************[ PROCESS PLAYER INPUT[ **************************************[ if player hasn't provided input no need to do said testsif (!isset(haveInput))  {  goto(Done);  }  [ look around/lookif ((said("examine", "around") || said("examine")))  {  [ response depends on Jerrod's location  if ((posn(ego, 0, 81, 24, 96) ||       posn(ego, 32, 81, 74, 96) ||       posn(ego, 82, 81, 127, 96) ||       posn(ego, 128, 81, 159, 96)))    {    if (posn(ego, 0, 81, 24, 96))      {      print("This is a bunk room for the hired hands. They've gone and taken "            "everything with 'em.");      print("You don't need anything here!");      }    if (posn(ego, 32, 81, 74, 96))      {      print("This is a bunk room for the hired hands. They've gone and taken "            "everything with 'em.");      print("You don't need anything here!");      }    if (posn(ego, 82, 81, 127, 96))      {      print("This is the hat and boot shop for the fort. You've got a hat and "            "you've got boots.");      print("You don't need anything here!");      }    if (posn(ego, 128, 81, 159, 96))      {      print("This is an empty entryway!");      print("You don't need anything here!");      }    }  else    {    print("The sounds of the blacksmith shop come from one direction, the smell "          "of mules comes from the other.");    }  }  [ take hat/buy hatif ((said("acquire", "hat") || said("buy", "hat")))  {  [ if in the boot and hat shop  if (posn(ego, 82, 81, 127, 96))    {    print("You've already got one and yer literally attached to it!");    }  else    {    print("What %w2?");    }  }  [ take boots/buy bootsif ((said("acquire", "boot") || said("buy", "boot")))  {  [ if in the boot and hat shop  if (posn(ego, 82, 81, 127, 96))    {    print("The boots on yer feet will do just fine!");    }  else    {    print("What %w2?");    }  }  [ look ground/look grassif ((said("examine", "dirt") || said("examine", "grass")))  {  print("The animals keep the grass short!");  }  [ look doorif (said("examine", "door"))  {  print("These doors are fer walkin' through!");  }  [ look windowif (said("examine", "glass"))  {  print("Just noraml windows to let the light inside!");  }  [ open doorif (said("open", "door"))  {  print("Do it!");  }  [ look fort/look wallsif ((said("examine", "fort") || said("examine", "wall")))  {  print("The walls of Sutter's Fort surround you!");  }  [ use shovel/dig for goldif ((said("use", "shovel") ||     said("dig", "gold") ||     said("dig") ||     said("dig", "hole")))  {  [ if Jerrod has a shovel  if (has("Shovel"))    {    print("Diggin' ain't allowed here!  Do that somewhere else!!");    }  else    {    print("No shovel, no diggin'!");    }  }  [ use pan/pan for goldif ((said("use", "pan") ||     said("pan", "gold") ||     said("pan")))  {  print("Ya needs to be in the water!");  }    [ sleep/take a napif ((said("sleep") ||     said("sleep", "bed") ||     said("sleep", "in", "bed") ||     said("go", "sleep") ||     said("acquire", "sleep") ||     said("lay", "down") ||     said("lay", "down", "sleep") ||     said("lay", "down", "bed") ||     said("lay", "down", "in", "bed") ||     said("lay", "bed") ||     said("lay", "in", "bed") ||     said("use", "bed") ||     said("go", "bed") ||     said("enter", "bed") ||     said("nap") ||     said("acquire", "nap")))  {  print("No time fer that!");  }  [ look hatif (said("examine", "hat"))  {  [ should have added a location check; this response makes  [ no sense when not in boot and hat shop  print("These are normal hats.");  }  [ look bootsif (said("examine", "boot"))  {  [ should have added a location check; this response makes  [ no sense when not in boot and hat shop  print("Of course there are boots in here, this is a boot shop!");  }  [ look entrywayif (said("examine", "entrance"))  {  [ if in or near the entryway  if (posn(ego, 128, 81, 159, 96))    {    print("This is a handy entryway fer folks needin' to use the hat and boot "          "shop or the wood shop. Ya got no need fer them.");    }  else    {    [ reset match flag so main logic can handle the response    reset(haveMatch);    }  }  [ smell/smell muleif ((said("smell") ||     said("smell", "donkey") ||     said("smell", "animal")))  {  print("There's no doubt about it.  There are mules nearby!");  }  Done:[ if Jerrod has a muleif ((has(LazyMule) || has("James' ol' mule")))  {  [ call mule logic to handle mule related commands  call(lgc.Mule);  }  return();[ **************************************[ MESSAGES[ **************************************#message 1 "This is a bunk room for the hired hands. They've gone and taken everything with 'em."#message 3 "This is the hat and boot shop for the fort. You've got a hat and you've got boots."#message 4 "This is an empty entryway!"#message 5 "The sounds of the blacksmith shop come from one direction, the smell of mules comes from the other."#message 6 "You've already got one and yer literally attached to it!"#message 7 "What %w2?"#message 8 "The boots on yer feet will do just fine!"#message 9 "The animals keep the grass short!"#message 10 "These doors are fer walkin' through!"#message 11 "Do it!"#message 12 "Just noraml windows to let the light inside!"#message 13 "The walls of Sutter's Fort surround you!"#message 14 "No time fer that!"#message 15 "These are normal hats."#message 16 "Of course there are boots in here, this is a boot shop!"#message 17 "This is a handy entryway fer folks needin' to use the hat and boot shop or the wood shop. Ya got no need fer them."#message 18 "There's no doubt about it.  There are mules nearby!"#message 40 "Diggin' ain't allowed here!  Do that somewhere else!!"#message 41 "No shovel, no diggin'!"#message 42 "Ya needs to be in the water!"#message 74 "You don't need anything here!"