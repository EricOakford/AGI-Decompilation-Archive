[***********************************************************[[ rm.WaterSt_Left[[ This is a section of Water Street, next to the East River[ to the left of the entrance to the ship dock. Stores are [ to the left of this room. Two sailors appear in the room.[[***********************************************************[ **************************************[ LOCAL DEFINES[ **************************************#define oSteamship                   o1#define oGull1                       o2#define oGull2                       o3#define oWarehouse                   o4#define oDoor                        o5[ o6 is not used#define oWagon                       o7#define oSailor1                     o8#define oSailor2                     o9#define vGullCycle                 v220#define vWagonStatus               v221#define vGullStep                  v222#define vGullX                     v223#define vGullY                     v224#define vSailor1Status             v225#define vSailor2Status             v226#define vTmpVal                    v227#define vSailor1Dist               v228#define vSailor2Dist               v229#define vWagonDir                  v230[ v231 is not used#define vSailor1X                  v232#define vSailor1Y                  v233#define vSailor2X                  v234#define vSailor2Y                  v235#define fGull1Moved                f220#define fGull2Moved                f221#define fOnBoardwalk               f222#define fShipVisible               f223#define fShipMoved                 f224#define fShipStart                 f225#define fPoster                    f226#define fWagonMoved                f227#define fSailor1Moved              f228#define fSailor2Moved              f229#define fRunOver                   f230#define fEgoDead                   f231[ **************************************[ FIRST CYCLE ONLY[ **************************************if (isset(newRoom))  {  [ load, draw and discard this room's picture  load.pic(currentRoom);  draw.pic(currentRoom);  discard.pic(currentRoom);    [ load views for art that needs to be added to the picture  load.view(vw.SkylineArt);  load.view(vw.Posters);  [ add the skyline art to the horizon  add.to.pic(vw.SkylineArt, 0, 2, 0, 52, 4, 4);  add.to.pic(vw.SkylineArt, 0, 3, 20, 52, 4, 4);  add.to.pic(vw.SkylineArt, 0, 4, 40, 52, 4, 4);  add.to.pic(vw.SkylineArt, 0, 5, 60, 52, 4, 4);  add.to.pic(vw.SkylineArt, 0, 6, 80, 52, 4, 4);  add.to.pic(vw.SkylineArt, 0, 7, 100, 52, 4, 4);  add.to.pic(vw.SkylineArt, 0, 8, 120, 52, 4, 4);  add.to.pic(vw.SkylineArt, 0, 9, 140, 52, 4, 4);    [ if the gold rush has been made public  if (isset(RushIsPublic))    {    [ add the poster to side of the building    add.to.pic(vw.Posters, 0, 1, 23, 70, 8, 8);    set(fPoster);    }      [ skyline art not needed anymore (this will also discard  [ vw.Posters, if it was loaded)  discard.view(vw.SkylineArt);    [ load the various views used by objects in the room  load.view(vw.JerrodNY);  load.view(vw.DyingJerrodNY);  load.view(vw.Gulls);  load.view(vw.WaterStreetArt);  load.view(vw.ShortWagon);  load.view(vw.Sailor1);  load.view(vw.BoilerTech);  load.view(vw.Sailor4);  load.view(vw.Sailor2);    [ only one sound used in the room  load.sound(m.Death);    [ add the warehouse (this could have been added to the  [ picture, instead of being an object, since the object is  [ never cycled, or otherwise interacted with)  animate.obj(oWarehouse);  set.view(oWarehouse, vw.WaterStreetArt);  set.loop(oWarehouse, 1);  position(oWarehouse, 134, 60);  set.priority(oWarehouse, 5);  draw(oWarehouse);  stop.update(oWarehouse);    [ if the ship has not sailed yet  if (!isset(ShipSailed))    {    [ add it to screen    animate.obj(oSteamship);    set.view(oSteamship, vw.WaterStreetArt);    set.loop(oSteamship, 2);    position(oSteamship, 120, 56);    set.priority(oSteamship, 4);    draw(oSteamship);    stop.update(oSteamship);    set(fShipVisible);    }    [ two seagulls fly randomly around the room  vGullCycle = 2;  animate.obj(oGull1);  set.view(oGull1, vw.Gulls);  ignore.horizon(oGull1);  ignore.blocks(oGull1);  ignore.objs(oGull1);  position(oGull1, 30, 25);  set.priority(oGull1, 6);  cycle.time(oGull1, vGullCycle);  set(fGull1Moved);  draw(oGull1);  [ seagull #2  animate.obj(oGull2);  set.view(oGull2, vw.Gulls);  ignore.horizon(oGull2);  ignore.blocks(oGull2);  ignore.objs(oGull2);  position(oGull2, 50, 35);  set.priority(oGull2, 6);  cycle.time(oGull2, vGullCycle);  set(fGull2Moved);  draw(oGull2);    [ add the building door (this could have been added to the  [ picture, instead of being an object, since the object is  [ never cycled, or otherwise interacted with)  animate.obj(oDoor);  set.view(oDoor, vw.WaterStreetArt);  set.loop(oDoor, 0);  set.cel(oDoor, 0);  position(oDoor, 48, 79);  ignore.blocks(oDoor);  ignore.objs(oDoor);  draw(oDoor);  stop.update(oDoor);    [ sailor #1  animate.obj(oSailor1);  [ starts off screen  vSailor1Status = 10;    [ sailor #2  animate.obj(oSailor2);  [ also starts off screen  vSailor2Status = 10;    [ a wagon goes back and forth across the screen  animate.obj(oWagon);  set.view(oWagon, vw.ShortWagon);  [ choose a random starting direction  random(0, 1, vTmpVal);  if (vTmpVal == 0)    {    set.loop(oWagon, 0);    position(oWagon, 0, 120);    draw(oWagon);    move.obj(oWagon, 122, 120, 2, fWagonMoved);    }  else    {    set.loop(oWagon, 1);    position(oWagon, 122, 120);    draw(oWagon);    move.obj(oWagon, 0, 120, 2, fWagonMoved);    }  [ set wagon status to on screen  vWagonStatus = 1;    [ duplicate code; this is an error by the programmers  animate.obj(oSailor1);  vSailor1Status = 10;  animate.obj(oSailor2);  vSailor2Status = 10;    [ add Jerrod in normal Brooklyn attire  animate.obj(ego);  set.view(ego, vw.JerrodNY);    [ adjust ego position, depending on which room he came  [ from  if ((previousRoom == rm.BankInterior ||       previousRoom == rm.Bank))    {    position(ego, 145, 115);    }  [ if coming from left and on the far boardwalk (the flag  [ fOnBoardWalk will ALWAYS be false because local flags  [ and variables are reset at the start of each new room;  [ so this test will always pass if ego is in the  [ designated area and the flag doesn't matter)  if (posn(ego, 0, 101 , 8, 108) && !isset(fOnBoardwalk))    {    [ set priority so Jerrod will look correct when walking    [ in front of the post    set.priority(ego, 10);    set(fOnBoardwalk);    }    [ add Jerrod to screen  draw(ego);    [ now show the picture  show.pic();  }  [ **************************************[ EVERY CYCLE[ **************************************[ add a block by door to sidewalk just right of the grocery[ store back door (no idea why though)block(60, 84, 71, 89);[ if wagon reaches its destinationif (isset(fWagonMoved) && vWagonStatus == 1)  {  [ remove it from the screen  reset(fWagonMoved);  erase(oWagon);  vWagonStatus = 10;  }  [ check to see if Jerrod gets run over by the wagon[ if Jerrod is in the wagon's path (and not already run over)if (EgoY == 120 && EgoHealthStatus == 0)  {  [ distance to wagon   distance(ego, oWagon, vTmpVal);  get.dir(oWagon, vWagonDir);  [ depending on direction, exact distance varies  if (vWagonDir == LEFT)    {    if ((vTmpVal == 23 || vTmpVal == 24))      {      set(fRunOver);      }    }  if (vWagonDir == RIGHT)    {    if ((vTmpVal == 22 || vTmpVal == 23))      {      set(fRunOver);      }    }  }  [ if Jerrod got run overif (isset(fRunOver))  {  [ reset the flag  reset(fRunOver);  ignore.objs(ego);  [ change to dying view  set.view(ego, vw.DyingJerrodNY);  set.cel(ego, 0);  set(CycleAtRest);  end.of.loop(ego, fEgoDead);  [ set Jerrod's status to dying (by wagon)  EgoHealthStatus = 4;  }[ when Jerrod is done dyingif (isset(fEgoDead))  {  [ he's officially dead  reset(fEgoDead);  call(lgc.DeathRunOver);  }  [ if wagon is off screenif (vWagonStatus > 9)  {  [ random chance it comes back  random(20, 100, vWagonStatus);  [ one in 80 chance  if (vWagonStatus == 77)    {    [ choose a random direction    random(0, 1, vWagonStatus);    if (vWagonStatus == 0)      {      set.loop(oWagon, 1);      position(oWagon, 122, 120);      draw(oWagon);      move.obj(oWagon, 0, 120, 2, fWagonMoved);      }    else      {      set.loop(oWagon, 0);      position(oWagon, 0, 120);      draw(oWagon);      move.obj(oWagon, 122, 120, 2, fWagonMoved);      }    [ set status to on screen    vWagonStatus = 1;    }  }  [ if the sailor1 is not on screen and ship hasn't left yetif (vSailor1Status > 9 && !isset(ShipSailed))  {  [ random chance a sailor1 will appear  random(25, 100, vSailor1Status);  [ one in 75 chance  if (vSailor1Status == 77)    {    [ pick one of two sailor types    random(0, 1, vSailor1Status);    if (vSailor1Status == 0)      {      set.view(oSailor1, vw.BoilerTech);      }    if (vSailor1Status == 1)      {      set.view(oSailor1, vw.Sailor1);      }    [ choose a random start location    random(0, 3, vSailor1Status);    if (vSailor1Status == 0)      {      set.loop(oSailor1, 0);      position(oSailor1, 0, 108);      draw(oSailor1);      move.obj(oSailor1, 152, 108, 1, fSailor1Moved);      [ next point is end point      vSailor1Status = 9;      }    if (vSailor1Status == 1)      {      set.loop(oSailor1, 1);      position(oSailor1, 152, 108);      draw(oSailor1);      move.obj(oSailor1, 0, 108, 1, fSailor1Moved);      [ next point is end point      vSailor1Status = 9;      }    if (vSailor1Status == 2)      {      set.loop(oSailor1, 1);      position(oSailor1, 152, 133);      draw(oSailor1);      move.obj(oSailor1, 0, 133, 1, fSailor1Moved);      [ next point is end point      vSailor1Status = 9;      }    if (vSailor1Status == 3)      {      set.loop(oSailor1, 0);      position(oSailor1, 0, 133);      draw(oSailor1);      move.obj(oSailor1, 152, 133, 1, fSailor1Moved);      [ next point is end point      vSailor1Status = 9;      }    }  }  [ if sailor1 reaches end pointif (isset(fSailor1Moved) && vSailor1Status == 9)  {  [ remove him from screen  reset(fSailor1Moved);  vSailor1Status = 10;  erase(oSailor1);  }  [ if sailor2 is not on screen and ship hasn't left yetif (vSailor2Status > 9 && !isset(ShipSailed))  {  [ random chance he will reappear  random(25, 100, vSailor2Status);  [ one in 75 chance  if (vSailor2Status == 77)    {    [ choose one of two sailor types    random(0, 1, vSailor2Status);    if (vSailor2Status == 0)      {      set.view(oSailor2, vw.Sailor4);      }    if (vSailor2Status == 1)      {      set.view(oSailor2, vw.Sailor2);      }    [ choose a random starting position    random(0, 3, vSailor2Status);    if (vSailor2Status == 0)      {      set.loop(oSailor2, 0);      position(oSailor2, 0, 110);      draw(oSailor2);      move.obj(oSailor2, 152, 110, 1, fSailor2Moved);      [ next point is end      vSailor2Status = 9;      }    if (vSailor2Status == 1)      {      set.loop(oSailor2, 1);      position(oSailor2, 152, 110);      draw(oSailor2);      move.obj(oSailor2, 0, 110, 1, fSailor2Moved);      [ next point is end      vSailor2Status = 9;      }    if (vSailor2Status == 2)      {      set.loop(oSailor2, 1);      position(oSailor2, 152, 135);      draw(oSailor2);      move.obj(oSailor2, 0, 135, 1, fSailor2Moved);      [ next point is end      vSailor2Status = 9;      }    if (vSailor2Status == 3)      {      set.loop(oSailor2, 0);      position(oSailor2, 0, 135);      draw(oSailor2);      move.obj(oSailor2, 152, 135, 1, fSailor2Moved);      [ next point is end      vSailor2Status = 9;      }    }  }  [ if sailor 2 reaches end pointif (isset(fSailor2Moved) && vSailor2Status == 9)  {  [ remove him from screen  reset(fSailor2Moved);  vSailor2Status = 10;  erase(oSailor2);  }  [ if sailor1 gets stopped for any reason, he stops cycling until[ he starts moving againget.posn(oSailor1, vSailor1X, vSailor1Y);if (OldObj1X == vSailor1X &&     OldObj1Y == vSailor1Y)  {  stop.cycling(oSailor1);  }else  {  start.cycling(oSailor1);  }OldObj1X = vSailor1X;OldObj1Y = vSailor1Y;[ if sailor2 gets stopped for any reason, he stops cycling until[ he starts moving againget.posn(oSailor2, vSailor2X, vSailor2Y);if (OldObj2X == vSailor2X &&     OldObj2Y == vSailor2Y)  {  stop.cycling(oSailor2);  }else  {  start.cycling(oSailor2);  }OldObj2X = vSailor2X;OldObj2Y = vSailor2Y;[ if gull1 reached destinationif (isset(fGull1Moved))  {  [ send it to a new random location  reset(fGull1Moved);  random(1, 150, vGullX);  random(5, 100, vGullY);  random(1, 2, vGullStep);  move.obj.v(oGull1, vGullX, vGullY, vGullStep, fGull1Moved);  }  [ if gull2 reached destinationif (isset(fGull2Moved))  {  [ send it to a new random location  reset(fGull2Moved);  random(1, 150, vGullX);  random(5, 100, vGullY);  random(1, 2, vGullStep);  move.obj.v(oGull2, vGullX, vGullY, vGullStep, fGull2Moved);  }  [ if ego is on boardwalk in front of post and priority not setif (posn(ego, 0, 101, 8, 108) && !isset(fOnBoardwalk))  {  [ set priority so he shows correctly  set.priority(ego, 10);  set(fOnBoardwalk);  }[ if NOT on boardwalk in front of post and priority IS setif (!posn(ego, 0, 101, 8, 108) && isset(fOnBoardwalk))  {  [ release it  release.priority(ego);  reset(fOnBoardwalk);  }  [ if the ship has sailed, but not actually moved yetif (isset(ShipSailed) && !isset(fShipStart))  {  [ start the ship moving  set(fShipStart);  start.update(oSteamship);  set.view(oSteamship, vw.WaterStreetArt);  set.loop(oSteamship, 3);  fix.loop(oSteamship);  start.cycling(oSteamship);  move.obj(oSteamship, 131, 56, 1, fShipMoved);  }  [ if ship has moved to edge of screenif (isset(fShipMoved))  {  [ reset the flags and remove ship from screen  reset(fShipMoved);  erase(oSteamship);  reset(fShipVisible);  }  [ **************************************[ CHECK FOR AN EXIT CONDITION[ **************************************if (edgeEgoHit == RIGHT_EDGE)  {  new.room(rm.Bank); [ ##LE001##  }  if (edgeEgoHit == LEFT_EDGE)  {  new.room(rm.Stores); [ ##LE002##  }  [ if player hasn't provided input no need to do said testsif (!isset(haveInput))  {  goto(Done);  }  [ **************************************[ PROCESS PLAYER INPUT[ **************************************if ((said("examine", "sign") ||     said("examine", "billboard") ||     said("read", "sign") ||     said("read", "billboard")))  {  [ if poster is visible  if (isset(fPoster))    {    if (posn(ego, 12, 85, 29, 96))      {      print("    Head for the\n    GOLDEN STATE\nBefore it's too late!");      }    else      {      print("It is difficult to see the poster from here.");      }    }  else    {    print("There is no poster around here.");    }  }  if ((said("examine", "new york") ||     said("examine", "across") ||     said("examine", "across", "creek") ||     said("examine", "across", "east river")))  {  print("Across the East River you see New York City.");  }  if (said("examine", "path"))  {  print("This is \"Water Street.\"");  }  if ((said("examine", "fence") ||     said("examine", "rail")))  {  print("The purpose of the wrought-iron fence is to keep people from falling "        "in the water.");  }  if ((said("examine", "warehouse") ||     said("examine", "dock")))  {  print("You can barely see the warehouse at the end of the dock.");  }  if (said("examine", "boardwalk"))  {  print("The boardwalks lead to the stores.");  }  if ((said("examine", "creek") ||     said("examine", "east river") ||     said("examine", "water") ||     said("examine", "ocean")))  {  print("You see the East River.");  }  if (said("examine", "boat"))  {  if (isset(ShipSailed))    {    print("The ship is gone.");    }  else    {    print("The ship is preparing for departure.");    }  }  if (said("examine", "boy"))  {  [ get distances  distance(ego, oWagon, vTmpVal);  distance(ego, oSailor1, vSailor1Dist);  distance(ego, oSailor2, vSailor2Dist);  [ if at least one is close enough  if ((vTmpVal < 60 ||       vSailor1Dist < 60 ||       vSailor2Dist < 60))    {    [ check sailor1 first    if (vSailor1Dist < 60)      {      [ use view number to determine reply      current.view(oSailor1, vSailor1Dist);      if (vSailor1Dist == vw.Sailor1)        {        print("It looks like that sailor is hustling and bustling around town "              "preparing to go somewhere!");        }      if (vSailor1Dist == vw.BoilerTech)        {        print("When the ship is at the dock, you see more people in this part "              "of town.");        }      }    [ then check sailor 2    if (vSailor2Dist < 60)      {      [ use view to determine reply      current.view(oSailor2, vSailor2Dist);      if (vSailor2Dist == vw.Sailor2)        {        print("It looks like that sailor is hustling and bustling around town "              "preparing to go somewhere!");        }      if (vSailor2Dist == vw.Sailor4)        {        print("When the ship is at the dock, you see more people in this part "              "of town.");        }      }    [ then check wagon driver    if (vTmpVal < 60)      {      print("This man drives his wagon all over town.");      }    }  else    {    [ if all are off screen    if (vTmpVal == 255 &&         vSailor1Dist == 255 &&         vSailor2Dist == 255)      {      print("There is no one around.");      }    else      {      print("There is no one close enough.");      }    }  }  if ((said("speak", "boy") ||     said("speak")))  {  [ get distances  distance(ego, oWagon, vTmpVal);  distance(ego, oSailor1, vSailor1Dist);  distance(ego, oSailor2, vSailor2Dist);  [ if at least one is close enough  if ((vTmpVal < 40 ||       vSailor1Dist < 40 ||       vSailor2Dist < 40))    {    [ check sailor1 first    if (vSailor1Dist < 40)      {      [ use view to determine reply      current.view(oSailor1, vSailor1Dist);      if (vSailor1Dist == vw.Sailor1)        {        print("This sailing man says, \"The captain advises we are going to "              "California next. I can hardly wait to get on our way!!\"");        }      if (vSailor1Dist == vw.BoilerTech)        {        print("The man says, \"Uhhhhhh, I'll be in town until the ship "              "leaves.\"");        }      }    [ then check sailor2    if (vSailor2Dist < 40)      {      [ use view to determine reply      current.view(oSailor2, vSailor2Dist);      if (vSailor2Dist == vw.Sailor2)        {        print("The crewman says, \"I hope you will be aboard when the ship "              "leaves.\"");        }      if (vSailor2Dist == vw.Sailor4)        {        print("The man says, \"Uhhhhhh, I'll be in town until the ship "              "leaves.\"");        }      }    if (vTmpVal < 40)      {      print("The man on the wagon is intent on traveling, not talking!");      }    }  else    {    [ if all are off screen    if (vTmpVal == 255 &&         vSailor1Dist == 255 &&         vSailor2Dist == 255)      {      print("There is no one around.");      }    else      {      print("There is no one close enough.");      }    }  }  if (said("examine", "cart"))  {  distance(oWagon, ego, vTmpVal);  if (vTmpVal == 255)    {    print("There is no wagon in sight.");    }  else    {    print("That driver is making up for lost time on this straight stretch!");    }  }  if (said("examine", "door"))  {  print("This is the back door to the hardware store.");  }  if (said("open", "door"))  {  print("This door is never used, so it is locked.");  }  if ((said("unlock", "door") ||     said("use", "house key")))  {  print("There is no reason to unlock this door.");  }  if ((said("examine") ||     said("examine", "around")))  {  print("There are two stores near here.");  }  if (said("examine", "wall"))  {  [ if the poster is up  if (isset(fPoster))    {    print("There is a poster on the wall of the hardware store.");    }  else    {    print("You see the wall of the hardware store.");    }  }  if (said("examine", "bird"))  {  print("Sea gulls are a common sight here.");  }  if ((said("examine", "shop") ||     said("examine", "hardware", "shop")))  {  print("You see part of the hardware store. There is another store close by.");  }  if ((said("swim") ||     said("go", "swim") ||     said("go", "water") ||     said("go", "creek") ||     said("go", "ocean") ||     said("swim", "water") ||     said("go", "swim", "water") ||     said("jump", "water") ||     said("jump", "creek") ||     said("jump", "ocean") ||     said("enter", "water") ||     said("enter", "creek") ||     said("enter", "ocean")))  {  print("You have more sense than that! That water is cold!!");  }  Done:return();[ **************************************[ MESSAGES[ **************************************#message 1 "    Head for the\n    GOLDEN STATE\nBefore it's too late!"#message 2 "It is difficult to see the poster from here."#message 3 "There is no poster around here."#message 4 "Across the East River you see New York City."#message 5 "The purpose of the wrought-iron fence is to keep people from falling in the water."#message 6 "You see part of the hardware store. There is another store close by."#message 7 "You can barely see the warehouse at the end of the dock."#message 8 "The boardwalks lead to the stores."#message 9 "The ship is gone."#message 10 "You see the East River."#message 11 "The ship is preparing for departure."#message 13 "This is \"Water Street.\""#message 14 "It looks like that sailor is hustling and bustling around town preparing to go somewhere!"#message 15 "When the ship is at the dock, you see more people in this part of town."#message 16 "This man drives his wagon all over town."#message 17 "There is no one around."#message 18 "There is no one close enough."#message 19 "The crewman says, \"I hope you will be aboard when the ship leaves.\""#message 20 "This sailing man says, \"The captain advises we are going to California next. I can hardly wait to get on our way!!\""#message 21 "The man says, \"Uhhhhhh, I'll be in town until the ship leaves.\""#message 22 "The man on the wagon is intent on traveling, not talking!"#message 23 "There is no wagon in sight."#message 24 "That driver is making up for lost time on this straight stretch!"#message 25 "This is the back door to the hardware store."#message 27 "This door is never used, so it is locked."#message 28 "There is no reason to unlock this door."#message 29 "There are two stores near here."#message 30 "You have no key for this door."#message 31 "There is a poster on the wall of the hardware store."#message 32 "You see the wall of the hardware store."#message 33 "Sea gulls are a common sight here."#message 34 "You have more sense than that! That water is cold!!"