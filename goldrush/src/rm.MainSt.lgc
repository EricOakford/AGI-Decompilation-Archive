[***********************************************************[[ rm.MainSt[[ This is the starting room for the game. Key activities[ here include meeting Leonard, who sells boat tickets, the[ real estate agent who wants to buy Jerrod's house, and the[ neighbor who rakes his yard.[[***********************************************************[ **************************************[ LOCAL DEFINES[ **************************************#define oGull1                       o1#define oGull2                       o2#define oSteamship                   o3#define oLocation                    o4#define oWagon                       o5#define oPedestrian                  o6[ v220 is not used#define vTmpVal                    v221#define rndStep                    v222#define rndX                       v223#define rndY                       v224#define vTimer                     v225#define vPedStatus                 v226#define vWgnStatus                 v227#define vDistPed                   v228#define vPedViewNum                v229#define vWgnDist                   v230#define vObjX                      v231#define vObjY                      v232[ f220 is not used#define fGull1Moved                f221#define fGull2Moved                f222#define fShipMoved                 f223#define fShowShip                  f224#define fTreePoster                f225#define fWagonMoved                f226#define fPedMoved                  f227#define fDoneDying                 f228#define fRunOver                   f229#define fSoundDone                 f230[ **************************************[ FIRST CYCLE ONLY[ **************************************if (isset(newRoom))  {  [ load, draw, discard this room's picture  load.pic(currentRoom);  draw.pic(currentRoom);  discard.pic(currentRoom);    [ views for additions to the picture  load.view(vw.SkylineArt);  load.view(vw.Posters);    [ add skyline art to the background image  add.to.pic(vw.SkylineArt, 0, 5, 0, 52, 4, 4);  add.to.pic(vw.SkylineArt, 0, 6, 20, 52, 4, 4);  add.to.pic(vw.SkylineArt, 0, 7, 40, 52, 4, 4);  add.to.pic(vw.SkylineArt, 0, 8, 60, 52, 4, 4);  add.to.pic(vw.SkylineArt, 0, 9, 80, 52, 4, 4);  add.to.pic(vw.SkylineArt, 0, 10, 100, 52, 4, 4);    [ if the gold rush has been announced  if (isset(RushIsPublic))    {    [ add the poster indicating the Seafarer is setting sail    add.to.pic(vw.Posters, 0, 2, 99, 133, 14, 14);    set(fTreePoster);    }  [ once added, horizon art not needed any more  [ (this also discards vw.Posters)  discard.view(vw.SkylineArt);    [ load other views used in the room  load.view(vw.JerrodNY);  load.view(vw.DyingJerrodNY);  load.view(vw.StmshipLg);  load.view(vw.Gulls);  load.view(vw.NeighborRake);    [if the fade name effect hasn't happened  if (!isset(FadeName))    {    [ load the view    load.view(vw.FadeBrooklyn);    }      [ load views for the other two pedestrians that may show  [ up  load.view(vw.Leonard);  load.view(vw.Agent);    [ load view for the wagon that likes to run over Jerrod  load.view(vw.Wagon);    [ if Jerrod is on the steam ship  if (isset(OnSteamship))    {    [ load music to play during the cutscene    load.sound(m.AnchorsAway);    }  else    {    [ if not a cutscene, Jerrod can die, so    [ load the death sound    load.sound(m.Death);    }      [ two gulls randomly fly about  set.view(oGull1, vw.Gulls);  animate.obj(oGull1);  ignore.horizon(oGull1);  ignore.blocks(oGull1);  ignore.objs(oGull1);  position(oGull1, 30, 25);  set.priority(oGull1, 6);  vTmpVal = 2;  cycle.time(oGull1, vTmpVal);  [ set the flag so the gull will  [ get new movement instruction  set(fGull1Moved);  draw(oGull1);  [ second gull  set.view(oGull2, vw.Gulls);  animate.obj(oGull2);  ignore.horizon(oGull2);  ignore.blocks(oGull2);  ignore.objs(oGull2);  position(oGull2, 50, 35);  set.priority(oGull2, 6);  cycle.time(oGull2, vTmpVal);  [ set the flag so the gull will  [ get new movement instruction  set(fGull2Moved);  draw(oGull2);    [ if steamship is moving  if (SteamshipXM > 0 && SteamshipXM < 107)    {    [ add it to screen    animate.obj(oSteamship);    set.view(oSteamship, vw.StmshipLg);    set.loop(oSteamship, 2);    fix.loop(oSteamship);    [ position it    position.v(oSteamship, SteamshipXM, SteamshipY);    draw(oSteamship);    [ and start it moving across the screen    step.time(oSteamship, StmShipStep);    move.obj(oSteamship, 106, 57, 1, fShipMoved);    set(fShowShip);    }    [ if coming from introduction    if (!isset(FadeName))    {    [ the location banner hasn't been displayed yet, so show    [ it now    animate.obj(oLocation);    set.view(oLocation, vw.FadeBrooklyn);    set.loop(oLocation, 0);    set.cel(oLocation, 0);    set.priority(oLocation, 15);    position(oLocation, 44, 159);    draw(oLocation);    ignore.objs(oLocation);    stop.update(oLocation);    }    [ a wagon occasionally drives by  animate.obj(oWagon);  set.view(oWagon, vw.Wagon);  set.loop(oWagon, 0);  position(oWagon, 1, 78);  [ if there is no banner  if (!isset(FadeName))    {    [ add wagon now    draw(oWagon);    [ set status to '1'    vWgnStatus = 1;    }  else    {    [ at start, with banner showing, don't show the wagon    [ yet    vWgnStatus = 10;    }  [ start wagon moving - while it doesn't cause a problem in  [ this case, the move.obj command shouldn't normally be  [ used on an object that hasn't been drawn yet (as is the  [ case when the banner is present)  move.obj(oWagon, 112, 78, 2, fWagonMoved);  animate.obj(oPedestrian);  [ set status to show pedestrian is on screen (even if not   [ due to the banner being visible)  vPedStatus = 10;    [ Jerrod appears in his normal Brooklyn attire  animate.obj(ego);  set.view(ego, vw.JerrodNY);    [ if coming from game start, do a few more setup things  if ((previousRoom == rm.Title ||       previousRoom == rm.JerrodIntro ||       previousRoom == rm.ExpandIntro ||       previousRoom == rm.Introduction ||       previousRoom == rm.Credits ||       previousRoom == lgc.Start))    {    [ allow player to input commands    accept.input();    [ PreviousAnimateInt is set to animation interval +1 to    [ force cycles per second to update    [   (see lgc.Main ~ line 222 or so)    PreviousAnimateInt = animationInterval;    ++PreviousAnimateInt;        [ make sure game timer is not paused    reset(PauseGameTimer);        [ move Jerrod to start position    position(ego, 20, 141);    set.loop(ego, 0);    set.cel(ego, 0);    [ save Jerrod's position info    get.posn(ego, EgoX, EgoY);    OldEgoX = EgoX;    OldEgoY = EgoY;    [ Jerrod starts the game motionless    stop.cycling(ego);    }    [ if coming from below, need to adjust 'x' position to  [ account for change in perspective (street is wider at  [ bottom than at top)  if (posn(ego, 22, 70, 33, 75))    {    position(ego, 60, 167);    }  if (posn(ego, 34, 70, 38, 75))    {    position(ego, 77, 167);    }  if (posn(ego, 39, 70, 43, 75))    {    position(ego, 93, 167);    }      [ only add Jerrod to the screen if not on the steamship  if (!isset(OnSteamship))    {    draw(ego);    }    [ now show the screen  show.pic();    [ if name hasn't faded (meaning this in this room at game  [ start)  if (!isset(FadeName))    {    [ show the status line    set(ShowStatus);    [ clear the flag to force the main logic to force an     [ update to the status line    reset(StatusLineSet);    }    [ if Jerrod is on the steamship, in a cutscrene  if (isset(OnSteamship))    {    [ play the music    sound(m.AnchorsAway, fSoundDone);    }  }[ **************************************[ EVERY CYCLE[ **************************************[ if the location name hasn't faded and timer is activeif (!isset(FadeName) && vTimer < 154)  {  [ increment the timer  ++vTimer;  [ after 100 cycles  if (vTimer == 100)    {    [ show partial fade of location    set.cel(oLocation, 1);    force.update(oLocation);    }  [ after 153 cycles  if (vTimer == 153)    {    [ remove location banner from screen    start.update(oLocation);    erase(oLocation);    [ set the flag to show banner is gone    set(FadeName);    }  }[ when wagon finishes movingif (isset(fWagonMoved) && vWgnStatus == 1)  {  [ remove it from screen  reset(fWagonMoved);  erase(oWagon);  vWgnStatus = 10;  }[ if Jerrod is at top of screen in the path of the wagonif (EgoY == 78 && EgoHealthStatus == 0)  {  [ need to see if the wagon runs over Jerrod    [ get distance from Jerrod to the wagon  distance(ego, oWagon, vWgnDist);    [ get current view assigned to wagon (this is unnecessary  [ because it will ALWAYS be vw.Wagon)  current.view(oWagon, vTmpVal);    [ if the wagon object is using the wagon view  if (vTmpVal == vw.Wagon)    {    [ get wagon's direction    get.dir(oWagon, vTmpVal);        [ depending on direction, determine if wagon hits Jerrod    if (vTmpVal == LEFT)      {      [ account for length of wagon      if ((vWgnDist == 29 || vWgnDist == 30))        {        set(fRunOver);        }      }    if (vTmpVal == RIGHT)      {      [ account for length of wagon      if ((vWgnDist == 28 || vWgnDist == 29))        {        set(fRunOver);        }      }    }  }[ if Jerrod got run over  if (isset(fRunOver))  {  [ reset the flag  reset(fRunOver);  [ show the dying view  [ and set the egoIsDead flag  ignore.objs(ego);  set.view(ego, vw.DyingJerrodNY);  [ make sure to start at first cel  set.cel(ego, 0);  [ allow ego object to cycle at rest  set(CycleAtRest);  [ run the cycle once  end.of.loop(ego, fDoneDying);  [ Jerrod is dead due to being run over  EgoHealthStatus = 4;  }[ after Jerrod finishes dyingif (isset(fDoneDying))  {  [ reset flag  reset(fDoneDying);  [ call death logic to handle details of Jerrod's demise  call(lgc.DeathRunOver);  }  [ if wagon is not on screenif (vWgnStatus > 9)  {  [ use randomizer to see if the wagon comes back  random(20, 100, vWgnStatus);  [ one-in-eighty chance;  if (vWgnStatus == 77)    {    [ choose a random direction    random(0, 1, vWgnStatus);    if (vWgnStatus == 0)      {      [ start wagon on right, going left      set.loop(oWagon, 1);      set.view(oWagon, vw.Wagon);      position(oWagon, 112, 78);      draw(oWagon);      move.obj(oWagon, 0, 78, 2, fWagonMoved);      }    else      {      [ start wagon on left, going right      set.loop(oWagon, 0);      set.view(oWagon, vw.Wagon);      position(oWagon, 1, 78);      draw(oWagon);      move.obj(oWagon, 112, 78, 2, fWagonMoved);      }    [ set status to indicate wagon is visible    vWgnStatus = 1;    }  }[ if a pedestrian is not present  if (vPedStatus > 9)  {  [ use randomizer to see if a pedestrian comes back  random(20, 100, vPedStatus);  [ one-in-eighty chance  if (vPedStatus == 77)    {    [ pick one of three possible pedestrians at random    random(0, 2, vPedStatus);    if (vPedStatus == 0)      {      set.view(oPedestrian, vw.NeighborRake);      }    if (vPedStatus == 1)      {      set.view(oPedestrian, vw.Leonard);      }    if (vPedStatus == 2)      {      set.view(oPedestrian, vw.Agent);      }    [ choose a random starting position and direction    random(0, 2, vPedStatus);    if (vPedStatus == 0)      {      set.loop(oPedestrian, 0);      position(oPedestrian, 0, 80);      draw(oPedestrian);      move.obj(oPedestrian, 66, 80, 1, fPedMoved);      }    if (vPedStatus == 1)      {      set.loop(oPedestrian, 1);      position(oPedestrian, 0, 80);      draw(oPedestrian);      move.obj(oPedestrian, 66, 80, 1, fPedMoved);      }    if (vPedStatus == 2)      {      set.loop(oPedestrian, 3);      position(oPedestrian, 66, 167);      draw(oPedestrian);      move.obj(oPedestrian, 66, 80, 1, fPedMoved);      }    [ set status to indicate pedestrian is on first leg    vPedStatus = 3;    }  }[ when pedestrian reaches first point change direction and[ continueif (isset(fPedMoved) && vPedStatus == 3)  {  reset(fPedMoved);  [ randomly determine second leg  random(0, 2, vPedStatus);  if (vPedStatus == 0)    {    move.obj(oPedestrian, 0, 80, 1, fPedMoved);    }  if (vPedStatus == 1)    {    move.obj(oPedestrian, 122, 80, 1, fPedMoved);    }  if (vPedStatus == 2)    {    move.obj(oPedestrian, 66, 167, 1, fPedMoved);    }  [ set status to indicate pedestrian is on second leg  vPedStatus = 4;  }[ when pedestrian reaches last pointif (isset(fPedMoved) && vPedStatus == 4)  {  [ reset flag  reset(fPedMoved);  [ set status to hide pedestrian  vPedStatus = 10;  [ remove him from screen  erase(oPedestrian);  }  [ get pedestrian's position valuesget.posn(oPedestrian, vObjX, vObjY);[ if pedestrian has stopped (because Jerrod blocks him)if (OldObj1X == vObjX && OldObj1Y == vObjY)  {  [ stop cycling until movement resumes  stop.cycling(oPedestrian);  }else  {  [ otherwise start cycling pedestrian while he is moving  start.cycling(oPedestrian);  }  [ save pedestrian location valuesOldObj1X = vObjX;OldObj1Y = vObjY;[ if ego hits a special line it means he's crossing the[ bridgeif (isset(egoHitSpecial))  {  [ if Jerrod is moving up-left or down-left  if ((egoDir == UP_LEFT || egoDir == DOWN_LEFT))    {    [ change to left    egoDir = LEFT;    }  [ if Jerrod is moving left  if (egoDir == LEFT)    {    [ position Jerrod left one pixel and up one pixel    TmpX = -1; [ 255;    TmpY = -1; [ 255;    reposition(ego, TmpX, TmpY);    }  [ if Jerrod is moving up-right or down-right  if ((egoDir == UP_RIGHT || egoDir == DOWN_RIGHT))    {    [ change to right    egoDir = RIGHT;    }  [ if Jerrod is moving right  if (egoDir == RIGHT)    {    [ position Jerrod right one pixel and down one pixel    TmpX = 1;    TmpY = 1;    reposition(ego, TmpX, TmpY);    }  }  [ when seagull #1 reaches its destinationif (isset(fGull1Moved))  {  [ reset movement flag  reset(fGull1Moved);  [ choose a new random location  random(1, 150, rndX);  random(5, 114, rndY);  [ and a random step value  random(1, 2, rndStep);  [ send seagull to new location  move.obj.v(oGull1, rndX, rndY, rndStep, fGull1Moved);  }  [ when seagull #2 reaches its destinationif (isset(fGull2Moved))  {  [ reset movement flag  reset(fGull2Moved);  [ choose a new random location  random(1, 150, rndX);  random(5, 114, rndY);  [ and a random step value  random(1, 2, rndStep);  [ send seagull to new location  move.obj.v(oGull2, rndX, rndY, rndStep, fGull2Moved);  }[ if steamship is moving across screen but ship is not on[ screen yetif (SteamshipXM > 0 && SteamshipXM < 107 && !isset(fShowShip))  {  [ add it to screen now  animate.obj(oSteamship);  set.view(oSteamship, vw.StmshipLg);  set.loop(oSteamship, 2);  fix.loop(oSteamship);  position.v(oSteamship, SteamshipXM, SteamshipY);  draw(oSteamship);  step.time(oSteamship, StmShipStep);  [ send it across the screen  move.obj(oSteamship, 106, 57, 1, fShipMoved);  [ set flag to show ship is on screen  set(fShowShip);  }[ if ship is done moving and Jerrod is on the ship if (isset(fShipMoved) && isset(OnSteamship))  {  [ move to next room cutscene  new.room(rm.WaterSt_Right); [ ##LE001##  }  [ if ship is done moving and Jerrod is not onboard if (isset(fShipMoved) && !isset(OnSteamship))  {  [ erase the ship  reset(fShipMoved);  erase(oSteamship);  }[ **************************************[ CHECK FOR AN EXIT CONDITION[ **************************************if (edgeEgoHit != NOT_HIT)  {  [ releasing loop is not necessary, since a new.room command  [ is going to happen next (which resets all screen objects)  release.loop(oSteamship);    [ if the name banner hasn't faded yet  if (!isset(FadeName))    {    [ fade it now    set(FadeName);    }  if (edgeEgoHit == RIGHT_EDGE)    {    new.room(rm.WaterSt_Right); [ ##LE002##    }  if (edgeEgoHit == LEFT_EDGE)    {    new.room(rm.ParkNorth); [ ##LE003##    }  if (edgeEgoHit == BOTTOM_EDGE)    {    new.room(rm.JerrodsHouse); [ ##LE004##    }  }  [ **************************************[ PROCESS PLAYER INPUT[ **************************************[ if player hasn't provided input no need to do said testsif (!isset(haveInput))  {  goto(Done);  }  [ look houseif (said("examine", "home"))  {  print("This house, just like every other house in this neighborhood, is very "        "valuable.");  }  [ look bridgeif (said("examine", "bridge"))  {  [ response depends on which bridge Jerrod is closest to  if (posn(ego, 0, 122, 104, 167))    {    print("Getting around town is much easier since this bridge has been built!");    }  else    {    print("This is the oldest bridge in town. It is very weathered.");    }  }  [ look river/look oceanif ((said("examine", "creek") ||     said("examine", "water") ||     said("examine", "east river") ||     said("examine", "ocean")))  {  if (posn(ego, 0, 20, 159, 92))    {    print("This is the East River.");    }  else    {    print("This is a very peaceful estuary, in a peaceful part of town.");    }  }  [ look acrossif (said("examine", "across"))  {  if (posn(ego, 0, 99, 104, 167))    {    print("On the other side of the estuary is the downtown Brooklyn Park.");    }  else    {    print("Looking across the East River, you have a spectacular view of New "          "York City.");    }  }  [ look parkif ((said("examine", "park") || said("examine", "brooklyn", "park")))  {  print("On the other side of the estuary is the downtown Brooklyn Park.");  }  [ look streetlampif (said("examine", "lamp"))  {  print("The city streets have been much safer since they installed these "        "streetlights.");  }  [ look/look aroundif ((said("examine") ||     said("examine", "around") ||     said("examine", "brooklyn")))  {  print("You are in the heart of suburban Brooklyn. The year is 1848.");  }  [ look treeif ((said("examine", "forest") || said("examine", "maple", "forest")))  {  print("Because of these maple trees, this is a very shady neighborhood.");  if (isset(fTreePoster))    {    print("There is a poster on one of the trees.");    }  }  [ look road/look streetif ((said("examine", "path") ||     said("examine", "main", "path") ||     said("examine", "water", "path")))  {  if (posn(ego, 35, 98, 107, 167))    {    print("Although it's not the busiest street in town, it isn't called Main "          "Street for nothing!");    }  else    {    print("Water Street is very appropriately named.");    }  }  [ look fenceif (said("examine", "fence"))  {  print("These are wrought iron fences.");  }  [ look New Yorkif (said("examine", "new york"))  {  print("New York City is only a ferry ride away, but you haven't been there "        "since you moved to Brooklyn as a child.");  }  [ look grassif (said("examine", "grass"))  {  print("Just look at these beautiful yards!");  }  [ look birdif (said("examine", "bird"))  {  print("Sea gulls are a common sight here.");  }  [ look shipif (said("examine", "boat"))  {  [ if Jerrod is on the ship  if (isset(OnSteamship))    {    print("You are aboard the mighty \"Sea Farer!\"");    }  else    {    if (SteamshipXM > 0 && SteamshipXM < 107)      {      print("Don't you wish you were on that ship destined for distant lands?");      }    else      {      print("The ship is not here.");      }    }  }  [ look sign/read signif ((said("examine", "sign") ||     said("examine", "billboard") ||     said("read", "sign") ||     said("read", "billboard")))  {  [ if there is a tree poster  if (isset(fTreePoster))    {    [ if Jerrod is close to the tree    if (posn(ego, 81, 140, 107, 167))      {      print("  The CLIPPER \nis ready to sail! \n Don't miss it! \n   First "            "Class \n  accomodations \n to CALIFORNIA!!");      }    else      {      print("It is difficult to read the poster from here.");      }    }  else    {    print("There is no poster to read around here.");    }  }  [ look wagonif (said("examine", "cart"))  {  [ if on steam ship  if (isset(OnSteamship))    {    print("Along the Brooklyn shore you see many people and wagons! This may be "          "your last look at these familiar scenes!!");    [ skip to end    goto(Done);    }      [ if not on ship, get distance to wagon  distance(ego, oWagon, vDistPed);    [ if wagon is on screen  if (vDistPed < 255)    {    print("If you've seen one of these wagons, you've seen them all!");    }  else    {    print("There is no wagon in sight.");    }  }  [ look manif (said("examine", "boy"))  {    [ if Jerrod is on the ship    if (isset(OnSteamship))    {    print("Along the Brooklyn shore you see many people and wagons! This may be "          "your last look at these familiar scenes!!");    goto(Done);    }      [ response depends on whether anyone is nearby    [ get distance to pedestrian and wagon  distance(ego, oPedestrian, vDistPed);  distance(ego, oWagon, vWgnDist);    [ determine who pedestrian is by view number  current.view(oPedestrian, vPedViewNum);    [ if close to the wagon or the pedestrian  if ((vDistPed < 60 || vWgnDist < 60))    {    [ check pedestrian first    if (vDistPed < 60)      {      if (vPedViewNum == 30)        {        print("There is no doubt about it, that handyman is definitely carrying "              "a rake!");        }      if (vPedViewNum == 37)        {        print("It is hard to imagine anything being that huge!!");        }      if (vPedViewNum == 48)        {        print("You have no idea who this man is, but you know he is a real "              "estate man.");        }      }    [ then see if wagon is close    if (vWgnDist < 60)      {      print("That man sure can handle an animal team and wagon!");      }    }  else    {    [ not near either object - if both are off screen    if (vDistPed == 255 && vWgnDist == 255)      {      print("There is no one around.");      }    else      {      [ if pedestrian is on screen but far away      if (vDistPed < 255 && vDistPed > 59)        {        if (vPedViewNum == vw.NeighborRake)          {          print("From here it looks like that handyman is carrying around a "                "rake!");          }        if (vPedViewNum == vw.Leonard)          {          print("Even from here it is easy to tell who that is. That is Leonard "                "B. Huge!!");          }        if (vPedViewNum == vw.Agent)          {          print("From a distance it is difficult to determine who that is.");          }        }      else        {        [ if wagon is on screen but far away        if (vWgnDist < 255 && vWgnDist > 59)          {          print("That man sure can handle an animal team and wagon!");          }        }      }    }  }    [ talk to manif ((said("speak", "boy") ||     said("speak")))  {  [ response depends on whether anyone is nearby    [ get distance to pedestrian and wagon  distance(ego, oPedestrian, vDistPed);  distance(ego, oWagon, vWgnDist);    [ use view number to determine who pedestrian is  current.view(oPedestrian, vPedViewNum);    [ if close to the wagon or the pedestrian  if ((vDistPed < 40 || vWgnDist < 40))    {    [ check pedestrian first    if (vDistPed < 40)      {      if (vPedViewNum == 30)        {        print("This new homeowner says, \"I've heard about the gold in "              "California, but I just can't give up my house.\"");        }      if (vPedViewNum == 37)        {        print("Leonard says, \"Jerrod, go to the warehouse sometime and take a "              "look at the new poster I've put there.\"");        }      if (vPedViewNum == 48)        {        print("This real estate man says, \"I'm on my way to close another real "              "estate transaction.\"");        }      }    [ then check wagon    if (vWgnDist < 40)      {      print("The man on the wagon cannot hear you over the rumble of the wagon.");      }    [ skip to end    goto(Done);    }  [ not near either object- if both are off screen  if (vDistPed == 255 && vWgnDist == 255)    {    print("There is no one around.");    }  else    {    print("No one is close enough to hear you.");    }  }  [ look railingif (said("examine", "rail"))  {  print("The railing keeps people from falling into the estuary!");  }  [ look under bridgeif (said("examine", "below", "bridge"))  {  print("There is nothing but water under the bridge.");  }  [ go swimmingif ((said("swim") ||     said("go", "swim") ||     said("go", "water") ||     said("go", "creek") ||     said("go", "ocean") ||     said("swim", "water") ||     said("go", "swim", "water") ||     said("jump", "water") ||     said("jump", "creek") ||     said("jump", "ocean") ||     said("enter", "water") ||     said("enter", "creek") ||     said("enter", "ocean")))  {  print("You have more sense than that! That water is cold!!");  }  Done:return();[ **************************************[ MESSAGES[ **************************************#message 1 "If you've seen one of these wagons, you've seen them all!"#message 2 "This house, just like every other house in this neighborhood, is very valuable."#message 3 "This is the oldest bridge in town. It is very weathered."#message 4 "Getting around town is much easier since this bridge has been built!"#message 6 "This is a very peaceful estuary, in a peaceful part of town."#message 7 "On the other side of the estuary is the downtown Brooklyn Park."#message 8 "Looking across the East River, you have a spectacular view of New York City."#message 9 "The city streets have been much safer since they installed these streetlights."#message 10 "You are in the heart of suburban Brooklyn. The year is 1848."#message 11 "Because of these maple trees, this is a very shady neighborhood."#message 12 "Although it's not the busiest street in town, it isn't called Main Street for nothing!"#message 13 "These are wrought iron fences."#message 14 "New York City is only a ferry ride away, but you haven't been there since you moved to Brooklyn as a child."#message 15 "This is the East River."#message 16 "Just look at these beautiful yards!"#message 18 "Water Street is very appropriately named."#message 21 "Sea gulls are a common sight here."#message 22 "Don't you wish you were on that ship destined for distant lands?"#message 23 "The ship is not here."#message 24 "  The CLIPPER \nis ready to sail! \n Don't miss it! \n   First Class \n  accomodations \n to CALIFORNIA!!"#message 25 "It is difficult to read the poster from here."#message 26 "There is no poster to read around here."#message 27 "There is no wagon in sight."#message 28 "There is no one around."#message 29 "From here it looks like that handyman is carrying around a rake!"#message 30 "Even from here it is easy to tell who that is. That is Leonard B. Huge!!"#message 31 "From a distance it is difficult to determine who that is."#message 32 "There is no doubt about it, that handyman is definitely carrying a rake!"#message 33 "It is hard to imagine anything being that huge!!"#message 34 "You have no idea who this man is, but you know he is a real estate man."#message 36 "No one is close enough to hear you."#message 37 "This new homeowner says, \"I've heard about the gold in California, but I just can't give up my house.\""#message 38 "Leonard says, \"Jerrod, go to the warehouse sometime and take a look at the new poster I've put there.\""#message 39 "This real estate man says, \"I'm on my way to close another real estate transaction.\""#message 40 "That man sure can handle an animal team and wagon!"#message 41 "The man on the wagon cannot hear you over the rumble of the wagon."#message 42 "There is a poster on one of the trees."#message 43 "The railing keeps people from falling into the estuary!"#message 44 "There is nothing but water under the bridge."#message 56 "Along the Brooklyn shore you see many people and wagons! This may be your last look at these familiar scenes!!"#message 57 "You are aboard the mighty \"Sea Farer!\""#message 58 "You have more sense than that! That water is cold!!"