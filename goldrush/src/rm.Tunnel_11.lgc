[***********************************************************[[ rm.Tunnel_11[[ Another tunnel location, on the way to the final gold mine[ location. There are two piles of gold nuggets that Jerrod[ can find in this room, one that is in plain sight and [ another that he has to find by digging in the right place.[ [***********************************************************[ **************************************[ LOCAL DEFINES[ **************************************#define oDark1                       o1#define oDark2                       o2#define oDark3                       o3#define oDark4                       o4#define oDark5                       o5#define oDark6                       o6#define oDark7                       o7#define oDark8                       o8#define oDark9                       o9#define oDark10                     o10#define oDark11                     o11#define oDark12                     o12#define oDark13                     o13#define oDark14                     o14#define oDark15                     o15#define oNugget1                    o16#define oNugget2                    o17#define vFlicker                   v220[ v221 and v222 are not used#define vDigTimer                  v223#define vEgoLoop                   v224#define vEgoCel                    v225#define fDrawDark                  f220#define fLight1                    f221#define fLight2                    f222#define fLight3                    f223#define fLight4                    f224#define fLight5                    f225#define fLight6                    f226#define fLight7                    f227#define fLight8                    f228#define fLight9                    f229#define fLight10                   f230#define fLight11                   f231#define fLight12                   f232#define fLight13                   f233#define fLight14                   f234#define fLight15                   f235[ f236 through f237 are not used#define fClimbing                  f238#define fFalling                   f239[ **************************************[ FIRST CYCLE ONLY[ **************************************if (isset(newRoom))  {  [ load the tunnel logic, that handles all the common  [ tunnel functions  load.logics(lgc.Tunnels);    [ load, draw and discard this room's picture  load.pic(currentRoom);  draw.pic(currentRoom);  discard.pic(currentRoom);    [ load views needed by objects in the room  load.view(vw.WideJerrodCA);  load.view(vw.Darkness);  load.view(vw.TunnelDigging);  load.view(vw.TunnelArt);  [ load sound used in the room  load.sound(m.FoundGold);    [ add the darkness panels - these black out areas of the  [ tunnel that are beyond the range of Jerrod's light  [ (don't draw them yet, lgc.DarkenTunnel will do that)  animate.obj(oDark1);  set.view(oDark1, vw.Darkness);  set.loop(oDark1, 0);  set.cel(oDark1, 1);  set.priority(oDark1, 15);  ignore.objs(oDark1);  ignore.blocks(oDark1);  position(oDark1, 0, 116);  [ darkness panel 2  animate.obj(oDark2);  set.view(oDark2, vw.Darkness);  set.loop(oDark2, 0);  set.cel(oDark2, 1);  set.priority(oDark2, 15);  ignore.objs(oDark2);  ignore.blocks(oDark2);  position(oDark2, 11, 116);  [ darkness panel 3  animate.obj(oDark3);  set.view(oDark3, vw.Darkness);  set.loop(oDark3, 0);  set.cel(oDark3, 1);  set.priority(oDark3, 15);  ignore.objs(oDark3);  ignore.blocks(oDark3);  position(oDark3, 22, 116);  [ darkness panel 4  animate.obj(oDark4);  set.view(oDark4, vw.Darkness);  set.loop(oDark4, 0);  set.cel(oDark4, 1);  set.priority(oDark4, 15);  ignore.objs(oDark4);  ignore.blocks(oDark4);  position(oDark4, 33, 116);  [ darkness panel 5  animate.obj(oDark5);  set.view(oDark5, vw.Darkness);  set.loop(oDark5, 0);  set.cel(oDark5, 1);  set.priority(oDark5, 15);  ignore.objs(oDark5);  ignore.blocks(oDark5);  position(oDark5, 44, 116);  [ darkness panel 6  animate.obj(oDark6);  set.view(oDark6, vw.Darkness);  set.loop(oDark6, 0);  set.cel(oDark6, 1);  set.priority(oDark6, 15);  ignore.objs(oDark6);  ignore.blocks(oDark6);  position(oDark6, 55, 116);  [ darkness panel 7  animate.obj(oDark7);  set.view(oDark7, vw.Darkness);  set.loop(oDark7, 0);  set.cel(oDark7, 1);  set.priority(oDark7, 15);  ignore.objs(oDark7);  ignore.blocks(oDark7);  position(oDark7, 66, 116);  [ darkness panel 8  animate.obj(oDark8);  set.view(oDark8, vw.Darkness);  set.loop(oDark8, 0);  set.cel(oDark8, 1);  set.priority(oDark8, 15);  ignore.objs(oDark8);  ignore.blocks(oDark8);  position(oDark8, 77, 116);  [ darkness panel 9  animate.obj(oDark9);  set.view(oDark9, vw.Darkness);  set.loop(oDark9, 0);  set.cel(oDark9, 1);  set.priority(oDark9, 15);  ignore.objs(oDark9);  ignore.blocks(oDark9);  position(oDark9, 88, 117);  [ darkness panel 10  animate.obj(oDark10);  set.view(oDark10, vw.Darkness);  set.loop(oDark10, 0);  set.cel(oDark10, 1);  set.priority(oDark10, 15);  ignore.objs(oDark10);  ignore.blocks(oDark10);  position(oDark10, 99, 117);  [ darkness panel 11  animate.obj(oDark11);  set.view(oDark11, vw.Darkness);  set.loop(oDark11, 0);  set.cel(oDark11, 1);  set.priority(oDark11, 15);  ignore.objs(oDark11);  ignore.blocks(oDark11);  position(oDark11, 110, 117);  [ darkness panel 12  animate.obj(oDark12);  set.view(oDark12, vw.Darkness);  set.loop(oDark12, 0);  set.cel(oDark12, 1);  set.priority(oDark12, 15);  ignore.objs(oDark12);  ignore.blocks(oDark12);  position(oDark12, 121, 117);  [ darkness panel 13  animate.obj(oDark13);  set.view(oDark13, vw.Darkness);  set.loop(oDark13, 0);  set.cel(oDark13, 1);  set.priority(oDark13, 15);  ignore.objs(oDark13);  ignore.blocks(oDark13);  position(oDark13, 132, 117);  [ darkness panel 14  animate.obj(oDark14);  set.view(oDark14, vw.Darkness);  set.loop(oDark14, 0);  set.cel(oDark14, 1);  set.priority(oDark14, 15);  ignore.objs(oDark14);  ignore.blocks(oDark14);  position(oDark14, 143, 117);  [ darkness panel 15  animate.obj(oDark15);  set.view(oDark15, vw.Darkness);  set.loop(oDark15, 0);  set.cel(oDark15, 1);  set.priority(oDark15, 15);  ignore.objs(oDark15);  ignore.blocks(oDark15);  position(oDark15, 149, 117);    [ the gold nuggets in center that are visible without  [ digging  animate.obj(oNugget2);  set.view(oNugget2, vw.TunnelArt);  set.loop(oNugget2, 0);  set.cel(oNugget2, 1);  set.priority(oNugget2, 4);  position(oNugget2, 79, 47);  [ if the nuggets haven't been taken yet  if (!isset(Nugget11Taken))    {    [ draw them on screen    draw(oNugget2);    stop.update(oNugget2);    }      [ the gold nuggets on right side that need to be dug up  animate.obj(oNugget1);  set.view(oNugget1, vw.TunnelArt);  set.loop(oNugget1, 0);  set.cel(oNugget1, 2);  set.priority(oNugget1, 4);  position(oNugget1, 29, 95);  [ if nuggets have been uncovered  if (Nugget11Status == NUGGET_FOUND)    {    [ draw them on screen    draw(oNugget1);    stop.update(oNugget1);    }      [ Jerrod  animate.obj(ego);  [ no climbing in this room  set.view(ego, vw.WideJerrodCA);  draw(ego);    [ the room starts out all darkened  call(lgc.DarkenTunnel);    [ now show the picture  show.pic();  }[ **************************************[ EVERY CYCLE[ **************************************[ to simulate flickering of torch, use a random timer to[ redraw a black box over the area of tunnel that is[ darkened[ if flicker timer has counted downif (vFlicker == 0)  {  [ unlike other tunnel rooms, no check is made to see if  [ Jerrod is stopped    reset(fDrawDark);  [ choose a random time between 2 and 4 cycles  random(2, 4, FlickerTime);  [ set flicker delay to the random vlaue  vFlicker = FlickerTime;    [ draw a black box over the entire tunnel (when Jerrod  [ moves, the cleared areas will be uncovered)  clear.text.rect(2, 0, 21, 39, BLACK);  }  [ decrement flicker counter--vFlicker;[ if Jerrod has a lit lantern or lit matchif ((isset(LanternLit) || isset(MatchLit)))  {  [ depending on position, remove the darkness panels so  [ Jerrod can see the area around him  if (posn(ego, 0, 65, 5, 130) && !isset(fLight1))    {    erase(oDark1);    set(fLight1);    }  if (posn(ego, 0, 65, 16, 130) && !isset(fLight2))    {    erase(oDark2);    set(fLight2);    }  if (posn(ego, 0, 65, 27, 130) && !isset(fLight3))    {    erase(oDark3);    set(fLight3);    }  if (posn(ego, 9, 65, 38, 130) && !isset(fLight4))    {    erase(oDark4);    set(fLight4);    }  if (posn(ego, 20, 65, 49, 130) && !isset(fLight5))    {    erase(oDark5);    set(fLight5);    }  if (posn(ego, 31, 65, 60, 130) && !isset(fLight6))    {    erase(oDark6);    set(fLight6);    }  if (posn(ego, 42, 65, 71, 130) && !isset(fLight7))    {    erase(oDark7);    set(fLight7);    }  if (posn(ego, 53, 65, 82, 130) && !isset(fLight8))    {    erase(oDark8);    set(fLight8);    }  if (posn(ego, 64, 65, 93, 130) && !isset(fLight9))    {    erase(oDark9);    set(fLight9);    }  if (posn(ego, 75, 65, 104, 130) && !isset(fLight10))    {    erase(oDark10);    set(fLight10);    }  if (posn(ego, 86, 65, 115, 130) && !isset(fLight11))    {    erase(oDark11);    set(fLight11);    }  if (posn(ego, 97, 65, 126, 130) && !isset(fLight12))    {    erase(oDark12);    set(fLight12);    }  if (posn(ego, 108, 65, 137, 130) && !isset(fLight13))    {    erase(oDark13);    set(fLight13);    }  if (posn(ego, 119, 65, 148, 130) && !isset(fLight14))    {    erase(oDark14);    set(fLight14);    }  if (posn(ego, 125, 65, 154, 130) && !isset(fLight15))    {    erase(oDark15);    set(fLight15);    }  }  [ if timer is activated (>0)if (vDigTimer > 0)  {  [ increment timer each cycle  ++vDigTimer;  }  [ after 3 cyclesif (vDigTimer == 3)  {  [ get loop (needed to   [ correctly place the gold nugget)  current.loop(ego, vEgoLoop);  }  [ when 25 or more cycles pass with gold still uncoveredif (vDigTimer > 25 && Nugget11Status == NUGGET_HIDDEN)  {  [ get Jerrod's current cel  current.cel(ego, vEgoCel);  [ gold is uncovered at cel 2 only  if (vEgoCel == 2)    {    [ which way Jerrod is facing determines how to make    [ nuggets appear    if (vEgoLoop == 0)      {      [ if Jerrod is by the nugget's position      if (posn(ego, 5, 111, 12, 113))        {        [ uncover the nuggets        Nugget11Status = NUGGET_FOUND;        draw(oNugget1);        sound(m.FoundGold, DoneNoAction);        stop.update(oNugget1);        [ score a point        ++currentScore;        }      }    if (vEgoLoop == 1)      {      [ if Jerrod is by the nugget's position      if (posn(ego, 23, 111, 31, 113))        {        [ uncover the nuggets        Nugget11Status = 1;        draw(oNugget1);        sound(m.FoundGold, DoneNoAction);        stop.update(oNugget1);        [ score a point        ++currentScore;        }      }    }  }  [ when 30 cycles passif (vDigTimer == 30)  {  [ Jerrod is done digging    [ Jerrod no longer cycles when not moving  reset(CycleAtRest);  start.motion(ego);  [ restore normal tunnel view  set.view(ego, vw.WideJerrodCA);  }  [ after 31 cyclesif (vDigTimer == 31)  {  [ reset the timer  vDigTimer = 0;  [ if nugget is now found  if (Nugget11Status == NUGGET_FOUND)    {    [ loop determines how to check for position    if (vEgoLoop == 0)      {      if (posn(ego, 5, 111, 12, 113))        {        print.at("Ya struck gold!", 2, 5, 0);        goto(CheckExits);        }      }    if (vEgoLoop == 1)      {      if (posn(ego, 23, 111, 31, 113))        {        print.at("Ya struck gold!", 2, 5, 0);        goto(CheckExits);        }      }    }      [ if no gold found,   print.at("Nothin'!", 2, 5, 0);  }  CheckExits:[ **************************************[ CHECK FOR AN EXIT CONDITION[ **************************************[ left edgeif (posn(ego, 130, 30, 130, 167))  {  [ redraw dark panels  draw(oDark3);  draw(oDark8);  [ update all objects (not sure why they do this since the  [ new.room command comes next - I guess it's so there'a a  [ split second before the room change with the room  [ updated)  force.update(ego);  [ position Jerrod to appear correctly on next screen  position(ego, 2, 122);  new.room(rm.Tunnel_8); [ ##LE001##  }  [ right edgeif (posn(ego, 1, 50, 1, 160))  {  [ redraw dark panels  draw(oDark3);  draw(oDark8);  [ update all objects (not sure why they do this since the  [ new.room command comes next - I guess it's so there'a a  [ split second before the room change with the room  [ updated)  force.update(ego);  [ position Jerrod to appear correctly on next screen  position(ego, 129, 109);  new.room(rm.Tunnel_12); [ ##LE002##  }  [ **************************************[ PROCESS PLAYER INPUT[ **************************************[ if player hasn't provided input no need to do said testsif (!isset(haveInput))  {  goto(Done);  }  [ look gold/look nuggetif ((said("examine", "gold") ||     said("examine", "gold", "nugget") ||     said("examine", "nugget")))  {  [ if Jerrod has a lit lantern or lit match  if ((isset(LanternLit) || isset(MatchLit)))    {    [ if by either pile of nuggets    if ((posn(ego, 51, 84, 81, 91) ||         posn(ego, 2, 111, 32, 127)))      {      [ if by central nugget pile      if (posn(ego, 51, 84, 81, 91))        {        [ if nuggets were already taken        if (isset(Nugget11Taken))          {          print.at("There's no gold in sight right here.", 2, 5, 0);          }        else          {          print.at("Just look at that gold glitter!", 2, 5, 0);          }        }      else        {        [ by the left side nugget pile                [ if nugget pile is uncovered, not taken        if (Nugget11Status == NUGGET_FOUND)          {          print.at("Just look at that gold glitter!", 2, 5, 0);          }        else          {          print.at("There's no gold in sight right here.", 2, 5, 0);          }        }      }    else      {      [ if neither nugget pile is available (the 'if'      [ statement doesn't matter; response is the same in      [ both cases)      if (isset(Nugget11Taken) && Nugget11Status != 1)        {        print.at("There's no gold in sight right here.", 2, 5, 0);        }      else        {        print.at("There's no gold in sight right here.", 2, 5, 0);        }      }    }  else    {    print.at("It's too dern dark in here to see!", 2, 5, 0);    }  }  [ get goldif ((said("acquire", "gold") ||     said("acquire", "gold", "nugget") ||     said("acquire", "nugget")))  {  [ if by either nugget pile  if ((posn(ego, 57, 84, 75, 91) ||       posn(ego, 8, 111, 26, 127)))    {    [ if by central nugget pile    if (posn(ego, 57, 84, 75, 91))      {      [ if already taken      if (isset(Nugget11Taken))        {        print.at("There's no gold in sight right here.", 2, 5, 0);        }      else        {        [ take the nuggets        print.at("Ya reach out and grab the gold nuggets!", 2, 5, 0);        [ erase nuggets from screen        erase(oNugget2);        [ if gold amount is less than 110        if (GoldIndex < 110)          {          [ get two units of gold          GoldIndex  += 2;          }        else          {          [ otherwise get one unit of gold          GoldIndex  += 1;          }        [ set nugget status to 'taken'        set(Nugget11Taken);        [ update inventory with correct amount of gold        call(lgc.AdjustGold);        }      }    else      {      [ must be near the left side nugget pile            [      [ if nuggets are visible in the tunnel wall      if (Nugget11Status == 1)        {        [ take the nuggets        print.at("Ya reach out and grab the gold nuggets!", 2, 5, 0);        [ erase nuggets from screen        erase(oNugget1);        [ if gold amount is less than 110        if (GoldIndex < 110)          {          [ get two units of gold          GoldIndex  += 2;          }        else          {          [ otherwise get one unit of gold          GoldIndex  += 1;          }        [ set nugget status to 'gone'        Nugget11Status = NUGGET_GONE;        [ update inventory with correct amount of gold        call(lgc.AdjustGold);        }      else        {        print.at("There's no gold in sight right here.", 2, 5, 0);        }      }    }  else    {    [ if both piles are not visible    if (isset(Nugget11Taken) && Nugget11Status != 1)      {      print.at("There's no gold in sight right here.", 2, 5, 0);      }    else      {      print.at("Ya can't reach any gold from here.", 2, 5, 0);      }    }  }  [ use pickif ((said("pick") ||     said("pick", "gold") ||     said("use", "pick") ||     said("swing", "pick")))  {  [ if Jerrod has the pick  if (has("Pick"))    {    [ if Jerrod is climbing or falling (no need to check for    [ that here; Jerrod can't climb or fall in this room)    if ((isset(fClimbing) || isset(fFalling)))      {      if (isset(fClimbing))        {        print.at("Ya can't do that while yer climbin'!", 2, 5, 0);        }      if (isset(fFalling))        {        print.at("That's impossible right now!", 2, 5, 0);        }      }    else      {      [ if touching an alarm line       if (isset(egoHitSpecial))        {        [ this is an area where Jerrod can dig for gold        set.view(ego, vw.TunnelDigging);        [ start timer        vDigTimer = 1;        [ begin at first cel        set.cel(ego, 0);        stop.motion(ego);        [ allow ego object to cycle when not moving        set(CycleAtRest);        [ start digging        start.cycling(ego);        }      else        {        print.at("You're close to a likely spot. Try that nearby.", 2, 5, 0);        }      }    }  else    {    print.at("Ya don't have a pick.", 2, 5, 0);    }  }  [ look ladder (there isn't one)if (said("examine", "ladder"))  {  [ if Jerrod has a lit lantern or lit match  if ((isset(LanternLit) || isset(MatchLit)))    {    print.at("There's no ladder in sight right here.", 2, 5, 0);    }  else    {    print.at("It's too dern dark in here to see!", 2, 5, 0);    }  }  Done:[ call tunnel logic to run code common to all tunnelscall(lgc.Tunnels);return();[ **************************************[ MESSAGES[ **************************************#message 13 "Ya can't do that while yer climbin'!"#message 14 "You're close to a likely spot. Try that nearby."#message 15 "Ya don't have a pick."#message 16 "That's impossible right now!"#message 17 "It's too dern dark in here to see!"#message 20 "Nothin'!"#message 25 "Just look at that gold glitter!"#message 26 "Ya struck gold!"#message 28 "Ya can't reach any gold from here."#message 31 "Ya reach out and grab the gold nuggets!"#message 47 "There's no gold in sight right here."#message 80 "There's no ladder in sight right here."