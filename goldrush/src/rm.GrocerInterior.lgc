[***********************************************************[[ rm.GrocerInterior[[ At the grocery store, Jerrod can shop for food; the only[ item that matters is the citrus; if Jerrod doesn't buy[ it, he won't survive the boat trip.[[***********************************************************[ there should be ~4 lines under a search result if the[ winow scrolls- looks like only two right now[ need to verify - are 'buy', 'buy anyword' and[ 'buy anyword anyword' the same? I think so but need to[ verify NO- they are not; neither are 'buy' and 'buy rol'[ confirm what happens if Jerrod tries to buy something[ when grocer is not at the register (I think it costs him[ a purchase even though he doesn't actually buy anything)[ strange - using paste, edit lines get formatting correctly[ set to no-bold/no-italic/normal-color; but when typing[ in-line, bold and italic appear to keep their current [ state and only color changes[ explanation of wordgroup 0 bug at end of said command[ help topic remarks section could use more detailed [ explanation (nobody types 'said(0)' but they might[ type 'said("a"); parser doesn't care if said command[ uses group 0 as a test[ does winagi compiler check for tests of ignored word?[ - if 'said("a") is encountered, user should be warned[ **************************************[ LOCAL DEFINES[ **************************************#define oGrocer                      o1#define tmpVar                     v220#define vGrocerPath                v221#define vGreeted                   v222#define fGrocerMoved               f220#define fSndDone                   f221#define fDoorPriority              f222[ **************************************[ FIRST CYCLE ONLY[ **************************************if (isset(newRoom))  {  [ load picture for current room  load.pic(currentRoom);    [ load views used in the room  load.view(vw.BigJerrodNY);  load.view(vw.BigGrocer);  load.view(vw.GroceryItems);    [ load sound used in the room  load.sound(s.AddToScore);  [ this sound is loaded, but never used  load.sound(s.UhOh);    [ draw the room pic, and add the store items  draw.pic(currentRoom);  add.to.pic(vw.GroceryItems, 0, 0, 81, 71, 7, 7);  add.to.pic(vw.GroceryItems, 0, 1, 92, 73, 7, 7);  add.to.pic(vw.GroceryItems, 0, 2, 103, 77, 7, 7);  add.to.pic(vw.GroceryItems, 0, 3, 114, 80, 8, 8);  add.to.pic(vw.GroceryItems, 0, 4, 124, 83, 8, 8);  add.to.pic(vw.GroceryItems, 0, 5, 134, 84, 8, 8);  add.to.pic(vw.GroceryItems, 1, 0, 52, 118, 12, 12);  add.to.pic(vw.GroceryItems, 1, 1, 8, 108, 12, 12);  add.to.pic(vw.GroceryItems, 1, 2, 40, 105, 12, 12);  add.to.pic(vw.GroceryItems, 1, 3, 30, 97, 5, 5);  add.to.pic(vw.GroceryItems, 2, 0, 81, 60, 5, 5);  add.to.pic(vw.GroceryItems, 2, 1, 115, 66, 5, 5);    [ the grocer  animate.obj(oGrocer);  [ use larger indoor view  set.view(oGrocer, vw.BigGrocer);  position(oGrocer, 1, 105);  ignore.blocks(oGrocer);  draw(oGrocer);  [ set initial path state to beginning  vGrocerPath = 1;    [ Jerrord uses larger indoor view  animate.obj(ego);  set.view(ego, vw.BigJerrodNY);  position(ego, 107, 135);  draw(ego);  [ large Jerrod takes bigger steps  tmpVar = 2;  step.size(ego, tmpVar);    [ now show the picture  show.pic();  }[ **************************************[ EVERY CYCLE[ **************************************[ when Jerrod is by the door and priority is not setif (posn(ego, 115, 121, 123, 125) && !isset(fDoorPriority))  {  [ adjust Jerrod's priority so he displays correctly   set(fDoorPriority);  set.priority(ego, 10);  }[ when Jerrod is away from the door and priority is setif (!posn(ego, 115, 121, 123, 125) && isset(fDoorPriority))  {  [ restore Jerrod's priority to auto  reset(fDoorPriority);  release.priority(ego);  }[ if grocer is at his starting pointif (vGrocerPath == 1)  {  [ grocer moves to first point on his way to the cash  [ register  vGrocerPath = 2;  move.obj(oGrocer, 30, 105, 2, fGrocerMoved);  }[ when grocer gets to first pointif (isset(fGrocerMoved) && vGrocerPath == 2)  {  [ grocer moves to second point  reset(fGrocerMoved);  vGrocerPath = 3;  move.obj(oGrocer, 49, 86, 2, fGrocerMoved);  }[ after reaching second pointif (isset(fGrocerMoved) && vGrocerPath == 3)  {  [ grocer moves to third point  reset(fGrocerMoved);  vGrocerPath = 4;  move.obj(oGrocer, 67, 86, 2, fGrocerMoved);  }  [ after reaching third pointif (isset(fGrocerMoved) && vGrocerPath == 4)  {  [ grocer moves to end point by cash register  reset(fGrocerMoved);  vGrocerPath = 5;  move.obj(oGrocer, 75, 90, 2, fGrocerMoved);  }  [ after reaching the cash registerif (isset(fGrocerMoved) && vGrocerPath == 5)  {  [ grocer is done moving  reset(fGrocerMoved);  vGrocerPath = 6;  [ turn grocer to face front  set.loop(oGrocer, 2);  [ force update to show new loop  force.update(oGrocer);  [ then stop updating grocer  stop.update(oGrocer);  }  [ if Jerrod is near the counter, hasn't been greeted yet and[ the grocer is at the cash registerif (posn(ego, 51, 97, 89, 115) &&     vGreeted == 0 &&     vGrocerPath == 6)  {  [ to prevent repeats while in same area, set talk-state to 1  vGreeted = 1;  print.at("\"Good day, sir. What can I do for you?\"", 2, 7, 26);  }  [ if Jerrod is NOT by the grocer, and grocer has greeted[ Jerrod (meaning Jerrod is walking away)if (!posn(ego, 51, 97, 89, 115) && vGreeted != 0)  {  [ change greeting status back to zero  vGreeted = 0;  [ if a print window is open, close it (this is unnecessary  [ because the leaveWindow flag is never set, so there is  [ never any print window open that needs closing)  close.window();  [ if Jerrod has bought at least one thing and the grocer  [ hasn't already asked about the gold rush  if (GroceryBuyCount > 0 && !isset(GrocerChat))    {    [ the grocer asks about the gold rush    set(GrocerChat);    print.at("\"Excuse me, sir.\"", 2, 7, 0);    print("You reply, \"Yes?\"");    print.at("The young man continues, \"I've heard rumors about gold in "             "California. I figured, since you work at the newspaper office, "             "you might know if they were true.\"", 2, 3, 0);    [ answer depends on whether or not the gold rush has    [ been made public    if (isset(RushIsPublic))      {      print("\"You better believe it!\" you exclaim. \"It's the ablsolute "            "truth! In California there is gold lying on the ground, just "            "waiting for someone to go over there and pick it up!!\"");      print.at("\"In that case, you are my last customer!\"", 2, 7, 0);      }    else      {      print("You answer to the best of your knowledge, \"At this time, the "            "rumors are just that, rumors.\"");      print.at("\"That's what I thought. But if they're true, and I hope they "               "are, I'd be on my way today!\"", 2, 5, 0);      }    }  }  [ **************************************[ CHECK FOR AN EXIT CONDITION[ **************************************[ if by the doorif (posn(ego, 123,  131, 123, 137))  {  [ go back outside  new.room(rm.Stores); [ ##LE001##  }  [ **************************************[ PROCESS PLAYER INPUT[ **************************************[ if player hasn't provided input no need to do said testsif (!isset(haveInput))  {  goto(Done);  }  [ look around/look items/look stuffif ((said("examine", "around") ||     said("examine", "goods") ||     said("examine", "item") ||     said("examine", "food") ||     said("examine", "shop") ||     said("examine", "shelf") ||     said("examine", "barrel") ||     said("examine", "bin") ||     said("examine")))  {  [ if Jerrod is near something worth looking at  if ((posn(ego, 75, 55, 91, 63) ||       posn(ego, 92, 55, 107, 67) ||       posn(ego, 108, 63, 125, 69) ||       posn(ego, 126, 63, 143, 73) ||       posn(ego, 75, 64, 91, 69) ||       posn(ego, 92, 68, 107, 73) ||       posn(ego, 108, 70, 117, 77) ||       posn(ego, 118, 70, 125, 73) ||       posn(ego, 118, 74, 143, 79) ||       posn(ego, 17, 89, 41, 102) ||       posn(ego, 17, 103, 35, 115) ||       posn(ego, 36, 107, 48, 121) ||       posn(ego, 49, 116, 77, 131)))    {    [ provide different response for each location    if ((posn(ego, 75, 55, 91, 63) ||         posn(ego, 92, 55, 107, 67)))      {      print("These bins are full of fruit.");      }    if ((posn(ego, 108, 63, 125, 69) ||         posn(ego, 126, 63, 143, 73)))      {      print("What a selection of vegetables!");      }    if ((posn(ego, 118, 70, 125, 73) ||         posn(ego, 118, 74, 143, 79)))      {      print("The last two barrels are full of beans.");      }    if (posn(ego, 108, 70, 117, 77))      {      print("This barrel is full of peas.");      }    if ((posn(ego, 92, 68, 107, 73) ||         posn(ego, 75, 64, 91, 69)))      {      print("There are three barrels full of various types of flour.");      }    if (posn(ego, 17, 89, 41, 102))      {      print("This is a dress form.");      }    if (posn(ego, 17, 103, 35, 115))      {      print("On the counter are rolls of ribbon.");      }    if (posn(ego, 36, 107, 48, 121))      {      print("There are rolls of ribbon on the counter.");      }    if (posn(ego, 49, 116, 77, 131))      {      print("There's a pattern book on the counter.");      }    }  else    {    [ generic message if Jerrod is not near anything in    [ particular    print("This is the best grocery store in town! There is a lot to look at, "          "so feel free to look around!");    }  }[ look fruitif (said("examine", "citrus fruit"))  {  if ((posn(ego, 75, 55, 91, 63) ||       posn(ego, 92, 55, 107, 67)))    {    print("The bins are full of oranges.");    }  else    {    print("You need to get closer!");    }  }[ look vegetablesif (said("examine", "vegetable"))  {  if ((posn(ego, 108, 63, 125, 69) ||       posn(ego, 126, 63, 143, 73)))    {    print("There is a wonderful selection of vegetables, and they are all so "          "fresh!!");    }  else    {    print("You need to get closer!");    }  }[ look beansif (said("examine", "bean"))  {  if ((posn(ego, 118, 70, 125, 73) ||       posn(ego, 118, 74, 143, 79)))    {    print("There are two barrels full of nutritious beans!");    }  else    {    print("You need to get closer!");    }  }[ look peasif (said("examine", "pea"))  {  if (posn(ego, 108, 70, 117, 77))    {    print("These peas sure would make a great split pea soup!");    }  else    {    print("You need to get closer!");    }  }[ look flourif (said("examine", "flour"))  {  if ((posn(ego, 92, 68, 107, 73) ||       posn(ego, 75, 64, 91, 69)))    {    print("People must use a lot of flour; there are three barrels full of "          "flour here!");    }  else    {    print("You need to get closer!");    }  }[ look dress formif ((said("examine", "dress", "form") ||     said("examine", "form")))  {  if (posn(ego, 17, 89, 41, 102))    {    print("The ladies in town use this dress form to size their dresses so they "          "fit just right!");    }  else    {    print("You need to get closer!");    }  }[ look dressif (said("examine", "dress"))  {  [ there is no dress on the form!  print("There is no dress in sight!");  }[ look ribbonif (said("examine", "ribbon"))  {  if ((posn(ego, 17, 103, 35, 115) ||       posn(ego, 36, 107, 48, 121)))    {    print("It looks like the manager of this department needs to order some "          "more ribbon! The supply seems to be dwindling!!");    }  else    {    print("You need to get closer!");    }  }[ look yardstick ('grass' == 'yard' and[                 'shovel handle == 'stick')if ((said("examine", "yardstick") ||     said("examine", "grass", "shovel handle") ||     said("examine", "ruler")))  {  if ((posn(ego, 36, 107, 48, 121) ||       posn(ego, 49, 116, 77, 131)))    {    print("This yardstick is used to measure the ribbon.");    }  else    {    print("You need to get closer!");    }  }  [ look pattern bookif ((said("examine", "pattern") ||     said("examine", "pattern", "book") ||     said("examine", "book")))  {  if (posn(ego, 49, 116, 77, 131))    {    print("You can find every style and fashion in this pattern book, but you "          "have no use for a pattern book.");    }  else    {    print("You need to get closer!");    }  }[ the programmers use a very unusual if-then structure[ in this room; the first 'said' test is for trying to[ buy a food; if that is not what player said, [ an 'else' statement is then used; in almost every [ other room, separate if-then statements are used for[ parsing player input; it's not clear why they did it[ differently here[ get food/buy foodif ((said("acquire", "food") || said("buy", "food")))  {  print("You need to be more specific. Look around and see what there is to "        "buy.");  }else  {  [ buy {anything}  if ((said("acquire", "anyword") ||       said("buy", "anyword") ||       said("acquire") ||       said("buy") ||       said("acquire", "anyword", "anyword") ||       said("buy", "anyword", "anyword")))    {    [ if the grocer hasn't greeted Jerrod yet    if (vGreeted == 0)      {      [ player needs to get close to grocer to start the      [ conversation      print("Tell the young man at the counter if you see something you want to "            "buy.");      [ if player typed an unknown word, clear it; it's not      [ important if player tried to buy something that the      [ game doesn't understand      unknownWordNum = 0;      }    else      {      [ reset the match flag to determine specifically what      [ it is that Jerrod wants to buy      reset(haveMatch);      [ if Jerrod wants to buy something on list of items      [ that are in the store       if ((said("acquire", "citrus fruit") ||           said("acquire", "vegetable") ||           said("acquire", "bean") ||           said("acquire", "pea") ||           said("acquire", "flour") ||           said("acquire", "dress", "form") ||           said("acquire", "form") ||           said("acquire", "ribbon") ||           said("acquire", "yardstick") ||           said("acquire", "grass", "shovel handle") ||           said("acquire", "ruler") ||           said("acquire", "pattern") ||           said("acquire", "book") ||           said("acquire", "pattern", "book") ||           said("buy", "citrus fruit") ||           said("buy", "vegetable") ||           said("buy", "bean") ||           said("buy", "pea") ||           said("buy", "flour") ||           said("buy", "dress", "form") ||           said("buy", "form") ||           said("buy", "ribbon") ||           said("buy", "yardstick") ||           said("buy", "grass", "shovel handle") ||           said("buy", "ruler") ||           said("buy", "pattern") ||           said("buy", "book") ||           said("buy", "pattern", "book")))        {        [ Jerrod is limited to three items purchased        if (GroceryBuyCount < 3)          {          [ increment number of items bought (in the          [ individual if blocks, the purchase will be          [ cancelled if Jerrod already has the item          ++GroceryBuyCount;                    [ reset 'haveMatch' flag so said command can be          [ checked one more time          reset(haveMatch);                    [ for each item that is in the store:          [  -- if grocer isn't in position yet, skip to end          [     (***this is a bug!!! if this happens, the          [     sale doesn't actually get canceled; Jerrod          [     gets tagged with a purchase even though he          [     doesn't actually buy anyting!***)          [          [  -- if the item was previously purchased, cancel          [     the sale;          [          [  -- if the item is not actually for sale (or in          [     wrong department), cancel the sale;          [          [  -- otherwise, buy the item and add it to          [     Jerrod's inventory                    [ citrus fruit          if ((said("acquire", "citrus fruit") ||               said("buy", "citrus fruit")))            {            [ if grocer is not at the cash registeer            if (vGrocerPath < 6)              {              print("Let the young man get behind the counter before you start "                    "ordering!");              goto(Done);              }            if (has("Citrus fruit"))              {              [ cancel the sale if Jerrod already has this item              --GroceryBuyCount;              print.at("\"You already have some of that.\"", 2, 7, 26);              }            else              {              print.at("\"Very well, sir. I see that your account has a "                       "positive balance, I'll put that on your account!\"", 2, 5, 0);              get("Citrus fruit");              [ if going via Cape Horn route, the citrus              [ fruit is required to survive the trip              if (TicketChoice == TKT_CAPE)                {                [ if not scored yet (this will always be                [ true, because it is not possible for                [ Jerrod to buy the fruit twice)                if (!isset(ScoreFruit))                  {                  set(ScoreFruit);                  [ score four points                  currentScore  += 4;                  [ plays score sound                  sound(s.AddToScore, fSndDone);                  }                }              }            }                      [ vegetables          if ((said("acquire", "vegetable") ||               said("buy", "vegetable")))            {            [ if grocer is not at the cash registeer            if (vGrocerPath < 6)              {              print("Let the young man get behind the counter before you start "                    "ordering!");              goto(Done);              }            if (has("Vegetables"))              {              [ cancel the sale if Jerrod already has this item              --GroceryBuyCount;              print.at("\"You already have some of that.\"", 2, 7, 26);              }            else              {              print.at("\"Very well, sir. I see that your account has a "                       "positive balance, I'll put that on your account!\"", 2, 7, 26);              get("Vegetables");              }            }                    [ beans          if ((said("acquire", "bean") ||               said("buy", "bean")))            {            [ if grocer is not at the cash registeer            if (vGrocerPath < 6)              {              print("Let the young man get behind the counter before you start "                    "ordering!");              goto(Done);              }            if (has("Beans"))              {              [ cancel the sale if Jerrod already has this item              --GroceryBuyCount;              print.at("\"You already have some of that.\"", 2, 7, 26);              }            else              {              print.at("\"Very well, sir. I see that your account has a "                       "positive balance, I'll put that on your account!\"", 2, 7, 26);              get("Beans");              }            }                    [ peas          if ((said("acquire", "pea") ||               said("buy", "pea")))            {            [ if grocer is not at the cash registeer            if (vGrocerPath < 6)              {              print("Let the young man get behind the counter before you start "                    "ordering!");              goto(Done);              }            if (has("Peas"))              {              [ cancel the sale if Jerrod already has this item              --GroceryBuyCount;              print.at("\"You already have some of that.\"", 2, 7, 26);              }            else              {              print.at("\"Very well, sir. I see that your account has a "                       "positive balance, I'll put that on your account!\"", 2, 7, 26);              get("Peas");              }            }                    [ flour          if ((said("acquire", "flour") ||               said("buy", "flour")))            {            [ if grocer is not at the cash registeer            if (vGrocerPath < 6)              {              print("Let the young man get behind the counter before you start "                    "ordering!");              goto(Done);              }            if (has("Flour"))              {              [ cancel the sale if Jerrod already has this item              --GroceryBuyCount;              print.at("\"You already have some of that.\"", 2, 7, 26);              }            else              {              print.at("\"Very well, sir. I see that your account has a "                       "positive balance, I'll put that on your account!\"", 2, 7, 26);              get("Flour");              }            }                    [ dress form          if ((said("acquire", "dress", "form") ||               said("acquire", "form") ||               said("buy", "dress", "form") ||               said("buy", "form")))            {            [ if grocer is not at the cash registeer            if (vGrocerPath < 6)              {              print("Let the young man get behind the counter before you start "                    "ordering!");              goto(Done);              }            [ cancel the sale if Jerrod already has this item            --GroceryBuyCount;            print.at("\"I'm sorry, sir. That is not my department.\"", 2, 7, 26);            }                      [ ribbon          if ((said("acquire", "ribbon") ||               said("buy", "ribbon")))            {            [ if grocer is not at the cash registeer            if (vGrocerPath < 6)              {              print("Let the young man get behind the counter before you start "                    "ordering!");              goto(Done);              }            [ cancel the sale; this item is not available            --GroceryBuyCount;            print.at("\"I'm sorry, sir. That is not my department.\"", 2, 7, 26);            }                    [ yard stick          if ((said("acquire", "yardstick") ||               said("acquire", "grass", "shovel handle") ||               said("acquire", "ruler") ||               said("buy", "yardstick") ||               said("buy", "grass", "shovel handle") ||               said("buy", "ruler")))            {            [ if grocer is not at the cash registeer            if (vGrocerPath < 6)              {              print("Let the young man get behind the counter before you start "                    "ordering!");              goto(Done);              }            [ cancel the sale; this item is not available            --GroceryBuyCount;            print.at("\"I'm sorry, sir. That is not my department.\"", 2, 7, 26);            }                    [ dress patterns          if ((said("acquire", "pattern") ||               said("acquire", "book") ||               said("acquire", "pattern", "book") ||               said("buy", "pattern") ||               said("buy", "book") ||               said("buy", "pattern", "book")))            {            [ if grocer is not at the cash registeer            if (vGrocerPath < 6)              {              print("Let the young man get behind the counter before you start "                    "ordering!");              goto(Done);              }            [ cancel the sale; this item is not available            --GroceryBuyCount;            print.at("\"I'm sorry, sir. That is not my department.\"", 2, 7, 26);            }          }        else          {          [ if already at purchase limit, first check if          [ grocer is at the cash register          if (vGrocerPath < 6)            {            print("Let the young man get behind the counter before you start "                  "ordering!");            goto(Done);            }                      [ otherwise, three things already purchased,          [ Jerrod can't buy any more - set haveMatch           [ (since said tests get skipped)          set(haveMatch);          print.at("\"Sorry sir. Your account is now even.\"", 2, 7, 26);          }        }      else        {        [ if the item Jerrod asked to buy is not in the        [ store, tell Jerrod it's not available        print.at("\"Sorry, sir. We don't have %w2.\"", 2, 7, 26);                [ reset input so no more said tests will respond        [ (this prevents generic response for un-processed        [ input)        reset(haveInput);                [ if the item being sought is not a known word,        [ clear the unknown word number; it's not important        [ what the word was        unknownWordNum = 0;        }      }    }      [ pay money/use money  if ((said("use", "bucks") ||       said("pay", "bucks") ||       said("pay", "boy") ||       said("pay")))    {    [ don't need to pay; Jerrod has an account here    print("You decide to save your cash, just in case you need it later.");    }      [ look man  if (said("examine", "boy"))    {    print("This young man is anxious to help you, but you can tell just by "          "looking at him, he'd rather be doing something else.");    }      [ speak man  if ((said("speak", "boy") || said("speak")))    {    [ if grocer hasn't gotten close enough to greet Jerrod    if (vGreeted == 0)      {      print("Just get close enough and he'll talk to you!");      }    else      {      print.at("\"Good day, sir. What can I do for you?\"", 2, 7, 26);      }    }    [ look candy/buy candy  if ((said("examine", "candy") ||       said("acquire", "candy") ||       said("buy", "candy")))    {    [ this store doesn't have any candy    print("Sorry! There is no candy!");    }      [ buy things/buy stuff (buy food doesn't need to be  [ included in this check; it's the first thing checked  [ at beginning of this giant 'if' block)  if ((said("acquire", "goods") ||       said("acquire", "articles") ||       said("acquire", "thing") ||       said("acquire", "stuff") ||       said("acquire", "food") ||       said("buy", "goods") ||       said("buy", "articles") ||       said("buy", "thing") ||       said("buy", "stuff") ||       said("buy", "food")))    {    print("You need to be more specific!");    }      [ give me food  if (said("contribute", "me", "food"))    {    print("Tell the young man at the counter what you want.");    }    [ look counter  if (said("examine", "counter"))    {    [ if Jerrod is near the sewing stuff    if ((posn(ego, 17, 103, 35, 115) ||         posn(ego, 36, 107, 48, 121) ||         posn(ego, 49, 116, 77, 131)))      {      print("On this counter is a pattern book, yardstick and ribbon. You have "            "no need for these kinds of things.");      }    else      {      print("The young man works behind the counter in the center of the store.");      }    }  [ look wall  if (said("examine", "wall"))    {    print("There is nothing unusual about these walls.");    }    [ look account/check account  if ((said("examine", "account") ||       said("read", "account") ||       said("account") ||       said("check", "account")))    {    [ actual account balance is not relevant    print("The young man will tell you when your account is even.");    }    [ be polite!  if ((said("thank", "you") ||       said("thank") ||       said("thank", "boy")))    {    print("You're welcome!");    }      [ look stairs/climb stairs  if ((said("examine", "stair") ||       said("climb", "stair")))    {    [ the stairs are not accessible    print("The stairs are for employees only!");    }  }  Done:return();[ **************************************[ MESSAGES[ **************************************#message 1 "You need to get closer!"#message 4 "There are two barrels full of nutritious beans!"#message 5 "This is the best grocery store in town! There is a lot to look at, so feel free to look around!"#message 6 "These bins are full of fruit."#message 7 "What a selection of vegetables!"#message 8 "The last two barrels are full of beans."#message 9 "This barrel is full of peas."#message 10 "These peas sure would make a great split pea soup!"#message 11 "There are three barrels full of various types of flour."#message 12 "This is a dress form."#message 13 "On the counter are rolls of ribbon."#message 14 "There are rolls of ribbon on the counter."#message 15 "There's a pattern book on the counter."#message 16 "People must use a lot of flour; there are three barrels full of flour here!"#message 17 "The ladies in town use this dress form to size their dresses so they fit just right!"#message 18 "It looks like the manager of this department needs to order some more ribbon! The supply seems to be dwindling!!"#message 19 "This yardstick is used to measure the ribbon."#message 20 "You can find every style and fashion in this pattern book, but you have no use for a pattern book."#message 21 "Tell the young man at the counter if you see something you want to buy."#message 22 "\"I'm sorry, sir. That is not my department.\""#message 23 "\"Sorry, sir. We don't have %w2.\""#message 24 "\"Sorry sir. Your account is now even.\""#message 25 "\"Good day, sir. What can I do for you?\""#message 26 "You decide to save your cash, just in case you need it later."#message 27 "This young man is anxious to help you, but you can tell just by looking at him, he'd rather be doing something else."#message 28 "Just get close enough and he'll talk to you!"#message 29 "You need to be more specific!"#message 30 "Let the young man get behind the counter before you start ordering!"#message 32 "\"You already have some of that.\""#message 33 "\"Very well, sir. I see that your account has a positive balance, I'll put that on your account!\""#message 34 "The bins are full of oranges."#message 35 "There is a wonderful selection of vegetables, and they are all so fresh!!"#message 41 "There is no dress in sight!"#message 42 "Sorry! There is no candy!"#message 43 "Tell the young man at the counter what you want."#message 44 "The young man works behind the counter in the center of the store."#message 46 "There is nothing unusual about these walls."#message 52 "The young man will tell you when your account is even."#message 56 "You're welcome!"#message 57 "The stairs are for employees only!"#message 58 "On this counter is a pattern book, yardstick and ribbon. You have no need for these kinds of things."#message 60 "\"Excuse me, sir.\""#message 61 "You reply, \"Yes?\""#message 62 "The young man continues, \"I've heard rumors about gold in California. I figured, since you work at the newspaper office, you might know if they were true.\""#message 63 "You answer to the best of your knowledge, \"At this time, the rumors are just that, rumors.\""#message 64 "\"That's what I thought. But if they're true, and I hope they are, I'd be on my way today!\""#message 65 "\"You better believe it!\" you exclaim. \"It's the ablsolute truth! In California there is gold lying on the ground, just waiting for someone to go over there and pick it up!!\""#message 66 "\"In that case, you are my last customer!\""#message 67 "You need to be more specific. Look around and see what there is to buy."