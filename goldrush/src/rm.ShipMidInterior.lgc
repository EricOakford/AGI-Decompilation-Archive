[***********************************************************[[ rm.ShipMidInterior[[ This room shows the midship interior spaces on the[ steamship which include the engine room, galley, and [ boiler room. Jerrod can blow up the ship in a couple[ different ways here if not careful. Also, this is [ where a couple key items are found that are needed to[ go fishing[[***********************************************************[ **************************************[ LOCAL DEFINES[ **************************************#define oPiston                      o1#define oCams                        o2#define oAftDoor                     o3#define oMidDoor                     o4#define oFwdDoor                     o5#define oWhistleSteam                o6#define oWhistlePull                 o7#define oPilotDoor                   o8#define oWorker1                     o9#define oWorker2                    o10#define oCart                       o11#define oHandle                     o12#define oFire                       o13#define oPig                        o14#define vIcebergTime                v81  [ override TripPoint_20#define vRockTime                   v82  [ override TripPoint_21#define vStarveStart               v180  [ override LeafPileSize#define vTmpStep                   v220#define vWhistleStatus             v221#define vWhistleTimer              v222#define vCoalStatus                v223#define vWorkerStatus              v224#define vCoalTimer                 v225[ v226 is not used#define vFireStatus                v227#define vFireCounter               v228#define vPigX                      v229#define vPigY                      v230#define vPigStep                   v231#define vRndNum                    v232#define vRockStatus                v233#define vRockSize                  v234#define vIcebergStatus             v235#define fOnLadder                  f220#define fPilotDoorClosed           f221#define fPilotDoorOpen             f222#define fCoalActionDone            f223#define fCoalDoorShut              f224#define fCoalDoorMoved             f225#define fPigMoved                  f226#define fDoneDying                 f227#define fCanSink                   f228#define fAteBadMeat                f229#define fSoundDone                 f230[ **************************************[ FIRST CYCLE ONLY[ **************************************if (isset(newRoom))  {  [ set the times for starving; if Jerrod doesn't deal with  [ food problem in time, he will starve at these times  vStarveStart = 5;  StarveDying = 6;    [ load, draw and discard current picture  load.pic(currentRoom);  draw.pic(currentRoom);  discard.pic(currentRoom);    [ load view with extra art  load.view(vw.ShipArt2);  [ add stove and table to picture  add.to.pic(vw.ShipArt2, 0, 0, 28, 106, 9, 9);  add.to.pic(vw.ShipArt2, 0, 1, 42, 106, 9, 9);    [ if before or during the storm (I think during storm is  [ not possible; if the storm is active, rm.ShipMidStorm  [ would be used instead of this room)  if ((CurrentTripTime < StormTime ||       CurrentTripTime == StormTime))    {    [ add shovel to picture    add.to.pic(vw.ShipArt2, 0, 2, 42, 156, 9, 9);    }      [ at trip point 2 (beginning of trip) or trip point 9  [ (after Cape Horn, heading north up South America coast)  if ((CurrentTripTime == 2 || CurrentTripTime == 9))    {    [ show cutouts of coal hold, full     add.to.pic(vw.ShipArt2, 6, 0, 31, 150, 7, 7);    add.to.pic(vw.ShipArt2, 6, 0, 53, 150, 7, 7);    }  [ at trip point 4 (just before reaching Rio de Janeiro) or  [ at trip point 11 (half way up Pacific coast)  if ((CurrentTripTime == 4 || CurrentTripTime == 11))    {    [ show cutouts of coal hold, half empty    add.to.pic(vw.ShipArt2, 6, 1, 31, 150, 7, 7);    add.to.pic(vw.ShipArt2, 6, 1, 53, 150, 7, 7);    }  [ at trip point 15 (last leg of journey, heading into  [ California)  if (CurrentTripTime == 15)    {    [ show cutouts of coal hold, mostly empty    add.to.pic(vw.ShipArt2, 6, 2, 31, 150, 7, 7);    add.to.pic(vw.ShipArt2, 6, 2, 53, 150, 7, 7);    }      [ add crew/passengers who don't move  add.to.pic(vw.ShipArt2, 1, 0, 109, 106, 9, 9);  add.to.pic(vw.ShipArt2, 2, 0, 45, 57, 7, 7);  add.to.pic(vw.ShipArt2, 3, 0, 32, 57, 7, 7);  add.to.pic(vw.ShipArt2, 4, 0, 36, 106, 14, 14);    [ done with extra art; discard the view  discard.view(vw.ShipArt2);    [ load main timing logic for Cape Horn trip  load.logics(lgc.CapeTripTiming);    [ if current trip point is NOT when the boiler will  [ explode  if (CurrentTripTime != BoilerTime)    {    [ view of Jerrod climbing is needed for these trip point    [ sequences    load.view(vw.ClimbingJerrodNY);    }      [ load all the other views needed in the room  load.view(vw.DyingJerrodNY);  load.view(vw.ShipMachineryArt);  load.view(vw.MidShipArt2);  load.view(vw.CoalRoomArt);  load.view(vw.Fire);  load.view(vw.Pig);  load.view(vw.JerrodBk2D);  load.view(vw.SickJerrodNY_2);    [ load sounds used in the room  load.sound(s.AddToScore);  load.sound(s.RockCrash);  load.sound(s.Whistle);    [ add lamps  add.to.pic(vw.MidShipArt2, 2, 0, 2, 82, 7, 7);  add.to.pic(vw.MidShipArt2, 2, 0, 45, 82, 7, 7);  add.to.pic(vw.MidShipArt2, 2, 0, 87, 82, 7, 7);    [ at trip point 2 (beginning of trip) or trip point 9  [ (after Cape Horn, heading north up South America coast)  if ((CurrentTripTime == 2 || CurrentTripTime == 9))    {    [ draw coal pile mostly full at left edge of the room    add.to.pic(vw.ShipMachineryArt, 5, 0, 0, 158, 10, 10);    }  [ at trip point 4 (just before reaching Rio de Janeiro) or  [ at trip point 11 (half way up Pacific coast) or at trip  [ point 15 (last leg of journey, heading into California)  if ((CurrentTripTime == 4 ||       CurrentTripTime == 11 ||       CurrentTripTime == 15))    {    [ draw coal pile about half full at left edge of the    [ room    add.to.pic(vw.ShipMachineryArt, 5, 1, 0, 158, 10, 10);    }      [ at trip point 2 (beginning of trip) or trip point 9  [ (after Cape Horn, heading north up South America coast)  if ((CurrentTripTime == 2 || CurrentTripTime == 9))    {    [ draw barrels in forward hold mostly full    add.to.pic(vw.ShipMachineryArt,  5, 2, 155, 158, 10, 10);    }  [ at trip point 4 (just before reaching Rio de Janeiro) or  [ at trip point 11 (half way up Pacific coast)  if ((CurrentTripTime == 4 || CurrentTripTime == 11))    {    [ show forward hold with fewer barrels    add.to.pic(vw.ShipMachineryArt, 5, 3, 155, 158, 10, 10);    }      [ if past the storm time point  if (CurrentTripTime > StormTime)    {    [ add the shovel handle (needed to go fishing)    animate.obj(oHandle);    set.view(oHandle, vw.CoalRoomArt);    set.loop(oHandle, 0);    set.cel(oHandle, 3);    set.priority(oHandle, 9);    position(oHandle, 42, 156);    ignore.objs(oHandle);    ignore.blocks(oHandle);    [ if handle hasn't been picked up yet    if (HandleStatus == 0)      {      [ draw it on screen      draw(oHandle);      stop.update(oHandle);      }    }      [ coal room fire (don't draw it yet)  animate.obj(oFire);  set.view(oFire, vw.Fire);  set.loop(oFire, 0);  set.priority(oFire, 7);  ignore.objs(oFire);  ignore.blocks(oFire);    [ coal cart  animate.obj(oCart);  set.view(oCart, vw.CoalRoomArt);  set.loop(oCart, 5);  set.cel(oCart, 0);  set.priority(oCart, 13);  position(oCart, 7, 156);  ignore.objs(oCart);  draw(oCart);  stop.cycling(oCart);    [ boiler worker #1  [ (he shovels coal from the hold to   [  the cart)  animate.obj(oWorker1);  set.view(oWorker1, vw.CoalRoomArt);  set.loop(oWorker1, 1);  set.cel(oWorker1, 0);  set.priority(oWorker1, 12);  position(oWorker1, 7, 156);  ignore.objs(oWorker1);  draw(oWorker1);  stop.cycling(oWorker1);    [ boiler worker #2  animate.obj(oWorker2);  set.view(oWorker2, vw.CoalRoomArt);  set.loop(oWorker2, 2);  set.cel(oWorker2, 0);  set.priority(oWorker2, 12);  position(oWorker2, 63, 156);  draw(oWorker2);  ignore.objs(oWorker2);  stop.update(oWorker2);    [ the main engine piston  animate.obj(oPiston);  set.view(oPiston, vw.ShipMachineryArt);  set.loop(oPiston, 0);  set.cel(oPiston, 0);  set.priority(oPiston, 14);  position(oPiston, 116, 92);  draw(oPiston);  start.cycling(oPiston);    [ engine cam rockers  animate.obj(oCams);  set.view(oCams, vw.ShipMachineryArt);  set.loop(oCams, 1);  set.cel(oCams, 0);  set.priority(oCams, 14);  position(oCams, 86, 96);  draw(oCams);  start.cycling(oCams);    [ aft coal hold door  animate.obj(oAftDoor);  set.view(oAftDoor, vw.ShipMachineryArt);  set.loop(oAftDoor, 2);  set.cel(oAftDoor, 0);  position(oAftDoor, 9, 150);  ignore.blocks(oAftDoor);  ignore.objs(oAftDoor);  draw(oAftDoor);  stop.cycling(oAftDoor);    [ mid coal hold door  animate.obj(oMidDoor);  set.view(oMidDoor, vw.ShipMachineryArt);  set.loop(oMidDoor, 3);  set.cel(oMidDoor, 0);  position(oMidDoor, 28, 152);  set.priority(oMidDoor, 8);  draw(oMidDoor);  stop.update(oMidDoor);    [ forward coal hold door  animate.obj(oFwdDoor);  set.view(oFwdDoor, vw.ShipMachineryArt);  set.loop(oFwdDoor, 3);  set.cel(oFwdDoor, 0);  position(oFwdDoor, 50, 152);  set.priority(oFwdDoor, 8);  draw(oFwdDoor);  stop.update(oFwdDoor);    [ pilot house door  animate.obj(oPilotDoor);  stop.cycling(oPilotDoor);  set.view(oPilotDoor, vw.MidShipArt2);  set.loop(oPilotDoor, 1);  set.cel(oPilotDoor, 0);  set.priority(oPilotDoor, 8);  ignore.objs(oPilotDoor);  ignore.blocks(oPilotDoor);  [ door starts closed  set(fPilotDoorClosed);  position(oPilotDoor, 17, 52);  draw(oPilotDoor);    [ steam whistle smoke (don't draw yet)  animate.obj(oWhistleSteam);  set.view(oWhistleSteam, vw.ShipMachineryArt);  set.loop(oWhistleSteam, 4);  set.priority(oWhistleSteam, 9);  ignore.horizon(oWhistleSteam);  position(oWhistleSteam, 100, 20);    [ whistle pull string  animate.obj(oWhistlePull);  set.view(oWhistlePull, vw.ShipMachineryArt);  set.loop(oWhistlePull, 6);  set.cel(oWhistlePull, 0);  set.priority(oWhistlePull, 9);  ignore.horizon(oWhistlePull);  position(oWhistlePull, 99, 41);  draw(oWhistlePull);  stop.update(oWhistlePull);    [ ship mascot - the pig  animate.obj(oPig);  [ if before the very last leg (going into California)  if (CurrentTripTime != 15)    {    [ the pig is alive! and running around    set.view(oPig, vw.Pig);    set.priority(oPig, 11);    ignore.objs(oPig);    vPigStep = 3;    vPigY = 57;    position(oPig, 99, 57);    set(fPigMoved);    }  else    {    [ ship ran out of food - so they cooked the pig, and    [ it's on the table  :-(    set.view(oPig, vw.CoalRoomArt);    set.loop(oPig, 7);    set.priority(oPig, 9);    position(oPig, 49, 91);    start.cycling(oPig);    }  draw(oPig);    [ Jerrod  animate.obj(ego);  [ if current time point is NOT one where Jerrod starts out  [ sick  if (CurrentTripTime != ScurvyTime &&       CurrentTripTime != CholeraTime &&       CurrentTripTime != TripPoint_15)    {    [ use the 2D view; Jerrod can only walk back and forth    set.view(ego, vw.JerrodBk2D);    }  else    {    [ assume Jerrod is sick    set.view(ego, vw.SickJerrodNY_2);    [ unless it's the last leg of journey (on the way into    [ California)    if (CurrentTripTime == TripPoint_15)      {      [ if Jerrod is NOT sick right now      if (!isset(SickAtSea))        {        [ restore the normal 2D view        set.view(ego, vw.JerrodBk2D);        }      }    }      [ since this is a 2D room, force priority to 10 and leave  [ it there  set.priority(ego, 10);    [ set Jerrod's position based on which room he came from    [ if NOT coming from another room on the ship  if (previousRoom != rm.ShipSternInterior &&       previousRoom != rm.ShipBowInterior &&       previousRoom != rm.ShipMidExterior)    {    [ start on top deck, to the left    position(ego, 22, 57);    }      [ if coming from pilot house (stern view)  if (posn(ego, 0, 50, 19, 58))    {    [ position Jerrod just past the door    position(ego, 20, 57);    [ with door open    reset(fPilotDoorClosed);    set(fPilotDoorOpen);    set.cel(oPilotDoor, 3);    }      [ if coming from stern, mid-deck  if (posn(ego, 0, 102, 5, 110))    {    position(ego, 20, 106);    }  [ if coming from stern, lower deck  if (posn(ego, 0, 150, 5, 160))    {    position(ego, 20, 156);    }  [ if coming from bow, on main deck  if (posn(ego, 150, 56, 159, 58))    {    position(ego, 135, 57);    }  [ if coming from bow, mid-deck  if (posn(ego, 150, 102, 159, 110))    {    position(ego, 135, 106);    }      [ during trip point 2 only (very first leg of journey that  [ takes place in this room) AND counter is at beginning  if (CurrentTripTime == TripPoint_2 &&       TripCycles == 0 &&       TripCycles2 == 0)    {    [ keep Jerrod right where he is (the exterior room    [ 'dissolves' into the interior view for trip point 2)    position.v(ego, EgoX, EgoY);    }  [ draw Jerrod on screen  draw(ego);    [ and now show the picture  show.pic();    [ if warning about food hasn't been made yet  if (CurrentTripTime == 15 && !isset(StarvationWarning))    {    [ warn player that starvation is coming    set(StarvationWarning);    print("Food is running out on board the ship. Everyone is suffering, one "          "man has already died.");    }  }  [ **************************************[ EVERY CYCLE[ **************************************[ the pig wanders back and forth... (if he's still alive)[ if moved, and left of point 70if (isset(fPigMoved) && vPigX < 70)  {  [ (resetting the flag is not necessary; the move.obj.v  [ command will automatically reset the target flag!)  reset(fPigMoved);  [ choose random ending position  random(100, 150, vPigX);  [ move pig  move.obj.v(oPig, vPigX, vPigY, vPigStep, fPigMoved);  [ to the right  set.loop(oPig, 0);  }[ if moved, and right of point 70if (isset(fPigMoved) && vPigX > 70)  {  [ (resetting the flag is not necessary; the move.obj.v  [ command will automatically reset the target flag!)  reset(fPigMoved);  [ choose random ending position  random(19, 60, vPigX);  [ move pig  move.obj.v(oPig, vPigX, vPigY, vPigStep, fPigMoved);  [ to the left  set.loop(oPig, 1);  }  [ during drip point 15 (last leg of journey, headed into[ California)if (CurrentTripTime == 15)  {  [ the coal refueling sequence will never run  vCoalStatus = 250;  }  [ if coal fueling status is ready for another cycleif (vCoalStatus != 250)  {  [ random chance the coal fueling animation will happen  random(210, 249, vCoalStatus);  [ one in 40 chance  if (vCoalStatus == 230)    {    [ set status to 250 so cycle won't run again until it's    [ over    vCoalStatus = 250;    [ open the aft door    end.of.loop(oAftDoor, fCoalActionDone);    start.cycling(oAftDoor);    [ worker is ready to shovel coal    vWorkerStatus = 1;    }  }  [ after door opens and worker is readyif (isset(fCoalActionDone) && vWorkerStatus == 1)  {  [ reset action flag  reset(fCoalActionDone);  [ increment timer  ++vCoalTimer;  [ reset worker to first cel   set.cel(oWorker1, 0);  [ begin shoveling coal  end.of.loop(oWorker1, fCoalActionDone);    [ as cycles continue, fill the cart  if (vCoalTimer == 5)    {    set.cel(oCart, 1);    }  if (vCoalTimer == 10)    {    set.cel(oCart, 2);    }      [ after 15 cycles,  if (vCoalTimer == 15)    {    [ cart is full; second worker is ready to shovel coal    [ into the boiler    vWorkerStatus = 2;    vCoalTimer = 0;    [ cart is completely full    set.cel(oCart, 3);    [ move cart to boiler    move.obj(oCart, 64, 156, 1, fCoalActionDone);    [ worker 1 stops cycling    stop.cycling(oWorker1);    [ now close the door    reverse.loop(oAftDoor, fCoalDoorShut);    }  }  [ after cart moves to boiler, and worker 2 is ready if (isset(fCoalActionDone) && vWorkerStatus == 2)  {  [ worker 2 begins shoveling coal from cart into the boiler  reset(fCoalActionDone);  vWorkerStatus = 3;  start.update(oWorker2);  end.of.loop(oWorker2, fCoalActionDone);  }  [ after worker 2 completes a shoveling actionif (isset(fCoalActionDone) && vWorkerStatus == 3)  {  reset(fCoalActionDone);  [ increment timer  ++vCoalTimer;  [ start another shoveling loop  set.cel(oWorker2, 0);  end.of.loop(oWorker2, fCoalActionDone);  [ as time goes on, reduce coal on cart  if (vCoalTimer == 5)    {    set.cel(oCart, 2);    }  if (vCoalTimer == 10)    {    set.cel(oCart, 1);    }      [ after 15 cycles, cart is empty  if (vCoalTimer == 15)    {    [ workers are done    vWorkerStatus = 4;    vCoalTimer = 0;    [ show cart empty    set.cel(oCart, 0);    [ move it back to coal hold    move.obj(oCart, 7, 156, 1, fCoalActionDone);    stop.update(oWorker2);    }  }  [ after work is done and cart moves backif (isset(fCoalActionDone) && vWorkerStatus == 4)  {  [ reset flags and status variables so another cycle can  [ randomly start again  reset(fCoalActionDone);  vWorkerStatus = 0;  ++vCoalStatus;  }  [ if Jerrod is going from deck into the pilot houseif (posn(ego, 14, 56, 16, 58) && isset(egoHitSpecial))  {  [ bump him up, and over a bit  TmpX = -2; [ 254;  TmpY = -5; [ 251;  reposition(ego, TmpX, TmpY);  }  [ if Jerrod is going from pilot house to the deckif (posn(ego, 12, 51, 16, 53) && isset(egoHitSpecial))  {  [ bump him down and over a bit  TmpX = 2;  TmpY = 5;  reposition(ego, TmpX, TmpY);  }  [ if Jerrod is on stairs coming from stern sectionif (posn(ego, 0, 93, 8, 108) && isset(egoHitSpecial))  {  [when going downstairs or to the right  if ((egoDir == DOWN_RIGHT || egoDir == RIGHT))    {    [ bump Jerrod down and to the right by one pixel    TmpX = 1;    TmpY = 1;    reposition(ego, TmpX, TmpY);    }  [ when going upstairs or to the left  if ((egoDir == UP_LEFT || egoDir == LEFT))    {    [ bump Jerrod up and to the left by one pixel    TmpX = -1; [ 255;    TmpY = -1; [ 255;    reposition(ego, TmpX, TmpY);    }  }  [ when Jerrod  is at top of ladderif (posn(ego, 12, 107, 14, 107))  {  [ bump position so the climbing view gets postioned  [ correctly  if (posn(ego, 12, 107, 12, 107))    {    TmpX = 0;    }  if (posn(ego, 13, 107, 13, 107))    {    TmpX = -1; [ 255;    }  if (posn(ego, 14, 107, 14, 107))    {    TmpX = -2; [ 254;    }  [ position Jerrod on the ladder, with climbing view  set(fOnLadder);  TmpY = 17;  set.view(ego, vw.ClimbingJerrodNY);  [ set and fix loop to show Jerrod climbing  set.loop(ego, 3);  fix.loop(ego);  [ set step time, and reposition the view  vTmpStep = 2;  step.size(ego, vTmpStep);  reposition(ego, TmpX, TmpY);  }  [ when Jerrod reaches bottom of ladder while climbingif (posn(ego, 12, 156, 12, 156) && isset(fOnLadder))  {  [ he gets off the ladder  reset(fOnLadder);  TmpX = 1;  TmpY = 0;  [ if Jerrod is NOT sick and it's not the last segment of  [ the journey  if (CurrentTripTime != ScurvyTime &&       CurrentTripTime != CholeraTime &&       CurrentTripTime != TripPoint_15)    {    [ use his normal view    set.view(ego, vw.JerrodBk2D);    }  else    {    [ assume Jerrod is sick    set.view(ego, vw.SickJerrodNY_2);    [ if on last segment of journey    if (CurrentTripTime == TripPoint_15)      {      [ if Jerrod isn't actually sick      if (!isset(SickAtSea))        {        [ restore normal view        set.view(ego, vw.JerrodBk2D);        }      }    }  [ allow loop to change based on direction  release.loop(ego);  [ restore normal step time and resposition the view  vTmpStep = 1;  step.size(ego, vTmpStep);  reposition(ego, TmpX, TmpY);  }[ if at bottom of ladder, and not yet climbing itif (posn(ego, 12, 155, 14, 155) && !isset(fOnLadder))  {  [ bump position so the climbing view gets positioned  [ correctly  if (posn(ego, 12, 155, 12, 155))    {    TmpX = 0;    }  if (posn(ego, 13, 155, 13, 155))    {    TmpX = -1; [ 255;    }  if (posn(ego, 14, 155, 14, 155))    {    TmpX = -2; [ 254;    }  [ Jerrod is now climbing the ladder  set(fOnLadder);  TmpY = -1; [ 255;  [ change to climbing view  set.view(ego, vw.ClimbingJerrodNY);  [ set and fix loop  set.loop(ego, 3);  fix.loop(ego);  [ adjust step time, and resposition the view  vTmpStep = 2;  step.size(ego, vTmpStep);  reposition(ego, TmpX, TmpY);  }  [ when Jerrod reaches top of ladder while climbingif (posn(ego, 12, 122, 12, 122) && isset(fOnLadder))  {  [ Jerrod gets off the ladder  reset(fOnLadder);  [ if not sick or on last leg of journey  if (CurrentTripTime != ScurvyTime &&       CurrentTripTime != CholeraTime &&       CurrentTripTime != TripPoint_15)    {    [ use normal view    set.view(ego, vw.JerrodBk2D);    }  else    {    [ assume Jerrod is sick    set.view(ego, vw.SickJerrodNY_2);    [ if on last leg of journey    if (CurrentTripTime == TripPoint_15)      {      [ if not actually sick      if (!isset(SickAtSea))        {        [ restore normal view        set.view(ego, vw.JerrodBk2D);        }      }    }  [ allow loop to change by direction  release.loop(ego);  [ restore step size  vTmpStep = 1;  step.size(ego, vTmpStep);  [ reposition the view  TmpX = 1;  TmpY = -16; [ 240;  reposition(ego, TmpX, TmpY);  }  [ if by the pilot house door while it is closedif (posn(ego, 9, 52, 20, 57) && (isset(fPilotDoorClosed)))  {  [ open the door  reset(fPilotDoorClosed);  end.of.loop(oPilotDoor, fPilotDoorOpen);  }  [ if NOT by the pilot house door and it's openif (!posn(ego, 9, 52, 20, 57) && (isset(fPilotDoorOpen)))  {  [ close it  reset(fPilotDoorOpen);  reverse.loop(oPilotDoor, fPilotDoorClosed);  }  [ if Jerrod pulled the steam whistle ropeif (vWhistleStatus == 1)  {  [ show the steam cloud coming from the whistle  draw(oWhistleSteam);  start.cycling(oWhistleSteam);  vWhistleStatus = 2;  sound(s.Whistle, fSoundDone);  }  [ after whistle plays first soundif (vWhistleStatus == 2)  {  [ increment the timer  ++vWhistleTimer;  [ if sound is done playing  if (isset(fSoundDone))    {    [ play it again    sound(s.Whistle, fSoundDone);    }  [ after 15 cycles  if (vWhistleTimer == 15)    {    [ reset whistle status and stop    [ sounding the whistle    vWhistleTimer = 0;    vWhistleStatus = 0;    [ reset the pull to its normal position    set.cel(oWhistlePull, 0);    force.update(oWhistlePull);    [ steam goes away    erase(oWhistleSteam);    reset(fSoundDone);    stop.sound();    }  }  [ when traveling along South America coast, headed north if ((CurrentTripTime == 9 || CurrentTripTime == 11))  {  [ if not currently encountering a rock  if (vRockStatus != 250)    {    [ random chance a rock appears    random(110, 249, vRockStatus);    [ one in 140 chance    if (vRockStatus == 230)      {      [ set status to show rock is here      vRockStatus = 250;      [ get a random rock size      random(0, 5, vRockSize);            [ two in six chance it's a large rock      if ((vRockSize == 0 || vRockSize == 1))        {        [ biggest rock crash - shake five times and DON'T        [ reset status to show another rock crash (in this        [ room, ship never sinks from hitting a rock)        sound(s.RockCrash, fSoundDone);        [ if monitor is anything EXCEPT VGA        if (monitorType != VGA)          {          [ shake screen five times          shake.screen(5);          }        }              [ three in six chance it's a medium sized rock      if ((vRockSize == 2 ||           vRockSize == 3 ||           vRockSize == 4))        {        sound(s.RockCrash, fSoundDone);        [ if monitor is anything EXCEPT VGA        if (monitorType != VGA)          {          [ shake screen three times          shake.screen(3);          }        [ increase status so randomizer can find another        [ rock        ++vRockStatus;        }      if (vRockSize == 5)        {        [ one is six chance rock just grazes ship        sound(s.RockCrash, fSoundDone);        if (monitorType != VGA)          {          [ shake screen once          shake.screen(1);          }        [ increase status so randomizer can find another        [ rock        ++vRockStatus;        }      }    }  }  [ if current trip point is time for sinking by a rockif (CurrentTripTime == vRockTime)  {  [ if ship is set to sink from hitting a rock (in this  [ room, ship will never sink due to hitting a rock; this  [ code fragment should have been removed)  if (isset(fCanSink))    {    [ reset the flag, set timer/status to begin sinking    reset(fCanSink);    vRockSize = 7;    }      [ if timer/status is set  if (vRockSize > 6)    {    [ increase the timer    ++vRockSize;    [ at cycle 26 (+19 cycles)    if (vRockSize == 26)      {      [ ship sinks      EgoHealthStatus = 27;      [ switch to sinking cutscene (in clear weather)      new.room(cs.SinkingShipClear); [ ##LE001##      }    }  }  [ when traveling along South America coast, headed north if ((CurrentTripTime == 9 || CurrentTripTime == 11))  {  [ if not currently encountering an iceberg  if (vIcebergStatus != 250)    {    [ random chance an iceberg appears    random(110, 249, vIcebergStatus);    [ one in 140 chance    if (vIcebergStatus == 230)      {      [ play crash sound       sound(s.RockCrash, fSoundDone);      [ if monitor type is anything EXCEPT VGA      if (monitorType != VGA)        {        [ shake screen three times        shake.screen(3);        }      [ increment status so another iceberg can possibly hit      [ later      ++vIcebergStatus;      [ increment number of times iceberg hits ship      ++IcebergCounter;            [ after four iceberg hits      if (IcebergCounter == 4)        {        [ set rock status so there will be no more rock hits        vRockStatus = 250;        }      else        {        [ it looks like at one point the programmers did        [ something if count was something other than four,        [ but removed it; this empty bracket should have        [ been removed too        }      }    }  }  [ if trip point is time for sinking by icebergif (CurrentTripTime == vIcebergTime)  {  [ is ship is set to sink from hitting iceberg (in this  [ room ship can't sink from iceberg hit; this fragment of  [ code never runs, and should have been removed  if (isset(fCanSink))    {    [ reset flag, and set timer/status to begin sinking    reset(fCanSink);    vRockSize = 7;    }  [ if timer is set  if (vRockSize > 6)    {    [ increment timer    ++vRockSize;    [ after 26 cycles    if (vRockSize == 26)      {      [ ship begins sinking      EgoHealthStatus = 28;      new.room(cs.SinkingShipClear); [ ##LE002##      }    }  }  [ if current trip point is when Jerrod gets scurvyif (CurrentTripTime == ScurvyTime)  {  [ if Jerrod is currently healthy  if (EgoHealthStatus == 0)    {    [ and he's now dying at sea    if (isset(DyingAtSea))      {      [ only begin dying sequence if he's NOT on stairs or      [ ladder (i.e. on deck with room to show him dying)      if ((EgoY == 57 || EgoY == 106 || EgoY == 156))        {        [ no more player control        program.control();        [ reset the dying flag        reset(DyingAtSea);        [ show view of ego falling down dead        set.view(ego, vw.DyingJerrodNY);        [ reset to first cel so we get the full loop        set.cel(ego, 0);        end.of.loop(ego, fDoneDying);        [ allow cycling while not moving        set(CycleAtRest);        }      }    [ after Jerrod finishes dying    if (isset(fDoneDying))      {      [ reset the flag      reset(fDoneDying);      [ stop updating      stop.update(ego);      [ finish the death by scurvy sequence      EgoHealthStatus = 20;      load.logics(lgc.DeathScurvy);      call(lgc.DeathScurvy);      }    }  }  [ if current trip point is when Jerrod gets choleraif (CurrentTripTime == CholeraTime)  {  [ if Jerrod is currently healthy  if (EgoHealthStatus == 0)    {    [ and he's now dying at sea    if (isset(DyingAtSea))      {      [ only begin dying sequence if he's NOT on stairs or      [ ladder (i.e. on deck with room to show him dying)      if ((EgoY == 57 || EgoY == 106 || EgoY == 156))        {        [ no more player control        program.control();        [ reset the dying flag        reset(DyingAtSea);        [ show view of ego falling down dead        set.view(ego, vw.DyingJerrodNY);        [ reset to first cel to get the full loop        set.cel(ego, 0);        end.of.loop(ego, fDoneDying);        [ allow cycling at rest        set(CycleAtRest);        }      }    [ after Jerrod finishes dying    if (isset(fDoneDying))      {      [ reset the flag      reset(fDoneDying);      [ stop updating      stop.update(ego);      [ finish the death by cholera sequence      EgoHealthStatus = 21;      load.logics(lgc.DeathCholera);      call(lgc.DeathCholera);      }    }  }  [ if the coal holds are on fire (door is hot)if (CoalFireTime > 0)  {  [ if Jerrod opens one of the doors  if (isset(fCoalDoorMoved))    {    [ leave them both in their current state    reset(fCoalDoorMoved);    stop.update(oMidDoor);    stop.update(oFwdDoor);    [ Jerrod is going to die- clear input line    clear.lines(24, 24, BLACK);    }  [ if fire has just begun  if (vFireStatus == 1)    {    [ increment timer    ++vFireCounter;    [ after 15 cycles    if (vFireCounter == 15)      {      [ reset counter, and fire progresses      vFireCounter = 0;      vFireStatus = 2;      }    }  [ after fire reaches stage 2  if (vFireStatus == 2)    {    [ go to next stage    vFireStatus = 3;    [ show fire with larger flames    set.loop(oFire, 1);    [ adjust position of flames    TmpX = -19; [ 237;    TmpY = 6;    reposition(oFire, TmpX, TmpY);    set.cel(oFire, 0);    start.cycling(oFire);    }  [ during fire stage 3  if (vFireStatus == 3)    {    [ increment counter    ++vFireCounter;    [ after four cycles    if (vFireCounter == 4)      {      [ remove Jerrod from screen      erase(ego);      }    [ after 12 cycles    if (vFireCounter == 12)      {      [ reset counter, go to next stage      vFireCounter = 0;      vFireStatus = 4;      }    }  [ after fire reaches stage 4  if (vFireStatus == 4)    {    [ increment counter    ++vFireCounter;    [ after 10 cycles    if (vFireCounter == 10)      {      [ Jerrod dies in a fiery explosion      EgoHealthStatus = 22;      [ switch to sinking ship cutscene      new.room(cs.SinkingShipClear); [ ##LE003##      }    }  }else  {  [ boiler is NOT overheating    [ if coal-hold door is now open  if (isset(fCoalDoorMoved))    {    [ reset the flag, and stop updating the doors    reset(fCoalDoorMoved);    stop.update(oMidDoor);    stop.update(oFwdDoor);    }  }[ if on last leg of journey, into Californiaif (CurrentTripTime == TripPoint_15)  {  [ if Jerrod is currently healthy  if (EgoHealthStatus == 0)    {    [ when trip cycle count reaches starve time and Jerrod    [ is currently NOT sick, and he hasn't eaten the ham    if (TripCycles2 == vStarveStart &&         TripCycles == 100 &&         !isset(SickAtSea) &&         !isset(AteHam))      {      [ Jerrod is going to die from starvation      print("All the supplies and food are running very low and you are feeling "            "weak to the point of death.");      [ he's sick      set(SickAtSea);      [ if not on ladder      if (!isset(fOnLadder))        {        [ show the sick view        set.view(ego, vw.SickJerrodNY_2);        }      }    [ if trip cycle count reaches point of death    if (TripCycles2 == StarveDying && TripCycles == 100)      {      [ if Jerrod is sick, and hasn't eaten rotten meat      if (isset(SickAtSea) && !isset(fAteBadMeat))        {        [ begin dying sequence        set(DyingAtSea);        }      [ if Jerrod is NOT sick and hasn't eaten rotten meat      if (!isset(SickAtSea) && !isset(fAteBadMeat))        {        [ he made it! continue journey        set(ContinueJourney);        }      }    [ if Jerrod is dying at sea    if (isset(DyingAtSea))      {      [ only show dying sequence if Jerrod is NOT on the      [ stairs or ladder      if ((EgoY == 57 || EgoY == 106 || EgoY == 156))        {        [ no more player control        program.control();        [ reset dying flag        reset(DyingAtSea);        [ set view to ego falling down dead        set.view(ego, vw.DyingJerrodNY);        [ make sure to start at first cel        set.cel(ego, 0);        [ show him dying        end.of.loop(ego, fDoneDying);        [ don't forget to allow cycling at rest        set(CycleAtRest);        }      }    [ after Jerrod finishes dying    if (isset(fDoneDying))      {      [ reset the flag      reset(fDoneDying);      [ stop updating Jerrod      stop.update(ego);      [ if Jerrod ate rotten meat      if (isset(fAteBadMeat))        {        [ he dies from poison        EgoHealthStatus = 25;        }      else        {        [ otherwise he just starves to death        EgoHealthStatus = 26;        }      [ load and run the starvation logic      load.logics(lgc.DeathStarvation);      call(lgc.DeathStarvation);      }    }  }  [ **************************************[ CHECK FOR AN EXIT CONDITION[ **************************************if (edgeEgoHit != NOT_HIT)  {  if (edgeEgoHit == LEFT_EDGE)    {    new.room(rm.ShipSternInterior); [ ##LE004##    }  if (edgeEgoHit == RIGHT_EDGE)    {    new.room(rm.ShipBowInterior); [ ##LE005##    }  }  [ **************************************[ PROCESS PLAYER INPUT[ **************************************[ if player hasn't provided input no need to do said testsif (!isset(haveInput))  {  goto(Done);  }  [ blow whistleif ((said("pull", "handle") ||     said("pull", "chain") ||     said("blow", "whistle")))  {  [ if near the whistle chain  if (posn(ego, 85, 57, 110, 106))    {    [ show the pull-chain in down position    set.cel(oWhistlePull, 1);    force.update(oWhistlePull);    [ set status to blow the whistle    vWhistleStatus = 1;    }  else    {    print("You can't do that from here.");    }  }[ feel doorif (said("feel", "door"))  {  [ if near the door  if (posn(ego, 7, 156, 60, 156))    {    [ has door begun heating up?    if (CoalFireTime > 0)      {      print("The door is very warm to the touch.");      }    else      {      print("The door is cool to the touch.");      }    }  else    {    print("There is no door close enough.");    }  }  [ open doorif (said("open", "door"))  {  [ if near a coal-hold door, or near the pilot house door  if ((posn(ego, 7, 156, 16, 156) ||       posn(ego, 28, 156, 37, 156) ||       posn(ego, 49, 156, 60, 156) ||       posn(ego, 0, 52, 50, 57)))    {    [ if near the aft coal-hold door    if (posn(ego, 7, 156, 16, 156))      {      [ Jerrod can't open that door; worker is in the way      print("The worker is in the way.");      }          [ if near the mid coal-hold door    if (posn(ego, 28, 156, 37, 156))      {      [ open it      start.update(oMidDoor);      end.of.loop(oMidDoor, fCoalDoorMoved);      [ if door is hot      if (CoalFireTime > 0)        {        [ warn Jerrod        print("As you open the coal hold door you notice the door is very warm, "              "nearly hot, to touch.");        [ force trip time to value that will allow fire        [ sequence to finish        CurrentTripTime = 99;        [ show the fire burning in the coal hold        position(oFire, 31, 150);        draw(oFire);        start.cycling(oFire);        [ advance status of fire        vFireStatus = 1;        }      }          [ if near the forward coal-hold door    if (posn(ego, 49, 156, 60, 156))      {      [ open it      start.update(oFwdDoor);      end.of.loop(oFwdDoor, fCoalDoorMoved);      [ if door is hot      if (CoalFireTime > 0)        {        [ warn Jerrod        print("As you open the coal hold door you notice the door is very warm, "              "nearly hot, to touch.");        [ force trip time to value that will allow        [ fire sequence to finish        CurrentTripTime = 99;        [ show the fire burning in the coal hold        position(oFire, 53, 150);        draw(oFire);        start.cycling(oFire);        [ advance fire status        vFireStatus = 1;        }      }          [ if near the pilot house door    if (posn(ego, 0, 52, 50, 57))      {      print("The door is not locked; walk right in.");      }    }  else    {    print("There is no door close enough.");    }  }  [ close doorif (said("close", "door"))  {  [ if near a coal-hold door  if ((posn(ego, 7, 156, 16, 156) ||       posn(ego, 28, 156, 37, 156) ||       posn(ego, 49, 156, 60, 156)))    {    [ if near aft coal-hold door    if (posn(ego, 7, 156, 16, 156))      {      print("The worker is in the way.");      }    [ if near mid coal-hold door    if (posn(ego, 28, 156, 37, 156))      {      [ close it      start.update(oMidDoor);      reverse.loop(oMidDoor, fCoalDoorMoved);      }    [ if near forward coal-hold door    if (posn(ego, 49, 156, 60, 156))      {      [ close it      start.update(oFwdDoor);      reverse.loop(oFwdDoor, fCoalDoorMoved);      }    }  else    {    [ if pilot house door is open (meaning Jerrod is    [ near it)    if (isset(fPilotDoorOpen))      {      print("Just walk away from it.");      }    else      {      print("There is no door close enough.");      }    }  }  [ look engine roomif (said("examine", "engine", "around"))  {  print("Located here are two engines and a man to operate them. The smoke "        "stack goes between the engines.");  }  [ look engineif (said("examine", "engine"))  {  [ if on mid-deck near engine  if (posn(ego, 83, 106, 159, 106))    {    [ if metal scraps haven't been picked up yet    if (MetalStatus == 0)      {      print("The engines are running like clock work. You notice some metal "            "scraps on the floor around the engines.");      }    else      {      print("These engines are running like clockwork.");      }    [ the engine man then talks to Jerrod    print("\"Excuse me, young man,\" the engine man interrupts, \"I see you "          "noticed my engines.\"");    print("\"These are a couple of beauties. They're nothing but pure power. "          "I'm mighty proud of these engines, I sure am!\"");    [ engineman then pulls the whistle chain    set.cel(oWhistlePull, 1);    force.update(oWhistlePull);    vWhistleStatus = 1;    }  else    {    print("You need to get closer.");    }  }  [ look relief valveif (said("examine", "pressure relief valve"))  {  [ if in mid-deck, near the engine  if (posn(ego, 83, 106, 159, 106))    {    [ if Jerrod hasn't broken the valve    if (!isset(BrokeValve1))      {      print("The valve is rarely used. It is rusty from the moist sea air. The "            "valve is in the open position.");      }    else      {      print("You see that the valve is now broken and in the closed position.");      }    }  else    {    print("You see no valve right here.");    }  }  [ look gaugeif ((said("examine", "gauge") || said("read", "gauge")))  {  [ if on mid-deck, near engine  if (posn(ego, 83, 106, 159, 106))    {    [ if current trip time matches boiler explosion time    if (CurrentTripTime == BoilerTime && CurrentTripTime < 20)      {      print("The reading on the gauge does not look good. It is buried in the "            "red zone!");      }    else      {      [ if Jerrod hasn't broken the valve      if (!isset(BrokeValve1))        {        print("The needle is right in the middle of the green.");        }      else        {        print("The needle is approaching the red area and continually rising!");        }      }    }  else    {    print("You see no guage right here.");    }  }  [ turn valve (BAD idea...)if ((said("rotate", "pressure relief valve") ||     said("move", "pressure relief valve") ||     said("feel", "pressure relief valve") ||     said("close", "pressure relief valve")))  {  [ if on mid deck, near engine  if (posn(ego, 83, 106, 159, 106))    {    [ if valve isn't broken    if (!isset(BrokeValve1))      {      [ it is now      print("As you attempt to move the valve, it moves to the closed position "            "and breaks off!");      print("You try to catch the valve handle but it falls onto the floor and "            "rolls out of sight!");      clear.lines(24, 24, BLACK);      set(BrokeValve1);      [ reset cycle counters to begin countdown to explosion      TripCycles = 21;      TripCycles2 = 0;      TripCycles3 = 0;      [ change current trip point to explosion time      if (CurrentTripTime == TripPoint_2)        {        TripPoint_2 = 21;        BoilerTime = 2;        CurrentTripTime = BoilerTime;        }      if (CurrentTripTime == TripPoint_4)        {        TripPoint_4 = 21;        BoilerTime = 4;        CurrentTripTime = BoilerTime;        }      if (CurrentTripTime == TripPoint_9)        {        TripPoint_9 = 21;        BoilerTime = 9;        CurrentTripTime = BoilerTime;        }      if (CurrentTripTime == TripPoint_11)        {        TripPoint_11 = 21;        BoilerTime = 11;        CurrentTripTime = BoilerTime;        }      if (CurrentTripTime == TripPoint_15)        {        TripPoint_15 = 21;        BoilerTime = 15;        CurrentTripTime = BoilerTime;        }      [ looks like a bug; a duplicate flag is set that does       [ exact same thing as BrokeValve1      set(BrokeValve2);      }    else      {      print("You see that the valve is now broken and in the closed position.");      }    }  else    {    print("You see no valve right here.");    }  }  [ look shovel/look shovel handleif ((said("examine", "shovel") ||     said("examine", "shovel", "handle") ||     said("examine", "handle") ||     said("examine", "shovel handle") ||     said("examine", "beam", "shovel handle")))  {  [ if past the storm  if (CurrentTripTime > StormTime)    {    [ if handle hasn't been taken yet    if (HandleStatus == 0)      {      [ if in boiler room, near the shovel handle      if (posn(ego, 25, 156, 57, 156))        {        print("During the storm, the shovel that used to rest here was broken. "              "All that is left is a wooden stick.");        }      else        {        print("You can't do that from here.");        }      }    [ if Jerrod already picked up the shovel, but it's now    [ gone    if (HandleStatus == 2)      {      print("It isn't here!");      }    }  else    {    [ before the storm - if near the shovel in the boiler    [ room    if (posn(ego, 25, 156, 57, 156))      {      print("This is the spare shovel used by these men to stoke the boiler.");      }    else      {      print("You can't do that from here.");      }    }  }  [ take shovel/take shovel handleif ((said("acquire", "shovel") ||     said("acquire", "shovel", "handle") ||     said("acquire", "handle") ||     said("acquire", "shovel handle") ||     said("acquire", "beam", "shovel handle")))  {  [ if after the storm  if (CurrentTripTime > StormTime)    {    [ if Jerrod already has the shovel handle    if (HandleStatus == 1)      {      print("You already have the wooden stick.");      }    [ if shovel handle hasn't been taken yet    if (HandleStatus == 0)      {      [ if Jerrod is near the shovel      if (posn(ego, 25, 156, 57, 156))        {        [ take it        print("The workers don't mind if you take the stick. After all, it's "              "just a useless old stick!");        [ score three points        currentScore  += 3;        sound(s.AddToScore, fSoundDone);        get("Wooden stick");        HandleStatus = 1;        erase(oHandle);        }      else        {        print("You can't do that from here.");        }      }    [ if shovel handle has been taken, but lost    if (HandleStatus == 2)      {      print("It isn't here!");      }    }  else    {    [ before the storm - if near the shovel    if (posn(ego, 25, 156, 57, 156))      {      [ Jerrod is not allowed to take the shovel      print("I wouldn't try taking that shovel. The workers might need to use "            "it.");      }    else      {      print("You can't do that from here.");      }    }  }  [ look aroundif ((said("examine", "around") ||     said("examine", "boat") ||     said("examine")))  {  [ response depends on Jerrod's current location    [ if on pilot house level  if (EgoY == 52)    {    print("You are on the bridge deck.");    }      [ if on main deck  if (EgoY == 57)    {    [ message is different depending on which leg of journey    if (CurrentTripTime == 15)      {      print("You are on the top deck of the ship. The young men are still "            "leaning against the railing, but the pig is missing.");      }    else      {      print("You are on the top deck of the ship. There are people and a pig "            "here with you.");      }    }      [ if on stairs coming from captain's deck  if (EgoY < 106 && EgoY > 90)    {    print("You are on the short staircase that connects the main deck with the "          "captain's deck.");    }      [ if on galley/engine room deck  if (EgoY == 106)    {    print("You are on the main deck of the ship. The galley and the engine room "          "are located here.");    }      [ if on ladder leading to boiler room  if (EgoY > 106 && EgoY < 156)    {    print("You are on the ladder that connects the main deck with the lower "          "deck.");    }      [ if in boiler room  if (EgoY == 156)    {    print("You are in the depths of the ship. This is the lower deck. You see "          "coal hold doors and the boiler.");    [ if past the storm    if (CurrentTripTime > StormTime)      {      [ is shovel handle still in room?      if (HandleStatus == 0)        {        print("There is a wooden stick resting against the wall.");        }      }    else      {      print("There is a shovel resting against the wall.");      }    }  }  [ look captain's deck/look bridge deckif ((said("examine", "bridge", "deck") ||     said("examine", "captain", "deck")))  {  print("You can't see much of that deck from here.");  }  [ look top deckif (said("examine", "top", "deck"))  {  print("The top deck is affectionately called the sun, rain, hail, snow, and "        "sleet deck!");  }  [ look galleyif (said("examine", "galley"))  {  print("There is a stove, table and benches.");  }  [ look metalif ((said("examine", "metal") ||     said("examine", "metal", "deck")))  {  [ if in engine room  if (posn(ego, 83, 106, 159, 106))    {    [ if scraps haven't been picked up yet    if (MetalStatus == 0)      {      print("A few metal scraps are lying on the floor around the engines.");      }    else      {      print("You see no metal scraps.");      }    }  else    {    print("There are no metal scraps right here.");    }  }  [ get metalif ((said("acquire", "metal") ||     said("acquire", "metal", "deck")))  {  [ if Jerrod already has the scraps  if (MetalStatus == 1)    {    print("You already have some metal scraps.");    }  else    {    [ if in engine room    if (posn(ego, 83, 106, 159, 106))      {      [ if scraps are still there      if (MetalStatus == 0)        {        [ get them        print("You scoop up the metal scraps, being careful not to cut your "              "hands, and put them in your pocket.");        [ score 3 points        currentScore  += 3;        sound(s.AddToScore, fSoundDone);        MetalStatus = 1;        get("Metal scraps");        }      else        {        print("You see no metal scraps.");        }      }    else      {      print("There are no metal scraps right here.");      }    }  }  [ get ham/bacon/pigif ((said("acquire", "bacon") ||     said("acquire", "meat") ||     said("acquire", "bacon", "meat") ||     said("catch", "bacon")))  {  [ if on last leg of journey  if (CurrentTripTime == 15)    {    [ if Jerrod already has the ham    if (isset(HasHam))      {      print("You already have a nice piece of that pig!");      }    else      {      [ if in galley      if (posn(ego, 43, 106, 58, 106))        {        [ take a piece        print("You grab yourself a nice slab of pig meat from the steaming pig.");        [ if not already scored        if (!isset(ScoreHam))          {          [ score three points          sound(s.AddToScore, fSoundDone);          set(ScoreHam);          currentScore  += 3;          }        set(HasHam);        get("Piece of ham");        }      else        {        print("You need to get closer.");        }      }    }  else    {    [ pig is still alive - don't eat him yet!    print("The young men tell you, \"Don't do that! We're going to have to eat "          "that pig later in the voyage.\"");    }  }  [ look ham/bacon/pigif ((said("examine", "bacon") ||     said("examine", "meat") ||     said("examine", "bacon", "meat")))  {  [ if on last leg of journey  if (CurrentTripTime == 15)    {    [ if Jerrod already has a piece of ham    if (isset(HasHam))      {      print("That piece of pork sure does look tasty!");      }    else      {      [ if in galley      if (posn(ego, 43, 106, 58, 106))        {        print("You see a poor little pig, which used to be the ship mascot, "              "steaming on the galley table.");        }      else        {        print("You need to get closer.");        }      }    }  else    {    print("For now the pig is the ship's mascot. Later it will be dinner.");    }  }  [ eat hamif ((said("eat", "bacon") ||     said("eat", "meat") ||     said("eat", "bacon", "meat")))  {  [ if on last leg of journey  if (CurrentTripTime == 15)    {    [ if Jerrod has the ham    if (isset(HasHam))      {      [ random chance it will be OK...      random(0, 9, vRndNum);      [ only one in ten chance      if (vRndNum == 0)        {        print("You eat the piece of ham you have been carrying around. It "              "really hits the spot!");        [ if not already eaten        if (!isset(AteHam))          {          [ eat it          set(AteHam);          [ if not scored          if (!isset(ScoreEatHam))            {            [ score three points            sound(s.AddToScore, fSoundDone);            currentScore  += 3;            }          }        [ hame is gone        drop("Piece of ham");        reset(HasHam);        [ if NOT on ladder        if (!isset(fOnLadder))          {          [ make sure normal view is selected          set.view(ego, vw.JerrodBk2D);          }        [ and Jerrod is no longer sick (if he was        [ previously)        reset(SickAtSea);        }      else        {        [ nine in ten chance it's bad meat...        print("As soon as you sink your teeth into this piece of meat, you "              "realize something terrible is about to happen.");        print("That pig had some type of disease that poisoned the meat. It "              "looks like your trip is over!");        [ set flag to begin dying sequence        set(DyingAtSea);        set(fAteBadMeat);        }      }    else      {      print("You don't have anything to eat!");      }    }  else    {    [ don't eat the pig while it's still alive!    print("The young men tell you, \"Don't do that! We're going to have to eat "          "that pig later in the voyage.\"");    }  }  [ go fishingif ((said("go", "fish") ||     said("go", "fishing") ||     said("fish") ||     said("acquire", "fish") ||     said("catch", "fish")))  {  print("That is a great idea, but this isn't the best place to do it!");  }  [ look tableif ((said("examine", "table") ||     said("examine", "galley", "table")))  {  [ if on mid deck  if (EgoY == 106)    {    [ if on last leg of journey    if (CurrentTripTime == 15)      {      [ the cooked pig is on the table      print("The pig that used to run freely, is now steaming on the table!");      }    else      {      print("At this moment, the table is bare.");      }    }  else    {    print("You need to get closer.");    }  }  [ look stoveif ((said("examine", "stove") ||     said("examine", "anyword", "stove") ||     said("examine", "stove", "anyword")))  {  [ if on mid deck  if (EgoY == 106)    {    print("The cook works miracles on that stove. He can make anything a meal!");    }  else    {    print("You need to get closer.");    }  }  [ look benchif (said("examine", "bench"))  {  [ if on mid deck  if (EgoY == 106)    {    print("There is a man sitting on the bench at the table.");    }  else    {    print("You need to get closer.");    }  }  [ climb ladderif ((said("go", "ladder") ||     said("go", "up", "ladder") ||     said("go", "down", "ladder") ||     said("use", "ladder") ||     said("climb", "ladder")))  {  [ it happens automatically by just moving to it  print("Go ahead and climb on!");  }  [ look riggingif ((said("examine", "rope") || said("examine", "rigging")))  {  print("The rigging on the Sea Farer isn't nearly as complicated as on some "        "clippers you've seen.");  }  [ look mastif (said("examine", "mast"))  {  print("The mast is very strong.");  }  [ look smokestackif ((said("examine", "smokestack") ||     said("examine", "smoke", "smokestack")))  {   [if on mid deck, in engineroom  if (posn(ego, 83, 106, 159, 106))    {    print("Attached to the smoke stack is a pressure relief valve and a "          "pressure gauge.");    }  else    {    [ if on top deck    if (EgoY < 58)      {      print("The whistle is attached to the smoke stack.");      }    else      {      print("You notice nothing unusual about the smoke stack right here.");      }    }  }  [ look whistleif ((said("examine", "whistle") ||     said("examine", "chain") ||     said("examine", "pull", "chain")))  {  [ if anywhere but boiler room  if (posn(ego, 0, 52, 159, 106))    {    print("The whistle is attached to the side of the smoke stack. The pull "          "chain reaches clear to the engine room.");    }  else    {    print("You can't do that from here.");    }  }  [ look paddle wheelif ((said("examine", "wheel") ||     said("examine", "paddle", "wheel") ||     said("examine", "paddle")))  {  print("The paddles propel the ship without the wind's aid.");  }  [ look ladderif (said("examine", "ladder"))  {  [ if on top deck  if (posn(ego, 0, 52, 159, 57))    {    print("You can't do that from here.");    }  else    {    print("No one gets to the boiler but by this ladder.");    }  }  [ look manif ((said("examine", "boy") ||     said("examine", "crew") ||     said("examine", "crewman") ||     said("examine", "crew", "boy") ||     said("examine", "worker") ||     said("examine", "cook") ||     said("examine", "engine", "boy") ||     said("examine", "anyword", "boy") ||     said("examine", "boy", "anyword")))  {  [ if near any of the people in the scene  if ((posn(ego, 7, 138, 130, 156) ||       posn(ego, 0, 52, 159, 57) ||       posn(ego, 0, 90, 49, 137) ||       posn(ego, 50, 106, 82, 106) ||       posn(ego, 83, 106, 159, 106)))    {    [ men in boiler room    if (posn(ego, 7, 138, 130, 156))      {      print("These men move when the captain bellows, \"Pour the coal on!\"");      }    [ men on top deck by rail    if (posn(ego, 0, 52, 159, 57))      {      print("On the top deck are two young men with big ideas of what they are "            "going to do when they get to California.");      }    [ cook in galley    if (posn(ego, 0, 90, 49, 106))      {      print("This is the ship cook. You can tell he loves good cooking!");      }    [ man at table    if (posn(ego, 50, 106, 82, 106))      {      print("The man at the table is a hard working man hoping to make things "            "better for the family he left behind.");      }    [ engine man    if (posn(ego, 83, 106, 159, 106))      {      print("The engine man is very proud of these engines. He keeps them as "            "shiny as the top of his head.");      }    }  else    {    print("You can't do that from here.");    }  }  [ look doorif (said("examine", "door"))  {  [ if by coal-hold doors, or by pilot house door  if ((posn(ego, 7, 138, 130, 156) || posn(ego, 0, 52, 159, 57)))    {    [ by pilot house door    if (posn(ego, 0, 52, 159, 57))      {      [ reset haveMatch so generic response will handle this      reset(haveMatch);      }    else      {      print("The coal lies behind these doors.");      }    }  else    {    print("You can't do that from here.");    }  }  [ look coal hold doorif ((said("examine", "coal", "hold", "door") ||     said("examine", "coal", "door")))  {  [ if in boiler room  if (posn(ego, 7, 138, 130, 156))    {    print("The coal lies behind these doors.");    }  else    {    print("You can't do that from here.");    }  }  [ look coalif (said("examine", "coal"))  {  [ if in boiler room  if (posn(ego, 7, 138, 130, 156))    {    print("Coal is the fuel used in the boiler.");    }  else    {    print("You can't do that from here.");    }  }  [ look boilerif (said("examine", "boiler"))  {  [ if in boiler room  if (posn(ego, 7, 138, 159, 156))    {    print("The boiler produces steam pressure which powers the engines above "          "you.");    }  else    {    print("You can't do that from here.");    }  }  [ talk to manif ((said("speak", "boy") ||     said("speak", "crew") ||     said("speak", "crewman") ||     said("speak", "crew", "boy") ||     said("speak", "worker") ||     said("speak") ||     said("speak", "cook") ||     said("speak", "engine", "boy") ||     said("speak", "boy", "anyword") ||     said("speak", "anyword", "boy")))  {  [ if near any of the people in the scene  if ((posn(ego, 7, 138, 130, 156) ||       posn(ego, 17, 57, 68, 57) ||       posn(ego, 15, 106, 49, 106) ||       posn(ego, 50, 106, 82, 106) ||       posn(ego, 83, 106, 159, 106)))    {    [ in boiler room    if (posn(ego, 7, 138, 130, 156))      {      print("Conversing with these men, you learn that they wish to put their "            "shovels to better use, IN THE GOLD FIELDS!");      }    [ top deck, men at the rail    if (posn(ego, 17, 57, 68, 57))      {      print("You ask these young men, \"What are you going to do when you get "            "to California?\"");      print("One of them says, \"I'm going straight to the town of Coloma. I've "            "heard there's gold a-plenty there!\"");      print("The other young man says, \"I'm with my partner. I'm heading "            "straight for Coloma.\"");      }    [ mid deck, in galley    if (posn(ego, 15, 106, 49, 106))      {      [ if on last leg      if (CurrentTripTime == 15)        {        [ cook explains pig situation        print("The cook says, \"The provisions are gone. All that is left is "              "the ship's mascot. It is now steaming on the table. There's only "              "one problem.\"");        print("\"I may have waited too long before preparing the pig. It may be "              "diseased. So far no one has had the nerve to try it.\"");        }      else        {        print("The cook says, \"We have plenty of provisions right now. If we "              "start to run low, then we'll invite the ship's mascot to "              "dinner!\"");        }      }    [ mid deck by table    if (posn(ego, 50, 106, 82, 106))      {      print("The man sitting at the table says, \"I'm heading for California to "            "make enough to buy a farm in Pennsylvania. Then I'm going home to "            "my wife and kids.\"");      }    [ mid deck, by engine    if (posn(ego, 83, 106, 159, 106))      {      print("The engine man dissertates, \"This baby has been outfitted with "            "the latest in high pressure steam engines. When the captain gives "            "the command `full steam ahead!', I give her everything she's got "            "and blow the whistle!\"");      [ engine man pulls whistle chain      set.cel(oWhistlePull, 1);      force.update(oWhistlePull);      vWhistleStatus = 1;      }    }  else    {    print("You can't do that from here.");    }  }  [ look deckif (said("examine", "deck"))  {  [ if in engine room  if (posn(ego, 83, 106, 159, 106))    {    [ if metal scraps haven't been picked up yet    if (MetalStatus == 0)      {      print("Considering all the work that goes on here, the area stays "            "surprisingly clean. There are a few metal scraps lying on the "            "floor.");      }    else      {      print("There's nothing important right here.");      }    }  else    {    print("There's nothing important right here.");    }  }  [ look main deckif (said("examine", "main", "deck"))  {  [ (this will print no matter where Jerrod is; they should  [ have used an 'if' statement to check for Jerrod's  [ position)  print("You are on the main deck of the ship. The galley and the engine room "        "are located here.");  }[ look lower deckif (said("examine", "lower", "deck"))  {  [ (this will print no matter where Jerrod is; they should  [ have used an 'if' statement to check for Jerrod's  [ position)  print("You are in the depths of the ship. This is the lower deck. You see "        "coal hold doors and the boiler.");  }  Done:[ call the main timing logiccall(lgc.CapeTripTiming);return();[ **************************************[ MESSAGES[ **************************************#message 1 "You can't do that from here."#message 2 "The engines are running like clock work. You notice some metal scraps on the floor around the engines."#message 3 "\"Excuse me, young man,\" the engine man interrupts, \"I see you noticed my engines.\""#message 4 "You ask these young men, \"What are you going to do when you get to California?\""#message 5 "One of them says, \"I'm going straight to the town of Coloma. I've heard there's gold a-plenty there!\""#message 7 "At this moment, the table is bare."#message 8 "The pig that used to run freely, is now steaming on the table!"#message 9 "The cook works miracles on that stove. He can make anything a meal!"#message 10 "You need to get closer."#message 11 "The other young man says, \"I'm with my partner. I'm heading straight for Coloma.\""#message 12 "The cook says, \"We have plenty of provisions right now. If we start to run low, then we'll invite the ship's mascot to dinner!\""#message 13 "\"These are a couple of beauties. They're nothing but pure power. I'm mighty proud of these engines, I sure am!\""#message 14 "The door is very warm to the touch."#message 15 "The door is cool to the touch."#message 16 "The worker is in the way."#message 17 "There is no door close enough."#message 18 "All the supplies and food are running very low and you are feeling weak to the point of death."#message 19 "The valve is rarely used. It is rusty from the moist sea air. The valve is in the open position."#message 20 "You see that the valve is now broken and in the closed position."#message 21 "You see no valve right here."#message 22 "You see no guage right here."#message 23 "The reading on the gauge does not look good. It is buried in the red zone!"#message 24 "The needle is right in the middle of the green."#message 25 "The needle is approaching the red area and continually rising!"#message 26 "As you attempt to move the valve, it moves to the closed position and breaks off!"#message 27 "You try to catch the valve handle but it falls onto the floor and rolls out of sight!"#message 28 "During the storm, the shovel that used to rest here was broken. All that is left is a wooden stick."#message 29 "You already have the wooden stick."#message 30 "It isn't here!"#message 31 "The cook says, \"The provisions are gone. All that is left is the ship's mascot. It is now steaming on the table. There's only one problem.\""#message 32 "This is the spare shovel used by these men to stoke the boiler."#message 33 "The workers don't mind if you take the stick. After all, it's just a useless old stick!"#message 34 "I wouldn't try taking that shovel. The workers might need to use it."#message 35 "You are on the bridge deck."#message 36 "You are on the top deck of the ship. There are people and a pig here with you."#message 38 "You are on the top deck of the ship. The young men are still leaning against the railing, but the pig is missing."#message 40 "You are on the short staircase that connects the main deck with the captain's deck."#message 43 "There is a stove, table and benches."#message 48 "Considering all the work that goes on here, the area stays surprisingly clean. There are a few metal scraps lying on the floor."#message 50 "You are on the ladder that connects the main deck with the lower deck."#message 51 "You are in the depths of the ship. This is the lower deck. You see coal hold doors and the boiler."#message 52 "A few metal scraps are lying on the floor around the engines."#message 53 "There are no metal scraps right here."#message 54 "You already have some metal scraps."#message 55 "You scoop up the metal scraps, being careful not to cut your hands, and put them in your pocket."#message 56 "\"I may have waited too long before preparing the pig. It may be diseased. So far no one has had the nerve to try it.\""#message 57 "The man sitting at the table says, \"I'm heading for California to make enough to buy a farm in Pennsylvania. Then I'm going home to my wife and kids.\""#message 59 "There is a shovel resting against the wall."#message 60 "There is a wooden stick resting against the wall."#message 62 "You notice nothing unusual about the smoke stack right here."#message 63 "You already have a nice piece of that pig!"#message 64 "You grab yourself a nice slab of pig meat from the steaming pig."#message 65 "The young men tell you, \"Don't do that! We're going to have to eat that pig later in the voyage.\""#message 66 "That piece of pork sure does look tasty!"#message 67 "You see a poor little pig, which used to be the ship mascot, steaming on the galley table."#message 68 "For now the pig is the ship's mascot. Later it will be dinner."#message 69 "You eat the piece of ham you have been carrying around. It really hits the spot!"#message 70 "As soon as you sink your teeth into this piece of meat, you realize something terrible is about to happen."#message 71 "That pig had some type of disease that poisoned the meat. It looks like your trip is over!"#message 72 "You don't have anything to eat!"#message 73 "The engine man dissertates, \"This baby has been outfitted with the latest in high pressure steam engines. When the captain gives the command `full steam ahead!', I give her everything she's got and blow the whistle!\""#message 76 "On the top deck are two young men with big ideas of what they are going to do when they get to California."#message 77 "That is a great idea, but this isn't the best place to do it!"#message 79 "This is the ship cook. You can tell he loves good cooking!"#message 83 "The man at the table is a hard working man hoping to make things better for the family he left behind."#message 87 "As you open the coal hold door you notice the door is very warm, nearly hot, to touch."#message 88 "The engine man is very proud of these engines. He keeps them as shiny as the top of his head."#message 89 "The whistle is attached to the smoke stack."#message 90 "Go ahead and climb on!"#message 91 "The rigging on the Sea Farer isn't nearly as complicated as on some clippers you've seen."#message 92 "The mast is very strong."#message 93 "Attached to the smoke stack is a pressure relief valve and a pressure gauge."#message 94 "The whistle is attached to the side of the smoke stack. The pull chain reaches clear to the engine room."#message 95 "The paddles propel the ship without the wind's aid."#message 96 "No one gets to the boiler but by this ladder."#message 97 "These men move when the captain bellows, \"Pour the coal on!\""#message 98 "The coal lies behind these doors."#message 102 "Coal is the fuel used in the boiler."#message 103 "The boiler produces steam pressure which powers the engines above you."#message 104 "Conversing with these men, you learn that they wish to put their shovels to better use, IN THE GOLD FIELDS!"#message 105 "The door is not locked; walk right in."#message 106 "Just walk away from it."#message 107 "There's nothing important right here."#message 109 "You can't see much of that deck from here."#message 110 "The top deck is affectionately called the sun, rain, hail, snow, and sleet deck!"#message 111 "You are on the main deck of the ship. The galley and the engine room are located here."#message 112 "There is a man sitting on the bench at the table."#message 113 "Located here are two engines and a man to operate them. The smoke stack goes between the engines."#message 114 "These engines are running like clockwork."#message 115 "You see no metal scraps."#message 116 "Food is running out on board the ship. Everyone is suffering, one man has already died."