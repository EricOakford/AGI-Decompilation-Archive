[***********************************************************[[ rm.Tunnel_4[[ This tunnel location connects Jake's cabin to rest of the[ tunnel complex.[ [***********************************************************[ **************************************[ LOCAL DEFINES[ **************************************#define oDark1                       o1#define oDark2                       o2#define oDark3                       o3#define oDark4                       o4#define oDark5                       o5#define oDark6                       o6#define oDark7                       o7#define vFlicker                   v220#define vTmpStep1                  v221#define vTmpStep2                  v222#define vDigTimer                  v223#define fDrawDark                  f220#define fLight1                    f221#define fLight2                    f222#define fLight3                    f223#define fLight4                    f224#define fLight5                    f225#define fLight6                    f226#define fLight7                    f227[ f228 through f237 are not used#define fClimbing                  f238#define fFalling                   f239[ **************************************[ FIRST CYCLE ONLY[ **************************************if (isset(newRoom))  {  [ load the tunnel logic, that handles all the common  [ tunnel functions  load.logics(lgc.Tunnels);    [ load picture for current room  load.pic(currentRoom);    [ load views needed by objects in the room  load.view(vw.WideJerrodCA);  load.view(vw.Darkness);  load.view(vw.TunnelClimbing);  load.view(vw.TunnelFalling);  [ draw the picture  draw.pic(currentRoom);    [ add the darkness panels - these black out areas of the  [ tunnel that are beyond the range of Jerrod's light  [ (don't draw them yet, lgc.DarkenTunnel will do that)  animate.obj(oDark1);  set.view(oDark1, vw.Darkness);  set.cel(oDark1, 3);  set.priority(oDark1, 15);  ignore.objs(oDark1);  ignore.blocks(oDark1);  position(oDark1, 63, 51);  [ darkness panel 2  animate.obj(oDark2);  set.view(oDark2, vw.Darkness);  set.cel(oDark2, 3);  set.priority(oDark2, 15);  ignore.objs(oDark2);  ignore.blocks(oDark2);  position(oDark2, 62, 71);  [ darkness panel 3  animate.obj(oDark3);  set.view(oDark3, vw.Darkness);  set.cel(oDark3, 3);  set.priority(oDark3, 15);  ignore.objs(oDark3);  ignore.blocks(oDark3);  position(oDark3, 62, 91);  [ darkness panel 4  animate.obj(oDark4);  set.view(oDark4, vw.Darkness);  set.cel(oDark4, 3);  set.priority(oDark4, 15);  ignore.objs(oDark4);  ignore.blocks(oDark4);  position(oDark4, 62, 111);  [ darkness panel 5  animate.obj(oDark5);  set.view(oDark5, vw.Darkness);  set.cel(oDark5, 3);  set.priority(oDark5, 15);  ignore.objs(oDark5);  ignore.blocks(oDark5);  position(oDark5, 62, 131);  [ darkness panel 6  animate.obj(oDark6);  set.view(oDark6, vw.Darkness);  set.cel(oDark6, 3);  set.priority(oDark6, 15);  ignore.objs(oDark6);  ignore.blocks(oDark6);  position(oDark6, 62, 151);  [ darkness panel 7  animate.obj(oDark7);  set.view(oDark7, vw.Darkness);  set.cel(oDark7, 3);  set.priority(oDark7, 15);  ignore.objs(oDark7);  ignore.blocks(oDark7);  position(oDark7, 62, 167);    [ Jerrod  animate.obj(ego);  [ in this room Jerrod can ONLY be climbing, so set the  [ flag here  set(fClimbing);  set.view(ego, vw.TunnelClimbing);  set.loop(ego, 0);  fix.loop(ego);  draw(ego);    [ the room starts out all darkened  call(lgc.DarkenTunnel);    [ now show the picture  show.pic();  }  [ **************************************[ EVERY CYCLE[ **************************************[ to simulate flickering of torch, use a random timer to[ redraw a black box over the area of tunnel that is[ darkened[ if flicker timer has counted downif (vFlicker == 0)  {  [ if Jerrod is stopped  if (egoDir == STOPPED)    {    [ if the redraw darkness flag is NOT set    if (!isset(fDrawDark))      {      [ draw a black box over the entire tunnel (when Jerrod      [ moves, the cleared areas will be uncovered)      clear.text.rect(5, 13, 21, 24, BLACK);      set(fDrawDark);      }    }  else    {    [ Jerrod is moving; clear the redraw darkness flag    reset(fDrawDark);    [ choose a random time between 2 and 4 cycles    random(2, 4, FlickerTime);    [ set flicker delay to the random vlaue    vFlicker = FlickerTime;    [ draw a black box over the entire tunnel    clear.text.rect(5, 13, 21, 24, BLACK);    }  }  [ decrement flicker counter--vFlicker;[ if Jerrod has a lit lantern or lit matchif ((isset(LanternLit) || isset(MatchLit)))  {  [ depending on position, remove the darkness panels so  [ Jerrod can see the area around him  if (posn(ego, 10, 31, 150, 100) && !isset(fLight1))    {    erase(oDark1);    set(fLight1);    }  if (posn(ego, 10, 51, 150, 120) && !isset(fLight2))    {    erase(oDark2);    set(fLight2);    }  if (posn(ego, 10, 71, 150, 140) && !isset(fLight3))    {    erase(oDark3);    set(fLight3);    }  if (posn(ego, 10, 91, 150, 160) && !isset(fLight4))    {    erase(oDark4);    set(fLight4);    }  if (posn(ego, 10, 111, 150, 167) && !isset(fLight5))    {    erase(oDark5);    set(fLight5);    }  if (posn(ego, 10, 131, 150, 167) && !isset(fLight6))    {    erase(oDark6);    set(fLight6);    }  if (posn(ego, 10, 147, 150, 167) && !isset(fLight7))    {    erase(oDark7);    set(fLight7);    }  }[ if Jerrod is NOT fallingif (!isset(fFalling))  {  [ adjust step size depending on direction  if (egoDir > UP && egoDir < DOWN)    {    vTmpStep1 = 1;    step.size(ego, vTmpStep1);    }  else    {    vTmpStep2 = 2;    step.size(ego, vTmpStep2);    }  }  [ if Jerrod goes too far to rightif (isset(egoHitSpecial) && !isset(fFalling))  {  [ he falls off the ladder!  set(fFalling);  set.view(ego, vw.TunnelFalling);  vTmpStep2 = 200;  vTmpStep1 = 10;  move.obj.v(ego, EgoX, vTmpStep2, vTmpStep1, DoneNoAction);  }  [ if falling, and on bottom edgeif (edgeEgoHit == BOTTOM_EDGE && isset(fFalling))  {  [ done falling; set flag so final death sequence can begin  reset(fFalling);  set(FellOffLadder);  }  [ **************************************[ CHECK FOR AN EXIT CONDITION[ **************************************[ if at top of ladder, going through the trapdoorif (posn(ego, 30, 59, 100, 60))  {  [ update all objects (not sure why they do this since the  [ new.room command comes next - I guess it's so there'a a  [ split second before the room change with the room  [ updated)  force.update(ego);  [ adjust Jerrod's loop, direction and position for the new  [ room  set.loop(ego, 2);  egoDir = STOPPED;  position(ego, 90, 114);    [ if Jerrod is carrying the pick  if (has("Pick"))    {    [ drop it    print.at("The pick won't fit through the small trap door. It falls down the "             "shaft.", 2, 26, 10);    drop("Pick");    PickStatus = 2;    }      [ if lantern is lit  if (isset(LanternLit))    {    reset(LanternLit);    print.at("Ya blow out the lantern as ya leave the mine.", 2, 26, 10);    }      [ if match is lit  if (isset(MatchLit))    {    reset(MatchLit);    print.at("Ya blow out the match as ya leave the mine.", 2, 26, 10);    }  [ Jerrod enters the cabin  new.room(rm.CabinInterior); [ ##LE001##  }  [ if at the bottom and NOT fallingif (posn(ego, 30, 165, 100, 166) && !isset(fFalling))  {  [ update all objects (not sure why they do this since the  [ new.room command comes next - I guess it's so there'a a  [ split second before the room change with the room  [ updated)  force.update(ego);  [ adjust Jerrod's position for the new room  position(ego, 59, 61);  new.room(rm.Tunnel_3); [ ##LE002##  }[ **************************************[ PROCESS PLAYER INPUT[ **************************************[ if player hasn't provided input no need to do said testsif (!isset(haveInput))  {  goto(Done);  }  [ look wall/lookif ((said("examine", "wall") ||     said("examine", "mine") ||     said("examine", "cave") ||     said("examine", "around") ||     said("examine")))  {  [ if Jerrod had a lit lantern or lit match  if ((isset(LanternLit) || isset(MatchLit)))    {    [ if close to the trap door    if (posn(ego, 20, 20, 140, 95))      {      print.at("Ya see a door above you.", 2, 6, 10);      }    else      {      print.at("The light is very dim, but ya see the door to the cabin above "               "you.", 2, 26, 10);      }    }  else    {    print.at("It's too dern dark in here to see!", 2, 26, 10);    }  }  [ look doorif ((said("examine", "door") ||     said("examine", "trapdoor") ||     said("examine", "trap", "door")))  {  [ if Jerrod had a lit lantern or lit match  if ((isset(LanternLit) || isset(MatchLit)))    {    print.at("This must be the door to James' cabin!", 2, 6, 10);    }  else    {    print.at("It's too dern dark in here to see!", 2, 26, 10);    }  }  [ open/look trapdoorif ((said("open", "door") ||     said("examine", "trapdoor") ||     said("examine", "trap", "door")))  {  print.at("Get closer.", 2, 5, 0);  }  [ look goldif ((said("examine", "gold") ||     said("examine", "gold", "nugget") ||     said("examine", "nugget")))  {  print.at("There's no GOLD in sight right here.", 2, 26, 10);  }  [ get goldif ((said("acquire", "gold") ||     said("acquire", "gold", "nugget") ||     said("acquire", "nugget")))  {  print.at("There's no GOLD in sight right here.", 2, 26, 10);  }  [ use pickif ((said("pick") ||     said("pick", "gold") ||     said("use", "pick") ||     said("swing", "pick")))  {  [ if Jerrod has the pick  if (has("Pick"))    {    [ if climbing or falling    if ((isset(fClimbing) || isset(fFalling)))      {      if (isset(fClimbing))        {        print.at("Ya can't do that while yer climbin'!", 2, 26, 10);        }      if (isset(fFalling))        {        print.at("That's impossible right now!", 2, 26, 10);        }      }    else      {      [ (in this room, there are no places where Jerrod can      [ dig for gold; the programmers used this code in      [ every room by default)      if (isset(egoHitSpecial))        {        set.view(ego, vw.TunnelDigging);        vDigTimer = 1;        stop.motion(ego);        set(CycleAtRest);        start.cycling(ego);        }      else        {        print.at("You're close to a likely spot. Try that nearby.", 2, 26, 10);        }      }    }  else    {    print.at("Ya don't have a pick.", 2, 26, 10);    }  }[ look ladderif (said("examine", "ladder"))  {  if ((isset(LanternLit) || isset(MatchLit)))    {    print.at("It's just a wooden ladder!", 2, 26, 10);    }  else    {    print.at("It's too dern dark in here to see!", 2, 26, 10);    }  }  Done:[ call the logic that has code common to all tunnel roomscall(lgc.Tunnels);return();[ **************************************[ MESSAGES[ **************************************#message 1 "Ya scan the walls for gold."#message 13 "Ya can't do that while yer climbin'!"#message 14 "You're close to a likely spot. Try that nearby."#message 15 "Ya don't have a pick."#message 16 "That's impossible right now!"#message 17 "It's too dern dark in here to see!"#message 20 "Nothin'!"#message 24 "Ya blow out the lantern as ya leave the mine."#message 25 "Ya blow out the match as ya leave the mine."#message 26 "Ya see a door above you."#message 27 "This must be the door to James' cabin!"#message 28 "The light is very dim, but ya see the door to the cabin above you."#message 29 "Get closer."#message 47 "There's no GOLD in sight right here."#message 81 "It's just a wooden ladder!"#message 89 "The pick won't fit through the small trap door. It falls down the shaft."