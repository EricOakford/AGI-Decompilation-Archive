[***********************************************************[[ cs.LowerPlatte[[ This logic manages the wagon trip cutscenes as Jerrod [ travels from Independence to Fort Kearny in central [ Nebraska. [[***********************************************************[ **************************************[ LOCAL DEFINES[ **************************************#define oCursor                      o1#define oMapExpander                 o2#define oSceneWindow                 o3#define oWagon                       o4#define oTracks                      o5#define oRaft                        o6#define oTinyJ                       o7#define oWaterBlock                  o8#define vCholeraTime2               v79 [ override ScurvyTime#define vMudTime                    v85 [ override CholeraTime[ no idea why they didn't just leave CholeraTime untouched[ and assign vMudTime to v79#define vWinterStormTime            v86 [ override CoalFireTime#define vStolenMuleTime             v87 [ override BoilerTime#define vMapPic                    v220#define vOvlPic                    v221#define vMapStage                  v222#define vMapTimer                  v223#define vCursorStatus              v224#define vFallStatus                v225#define vTmpVal                    v226#define vTmpY                      v227#define vFlashTimer                v228#define vSceneStage                v229#define vSceneTimer                v230#define vCurStepTime               v231#define vCurStepTime2              v232#define vTmpTime                   v233#define vSlowTime                  v234[ v235 is not used#define vMudStage                  v236#define vTimeStatus                v237#define vMsgStatus                 v238#define vRndNum                    v239#define fCursorMoved               f220#define fFlashOn                   f221#define fSceneClosed               f222#define fTJMoved                   f223#define fEgoMoved                  f224#define fWagonStuck                f225[ **************************************[ FIRST CYCLE ONLY[ **************************************if (isset(newRoom))  {  [ pictures used in this scene are the main map of USA and  [ Missouri detail map  vMapPic = map.USA;  vOvlPic = map.LowerPlatteSm;    [ not sure why they used two variables set to same value  [ for cursor time, but  [ that's what they did  vCurStepTime = 1;  vCurStepTime2 = 1;  [ these variables are used for setting step times for  [ slower objects  vTmpTime = 10;  vSlowTime = 10;  [ this variable never gets used  v235 = 4;    [ load, draw and discard main map of USA  load.pic(vMapPic);  draw.pic(vMapPic);  discard.pic(vMapPic);    [ load main timing logic  load.logics(lgc.WagonTripTiming);    [ load views needed in this cutscene  load.view(vw.TinyJerrod);  load.view(vw.SickJerrodCA);  load.view(vw.DyingJerrodCA);  load.view(vw.CapeRouteArt);  load.view(vw.MapTracks);  load.view(vw.MapArt);  load.view(vw.MissouriMap);    [ current room value is the large Missouri picture  load.pic(currentRoom);  [ load the small Missouri picture too  load.pic(vOvlPic);    [ begin with first stage of the map expansion  vMapStage = 1;    [ add blocks so track from Brooklyn to Independence shows  [ complete  add.to.pic(vw.MapTracks, 5, 0, 131, 53, 5, 5);  add.to.pic(vw.MapTracks, 5, 0, 120, 54, 5, 5);  add.to.pic(vw.MapTracks, 5, 0, 109, 57, 5, 5);  add.to.pic(vw.MapTracks, 5, 0, 109, 45, 5, 5);  add.to.pic(vw.MapTracks, 5, 0, 105, 43, 5, 5);  add.to.pic(vw.MapTracks, 5, 0, 103, 55, 5, 5);  add.to.pic(vw.MapTracks, 5, 0, 98, 67, 5, 5);  add.to.pic(vw.MapTracks, 5, 0, 96, 79, 5, 5);  add.to.pic(vw.MapTracks, 5, 0, 89, 91, 5, 5);  add.to.pic(vw.MapTracks, 5, 0, 86, 92, 5, 5);    [ animate the cursor  animate.obj(oCursor);  set.view(oCursor, vw.MapTracks);  set.loop(oCursor, 4);  fix.loop(oCursor);  position(oCursor, 145, 132);  set.priority(oCursor, 7);  ignore.horizon(oCursor);  ignore.objs(oCursor);  step.time(oCursor, vCurStepTime);    [ map expander; starts as a flashing cursor box, and then  [ expands until the full Missouri map is finally ready to  [ be displayed  animate.obj(oMapExpander);  [ begin as a single red rectangle the same size/shape as  [ the map when it will first start expanding  set.view(oMapExpander, vw.MapTracks);  set.loop(oMapExpander, 2);  set.cel(oMapExpander, 0);  fix.loop(oMapExpander);  position(oMapExpander, 73, 86);  set.priority(oMapExpander, 9);  ignore.horizon(oMapExpander);  ignore.objs(oMapExpander);  stop.cycling(oMapExpander);    [ scenery window  animate.obj(oSceneWindow);  set.view(oSceneWindow, vw.MapArt);  set.loop(oSceneWindow, 0);  set.cel(oSceneWindow, 0);  set.priority(oSceneWindow, 9);  position(oSceneWindow, 6, 161);    [ scenery detail  animate.obj(oWagon);  set.view(oWagon, vw.MapArt);  set.loop(oWagon, 1);  set.priority(oWagon, 11);  position(oWagon, 12, 148);    [ animate the tracks that the horses make as they move  [ across the scenery window  animate.obj(oTracks);    [ animate wagon getting on/off raft  animate.obj(oRaft);  set.view(oRaft, vw.MapArt);  set.loop(oRaft, 4);    [ ego object used to show Jerrod dying of cholera  animate.obj(ego);    [ tiny Jerrod used when Jerrod falls out of wagon into the  [ river  animate.obj(oTinyJ);  set.view(oTinyJ, vw.TinyJerrod);  ignore.blocks(oTinyJ);  ignore.objs(oTinyJ);    [ a patch of water used to show tiny Jerrod sinking below  [ the surface  animate.obj(oWaterBlock);  set.view(oWaterBlock, vw.CapeRouteArt);  set.loop(oWaterBlock, 0);  set.cel(oWaterBlock, 0);  position(oWaterBlock, 30, 157);  [ priority of water is just behind the raft, but above  [ tiny Jerrod when he goes overboard  set.priority(oWaterBlock, 11);  ignore.objs(oWaterBlock);  ignore.blocks(oWaterBlock);    [ now show the picture  show.pic();  }  [ **************************************[ EVERY CYCLE[ **************************************[ if in first map stageif (vMapStage == 1)  {  [ increment main scene timer  ++vMapTimer;    [ flash timer controls speed that the red box flashes  [ between on and off  ++vFlashTimer;    [ create flashing red box by drawing/erasing the box every  [ four cycles (why not just use a view, with cycle time of  [ 4???)  if (vFlashTimer == 4)    {    [ reset the counter    vFlashTimer = 0;    [ toggle state of the frame    toggle(fFlashOn);    if (isset(fFlashOn))      {      draw(oMapExpander);      }    else      {      erase(oMapExpander);      }    }      [ after 80 cycles  if (vMapTimer == 80)    {    [ reset timer    vMapTimer = 0;    [ advance to stage 2    vMapStage = 2;    [ change expander object to the first cel showing    [ smallest image of the Missouri map    set.priority(oMapExpander, 9);    set.view(oMapExpander, vw.MissouriMap);    set.loop(oMapExpander, 0);    fix.loop(oMapExpander);    set.cel(oMapExpander, 0);    position(oMapExpander, 55, 107);    [ show it on the screen    draw(oMapExpander);    }  }  [ if in map stage 2if (vMapStage == 2)  {  [ increment timer  ++vMapTimer;  [ after 15 cycles  if (vMapTimer == 15)    {    [ reset timer    vMapTimer = 0;    [ advance to stage 3    vMapStage = 3;    [ show next cel in expanding map sequence    set.cel(oMapExpander, 1);    }  }  [ if in map stage 3if (vMapStage == 3)  {  [ increment timer  ++vMapTimer;  [ after 15 cycles  if (vMapTimer == 15)    {    [ reset timer    vMapTimer = 0;    [ advance to next stage    vMapStage = 4;    [ show largest cel in expanding map    set.cel(oMapExpander, 2);    }  }  [ if in map stage 4if (vMapStage == 4)  {  [ increment timer  ++vMapTimer;  [ after five cycles  if (vMapTimer == 5)    {    [ reset timer    vMapTimer = 0;    [ advance to next stage    vMapStage = 5;    [ add the small Missouri map overlay to the picture    overlay.pic(vOvlPic);    [ then discard the overlay    discard.pic(vOvlPic);    [ and remove the expanding map object    erase(oMapExpander);    [ force picture to update to show the overlay    show.pic();    }  }  [if in map stage 5if (vMapStage == 5)  {  [ increment timer  ++vMapTimer;  [ after five cycles  if (vMapTimer == 5)    {    [ reset timer    vMapTimer = 0;    [ all done; set stage to next value    vMapStage = 6;    [ use the large Missouri map for rest of activity in    [ this room    draw.pic(currentRoom);    discard.pic(currentRoom);    show.pic();        [ now draw the cursor    draw(oCursor);    [ and begin moving it    move.obj(oCursor, 145, 138, 1, fCursorMoved);    vCursorStatus = 1;    [ main scene sequence begins    vSceneStage = 100;    }  }  [ when scene sequence begins (not sure why 100 used as[ start)if (vSceneStage == 100)  {  [ increment timer  ++vSceneTimer;  [ after one cycle (meaning immediately after stage set to  [ 100)  if (vSceneTimer == 1)    {    [ reset timer    vSceneTimer = 0;    [ advance to next stage    vSceneStage = 1;    [ set cursor step time to one    step.time(oCursor, vCurStepTime2);    [ draw the scene detail window in lower left; with    [ smallest image    draw(oSceneWindow);    stop.cycling(oSceneWindow);    }  }[ if in scene stage 1if (vSceneStage == 1)  {  [ increment timer  ++vSceneTimer;  [ after 10 cycles  if (vSceneTimer == 10)    {    [ reset timer    vSceneTimer = 0;    [ advance to next scene    vSceneStage = 2;    [ expand scene window to mid size    set.cel(oSceneWindow, 1);    }  }  [ if in scene stage 2if (vSceneStage == 2)  {  [ increment timer  ++vSceneTimer;  [ after ten cycles  if (vSceneTimer == 10)    {    [ reset timer    vSceneTimer = 0;    [ advance to next stage    vSceneStage = 3;    [ use largest scene window with blank background    set.cel(oSceneWindow, 2);    [ force it to draw (not sure why they couldn't wait    [ until normal update at end of cycle?)    force.update(oSceneWindow);        [ draw the scene detail object (the wagon and    [ horses)    draw(oWagon);        [ draw the horse's hoofprints object and show it on    [ detail scene    set.view(oTracks, vw.MapArt);    set.loop(oTracks, 2);    set.priority(oTracks, 10);    position(oTracks, 9, 150);    vTmpVal = 2;    cycle.time(oTracks, vTmpVal);    draw(oTracks);    }  }  [ if NOT dying from cholera during this portion of the tripif (CurrentTripTime != vCholeraTime2)  {  [ stages past 10 can continue on    [ if at stage 10  if (vSceneStage == 10)    {    [ advance to stage 11    vSceneStage = 11;    [ adjust cursor step time to 1    step.time(oCursor, vCurStepTime2);    [ add scene window again    set.view(oSceneWindow, vw.MapArt);    [ using the wagon road loop    set.loop(oSceneWindow, 0);    [ start with smallest image    set.cel(oSceneWindow, 0);    set.priority(oSceneWindow, 9);    position(oSceneWindow, 6, 161);    draw(oSceneWindow);    }  [ if at stage 11  if (vSceneStage == 11)    {    [ increment timer    ++vSceneTimer;    [ after 10 cycles    if (vSceneTimer == 10)      {      [ reset timer      vSceneTimer = 0;      [ advance to next stage      vSceneStage = 12;      [ showing mid size image of scene window      set.cel(oSceneWindow, 1);      }    }  [ if at stage 12  if (vSceneStage == 12)    {    [ increment timer    ++vSceneTimer;    [ after ten cycles    if (vSceneTimer == 10)      {      [ reset timer      vSceneTimer = 0;      [ advance to next stage      vSceneStage = 13;      [ show full size scene window      set.cel(oSceneWindow, 2);      [ and make it redraw right now      force.update(oSceneWindow);      [ add the wagon      draw(oWagon);      [ and reset tracks object ( hasn't changed from      [ previous use of the object, so it's not really      [ necessary to do all this)      set.view(oTracks, vw.MapArt);      set.loop(oTracks, 2);      set.priority(oTracks, 10);      position(oTracks, 9, 150);      vTmpVal = 2;      cycle.time(oTracks, vTmpVal);      draw(oTracks);      }    }  [ when cursor reaches left edge of map  if (posn(oCursor, 2, 37, 2, 37) && vSceneStage == 13)    {    [ advance to next stage    vSceneStage = 14;    [ shrink scene window to mid size    set.cel(oSceneWindow, 1);    [ erase wagon and tracks    erase(oWagon);    erase(oTracks);    [ use reverse.loop to shrink scene window back to small    [ value    reverse.loop(oSceneWindow, fSceneClosed);    }  [ if at last stage  if (isset(fSceneClosed) && vSceneStage == 14)    {    [ all done    reset(fSceneClosed);    vSceneStage = 15;    [ erase the scene window    erase(oSceneWindow);    [ Jerrod can continue to next cutscene    set(ContinueJourney);    }  }  [ when cursor gets about a quarter of the way across screen,[ during stage 3if (posn(oCursor, 97, 145, 97, 145) && vSceneStage == 3)  {  [ advance to next stage  vSceneStage = 4;  [ begin shrinking the scene window  set.cel(oSceneWindow, 1);  [ remove wagon detail and the tracks  erase(oWagon);  erase(oTracks);  [ and continue reversing scene  reverse.loop(oSceneWindow, fSceneClosed);  }  [ when scene window closesif (isset(fSceneClosed) && vSceneStage == 4)  {  [ advance to next stage and remove it from screen  reset(fSceneClosed);  vSceneStage = 5;  erase(oSceneWindow);  }  [ if at stage 5if (vSceneStage == 5)  {  [ immediately o to stage six  vSceneStage = 6;  [ set view (it's already set to vw.MapArt, so this is an  [ unnecessary command)  set.view(oSceneWindow, vw.MapArt);  [ choose the river crossing scene  set.loop(oSceneWindow, 3);  [ smallest image  set.cel(oSceneWindow, 0);  [ set step time to zero (so cursor doesn't move during the  [ river crossing sequence)  vTmpVal = 0;  step.size(oCursor, vTmpVal);  step.time(oCursor, vTmpTime);  [ redraw scene window  draw(oSceneWindow);  }  [ if during scene stage 6if (vSceneStage == 6)  {  [ increment timer  ++vSceneTimer;  [ after ten cycles  if (vSceneTimer == 10)    {    [ reset timer    vSceneTimer = 0;    [ advance to next stage    vSceneStage = 7;    [ show mid size scene image    set.cel(oSceneWindow, 1);    }  }  [ if during scene stage 7if (vSceneStage == 7)  {  [ increment timer  ++vSceneTimer;  [ after ten cycles  if (vSceneTimer == 10)    {    [ reset timer    vSceneTimer = 0;    [ set stage value to 110    vSceneStage = 110;    [ show largest scene image    set.cel(oSceneWindow, 2);    [ force it to draw right now    force.update(oSceneWindow);    [ show raft with the wagon on it    set.cel(oRaft, 13);    [ priority of raft set high enough so it will show on    [ top of the water block that will hide Jerrod if he    [ goes overboard    set.priority(oRaft, 12);    [ it starts on right riverbank    position(oRaft, 29, 146);    draw(oRaft);    stop.cycling(oRaft);    [ and it moves to left riverbank    move.obj(oRaft, 9, 152, 1, fSceneClosed);    vTmpVal = 2;    step.time(oRaft, vTmpVal);        [ if nothing else horrible is gonna happen    if (vMudTime != 3 &&         AnimalStarveTime != 4 &&         vStolenMuleTime != 4 &&         YoungOxDeathTime != 11 &&         vWinterStormTime != 12)      {      [ one in four chance Jerrod falls out      random(0, 3, vRndNum);      if (vRndNum == 0)        {        [ use trip point 20 to indicate that Jerrod falls        [ out of wagon into the river        TripPoint_20 = CurrentTripTime;        }      }          [ if Jerrod is set to fall out of wagon     if (CurrentTripTime == TripPoint_20)      {      [ use tiny Jerrod object/view            [ until he actually goes overboard set priority to      [ show Jerrod on top of raft      set.priority(oTinyJ, 13);      position(oTinyJ, 38, 142);      draw(oTinyJ);      stop.cycling(oTinyJ);      move.obj(oTinyJ, 35, 145, 1, fEgoMoved);      [ same step time as boat (so tiny Jerrod stays in same      [ place relative to the boat)      step.time(oTinyJ, vTmpVal);      [ add a patch of blue water; used to show tiny Jerrod      [ sinking in the water when he goes overboard      draw(oWaterBlock);      stop.cycling(oWaterBlock);      [ set status to begin the fall sequence      vFallStatus = 1;      }    }  }  [ when raft gets to other side of riverif (isset(fSceneClosed) && vSceneStage == 110)  {  reset(fSceneClosed);  vSceneStage = 111;  [ use reverse.loop to show wagon moving off the raft onto  [ shore  reverse.loop(oRaft, fSceneClosed);  }  [ when wagon moves off raft onto shoreif (isset(fSceneClosed) && vSceneStage == 111)  {  [ if timing point indicates Jerrod fell off  if (CurrentTripTime == TripPoint_20)    {    [ change scene stage so it stops its normal progression    vSceneStage = 120;    [ Jerrod has now drowned in the river    EgoHealthStatus = 39;    [ load and call the logic to handle the details of his    [ death    load.logics(lgc.DeathOnTrail);    call(lgc.DeathOnTrail);    }  else    {    [ if Jerrod did NOT fall off, proceed to stage 8    reset(fSceneClosed);    vSceneStage = 8;    vTmpVal = 1;    step.size(oCursor, vTmpVal);    }  }  [ when cursor reaches stage 8 pointif (posn(oCursor, 97, 143, 97, 143) && vSceneStage == 8)  {  [ advance to next stage  vSceneStage = 9;  [ begin shrinking scene window  set.cel(oSceneWindow, 1);  [ remove raft from screen  erase(oRaft);  [ and use normal animation to continue shrinking the  [ screen  reverse.loop(oSceneWindow, fSceneClosed);  }  [ when scene is on smallest image after river crossing sceneif (isset(fSceneClosed) && vSceneStage == 9)  {  [ advance to next stage  reset(fSceneClosed);  vSceneStage = 10;  [ remove scene window from screen  erase(oSceneWindow);  [ and make sure the 'crossing kansas river' message is  [ closed  close.window();  [ if Jerrod is not already set to die from something else  if (vMudTime != 3 &&       AnimalStarveTime != 4 &&       vStolenMuleTime != 4 &&       YoungOxDeathTime != 11 &&       vWinterStormTime != 12)    {    [ there is a random chance Jerrod will die from cholera    random(0, 3, vRndNum);    [ a one in four chance    if (vRndNum == 0)      {      [ set cholera time point to match current point      vCholeraTime2 = CurrentTripTime;      }    }  }  [ if Jerrod is set to fall from the raft (regardless of what[ the scene stage value is)if (CurrentTripTime == TripPoint_20)  {  [ when raft gets to this point, almost to end  if (posn(oRaft, 23, 152, 23, 152) && vFallStatus == 1)    {    [ toss Jerrod overboard    vFallStatus = 2;    [ change priority so he will disappear under the water    [ as he moves behind oWaterBlock    set.priority(oTinyJ, 10);    move.obj(oTinyJ, 35, 157, 3, fTJMoved);    start.cycling(oTinyJ);    vTmpVal = 1;    step.time(oTinyJ, vTmpVal);    }      [ after Jerrod is completely under water  if (isset(fTJMoved) && vFallStatus == 2)    {    [ fall sequence is done    reset(fTJMoved);    vFallStatus = 3;    [ Jerrod is gone    erase(oTinyJ);     [ show message    print("Ooops! You fall from the raft into the strong current. You are swept "          "downstream, never to be heard from again.");    print("There was nothing you could do. It was just an accident!");    }  }  [ if Jerrod is due to die from choleraif (CurrentTripTime == vCholeraTime2)  {  [ if at stage 10  if (vSceneStage == 10)    {    [ go to next stage    vSceneStage = 11;    [ cursor slows way down    step.time(oCursor, vSlowTime);    }  [ if at stage 11  if (vSceneStage == 11)    {    [ increment timer    ++vSceneTimer;    [ after 20 cycles    if (vSceneTimer == 20)      {      [ reset timer      vSceneTimer = 0;      [ advance to next stage      vSceneStage = 12;      [ show scenery window      set.view(oSceneWindow, vw.MapArt);      [ with road background      set.loop(oSceneWindow, 0);      [ at full size      set.cel(oSceneWindow, 2);      draw(oSceneWindow);      [ add footprints      set.view(oTracks, vw.MapArt);      set.loop(oTracks, 2);      set.priority(oTracks, 10);      position(oTracks, 9, 150);      [ the tracks move slowly, because Jerrod is sick      vTmpVal = 7;      cycle.time(oTracks, vTmpVal);      draw(oTracks);      start.cycling(oTracks);      [ show Jerrod as sick, in California attire      set.view(ego, vw.SickJerrodCA);      set.loop(ego, 1);      [ fix loop so it won't change in case player tries to      [ use cursor keys      fix.loop(ego);      [ step size is zero; Jerrod won't move; background      [ will appear to move behind him; this also prevents      [ the player from moving ego by using cursor keys      vTmpVal = 0;      step.size(ego, vTmpVal);      [ show Jerrod in the scene window      position(ego, 38, 148);      draw(ego);      [ allow ego object to cycle at rest      set(CycleAtRest);      start.cycling(ego);      [ and because he's sick he cycles at half speed      vTmpVal = 2;      cycle.time(ego, vTmpVal);      }    }      [ during stage 12 (Jerrod is sick, slowly walking)  if (vSceneStage == 12)    {    [ increment timer    ++vSceneTimer;    [ after 35 cycles    if (vSceneTimer == 35)      {      [ reset timer      vSceneTimer = 0;      [ advance to nexe stage      vSceneStage = 13;      [ change view to show Jerrod falling down dead      set.view(ego, vw.DyingJerrodCA);      [ make sure to start at first cel      set.cel(ego, 0);      end.of.loop(ego, fSceneClosed);      [ cursor stops moving along trail      vTmpVal = 0;      step.size(oCursor, vTmpVal);      }    }  [ at final stage (in cholera sequence)  if (isset(fSceneClosed) && vSceneStage == 13)    {    [ Jerrod is now dead from cholera    vSceneStage = 14;    EgoHealthStatus = 21;    [ stop all motion    stop.motion(ego);    stop.cycling(oTracks);    [ load and call logic to handle details of Jerrod's    [ death    load.logics(lgc.DeathCholera);    call(lgc.DeathCholera);    }  }  [ if Jerrod is due to get stuck in the mudif (CurrentTripTime == vMudTime)  {  [ when cursor is just outside of Independence (and  [ mudstage is just starting)  if (posn(oCursor, 137, 148, 137, 148) && vMudStage == 0)    {    [ advance to next stage    vMudStage = 1;    [ set cursor step to zero so it stops moving    vTmpVal = 0;    step.size(oCursor, vTmpVal);    [ change wagon loop to show it sinking in mud    set.view(oWagon, vw.MapArt);    set.loop(oWagon, 5);    set.cel(oWagon, 0);    [ set cycle time so it sinks slowly    vTmpVal = 5;    cycle.time(oWagon, vTmpVal);    cycle.time(oTracks, vTmpVal);    [ run the loop once    end.of.loop(oWagon, fWagonStuck);    }  [ after wagon sinks in the mud  if (isset(fWagonStuck) && vMudStage == 1)    {    [ advance to next stage    reset(fWagonStuck);    vMudStage = 2;    [ end.of.loop command stops cycling on its own so    [ there's no need to use stop.cycling here...    stop.cycling(oTracks);        [ message to player    print("When you left Independence, you had this gnawing feeling you were "          "leaving too early.");    print("You were right! Your wagon sank up to its axles in mud!");    [ no need to call normal.motion command here; the    [ stop.motion() command does that automatically and also    [ sets direction to 'stopped'    normal.motion(oCursor);    stop.motion(oCursor);    [ Jerrod doesn't die, but the game is over for him    EgoHealthStatus = 41;    [ load and call the logic that handles details of death    load.logics(lgc.DeathOnTrail);    call(lgc.DeathOnTrail);    }  }  [ as cursor moves along the track, adjust it's direction/[ position accordingly by using a status variable; as cursor[ moves to each point, increment status, and send cursor to[ next point (adjusting position if needed)if (isset(fCursorMoved) && vCursorStatus == 1)  {  reset(fCursorMoved);  vCursorStatus = 2;  move.obj(oCursor, 143, 139, 1, fCursorMoved);  }if (isset(fCursorMoved) && vCursorStatus == 2)  {  reset(fCursorMoved);  vCursorStatus = 3;  move.obj(oCursor, 141, 140, 1, fCursorMoved);  }if (isset(fCursorMoved) && vCursorStatus == 3)  {  reset(fCursorMoved);  vCursorStatus = 4;  move.obj(oCursor, 137, 148, 1, fCursorMoved);  }if (isset(fCursorMoved) && vCursorStatus == 4)  {  reset(fCursorMoved);  vCursorStatus = 5;  move.obj(oCursor, 109, 149, 1, fCursorMoved);  }if (isset(fCursorMoved) && vCursorStatus == 5)  {  reset(fCursorMoved);  vCursorStatus = 6;  move.obj(oCursor, 103, 143, 1, fCursorMoved);  }if (isset(fCursorMoved) && vCursorStatus == 6)  {  reset(fCursorMoved);  vCursorStatus = 7;  vTmpVal = -6; [ 250;  vTmpY = 3;  reposition(oCursor, vTmpVal, vTmpY);  set.loop(oCursor, 3);  move.obj(oCursor, 97, 135, 1, fCursorMoved);  add.to.pic(vw.MapTracks, 5, 2, 103, 143, 6, 6);  }if (isset(fCursorMoved) && vCursorStatus == 7)  {  reset(fCursorMoved);  vCursorStatus = 8;  move.obj(oCursor, 88, 128, 1, fCursorMoved);  }if (isset(fCursorMoved) && vCursorStatus == 8)  {  reset(fCursorMoved);  vCursorStatus = 9;  move.obj(oCursor, 81, 90, 1, fCursorMoved);  }if (isset(fCursorMoved) && vCursorStatus == 9)  {  reset(fCursorMoved);  vCursorStatus = 10;  move.obj(oCursor, 74, 88, 1, fCursorMoved);  }if (isset(fCursorMoved) && vCursorStatus == 10)  {  reset(fCursorMoved);  vCursorStatus = 11;  move.obj(oCursor, 62, 73, 1, fCursorMoved);  }if (isset(fCursorMoved) && vCursorStatus == 11)  {  reset(fCursorMoved);  vCursorStatus = 12;  move.obj(oCursor, 61, 67, 1, fCursorMoved);  }if (isset(fCursorMoved) && vCursorStatus == 12)  {  reset(fCursorMoved);  vCursorStatus = 13;  move.obj(oCursor, 42, 64, 1, fCursorMoved);  }if (isset(fCursorMoved) && vCursorStatus == 13)  {  reset(fCursorMoved);  vCursorStatus = 14;  move.obj(oCursor, 37, 57, 1, fCursorMoved);  }if (isset(fCursorMoved) && vCursorStatus == 14)  {  reset(fCursorMoved);  vCursorStatus = 15;  move.obj(oCursor, 25, 48, 1, fCursorMoved);  }if (isset(fCursorMoved) && vCursorStatus == 15)  {  reset(fCursorMoved);  vCursorStatus = 16;  move.obj(oCursor, 24, 46, 1, fCursorMoved);  }if (isset(fCursorMoved) && vCursorStatus == 16)  {  reset(fCursorMoved);  vCursorStatus = 17;  move.obj(oCursor, 19, 44, 1, fCursorMoved);  }if (isset(fCursorMoved) && vCursorStatus == 17)  {  reset(fCursorMoved);  vCursorStatus = 18;  move.obj(oCursor, 16, 37, 1, fCursorMoved);  }if (isset(fCursorMoved) && vCursorStatus == 18)  {  reset(fCursorMoved);  vCursorStatus = 19;  move.obj(oCursor, 2, 37, 1, fCursorMoved);  }if (isset(fCursorMoved) && vCursorStatus == 19)  {  [ looks like at one point, there may have been something  [ that happens when last cursor point is reached, but was  [ later removed, leaving this empty code block  }    [ as the cursor moves across the screen, add blocks to keep[ previous track sections permanently markedif (posn(oCursor, 139, 142, 139, 142))  {  add.to.pic(vw.MapTracks, 5, 2, 139, 142, 6, 6);  }if (posn(oCursor, 130, 149, 130, 149))  {  add.to.pic(vw.MapTracks, 5, 2, 130, 149, 6, 6);  }if (posn(oCursor, 119, 149, 119, 149))  {  add.to.pic(vw.MapTracks, 5, 2, 119, 149, 6, 6);  }if (posn(oCursor, 109, 149, 109, 149))  {  add.to.pic(vw.MapTracks, 5, 2, 109, 149, 6, 6);  }if (posn(oCursor, 97, 135, 97, 135))  {  add.to.pic(vw.MapTracks, 5, 1, 97, 135, 6, 6);  }if (posn(oCursor, 86, 126, 86, 126))  {  add.to.pic(vw.MapTracks, 5, 1, 86, 126, 6, 6);  }if (posn(oCursor, 81, 114, 81, 114))  {  add.to.pic(vw.MapTracks, 5, 1, 81, 114, 6, 6);  }if (posn(oCursor, 81, 102, 81, 102))  {  add.to.pic(vw.MapTracks, 5, 1, 81, 102, 6, 6);  }if (posn(oCursor, 81, 90, 81, 90))  {  add.to.pic(vw.MapTracks, 5, 1, 81, 90, 6, 6);  }if (posn(oCursor, 70, 84, 70, 84))  {  add.to.pic(vw.MapTracks, 5, 1, 70, 84, 6, 6);  }if (posn(oCursor, 62, 73, 62, 73))  {  add.to.pic(vw.MapTracks, 5, 1, 62, 73, 6, 6);  }if (posn(oCursor, 56, 64, 56, 64))  {  add.to.pic(vw.MapTracks, 5, 1, 56, 64, 6, 6);  }if (posn(oCursor, 45, 64, 45, 64))  {  add.to.pic(vw.MapTracks, 5, 1, 45, 64, 8, 8);  }if (posn(oCursor, 35, 55, 35, 55))  {  add.to.pic(vw.MapTracks, 5, 1, 35, 55, 6, 6);  }if (posn(oCursor, 34, 54, 34, 54))  {  add.to.pic(vw.MapTracks, 5, 1, 34, 54, 6, 6);  }if (posn(oCursor, 23, 45, 23, 45))  {  add.to.pic(vw.MapTracks, 5, 1, 23, 45, 6, 6);  }if (posn(oCursor, 12, 37, 12, 37))  {  add.to.pic(vw.MapTracks, 5, 1, 12, 37, 6, 6);  }  [ as the cursor moves across the screen, update the total[ travel timeif (posn(oCursor, 132, 149, 132, 149) && vTimeStatus == 0)  {  ++vTimeStatus;  GameDays  += 2;  }if (posn(oCursor, 113, 149, 113, 149) && vTimeStatus == 1)  {  ++vTimeStatus;  GameDays  += 2;  }if (posn(oCursor, 96, 134, 96, 134) && vTimeStatus == 2)  {  ++vTimeStatus;  GameDays  += 2;  }if (posn(oCursor, 81, 103, 81, 103) && vTimeStatus == 3)  {  ++vTimeStatus;  GameDays  += 2;  }if (posn(oCursor, 71, 85, 71, 85) && vTimeStatus == 4)  {  ++vTimeStatus;  GameDays  += 2;  }if (posn(oCursor, 61, 68, 61, 68) && vTimeStatus == 5)  {  ++vTimeStatus;  GameDays  += 2;  }if (posn(oCursor, 45, 64, 45, 64) && vTimeStatus == 6)  {  ++vTimeStatus;  GameDays  += 2;  }if (posn(oCursor, 29, 49, 29, 49) && vTimeStatus == 7)  {  ++vTimeStatus;  GameDays  += 2;  }if (posn(oCursor, 8, 37, 8, 37) && vTimeStatus == 8)  {  ++vTimeStatus;  GameDays  += 2;  }  [ as cursor moves across the screen, show periodic messages[ to update player on the trip (unless suppressed)if (posn(oCursor, 142, 140, 142, 140) && vMsgStatus == 0)  {  ++vMsgStatus;  if (!isset(HideTripMsgs))    {    print("It is 2,100 miles to California, but after only a few miles your "          "company, and every other company heading west, realizes that the "          "wagons are too heavy. You begin what will be the start of a "          "continual process, lightening the wagons.");    print("The traffic is very heavy leaving Independence. There must be "          "hundreds of wagons, usually pulled by six to eight mules or oxen, on "          "the trail.");    print("The trails become deeply rutted, making passage difficult.");    print("Wagon axles break, wheels fall off, wagons sink up to their axles in "          "mud. If they cannot be pulled out, they are abandoned.");    }  }if (posn(oCursor, 135, 149, 135, 149) && vMsgStatus == 1)  {  ++vMsgStatus;  [ if wagon is going to sink in the mud, skip this message  if (!isset(HideTripMsgs) && CurrentTripTime != vMudTime)    {    print("Forty-five miles down the trail, the trail forks. To the south is "          "the Sante Fe trail; to the north, the Oregon-California trail.");    print("Very few take the southern route.");    }  }if (posn(oCursor, 116, 149, 116, 149) && vMsgStatus == 2)  {  ++vMsgStatus;  if (!isset(HideTripMsgs))    {    print("It isn't long before the first Indians are encountered.");    print("The first Indians encountered are the Shawnee and Potawatomis. Much "          "to the surprise of most travelers, and disappointment of some, they "          "are very friendly and helpful.");    }  }if (posn(oCursor, 97, 144, 97, 144) && vMsgStatus == 3)  {  ++vMsgStatus;  if (!isset(HideTripMsgs))    {    [ leave this message up while the cutscene continues    set(leaveWindow);    print.at("Crossing the Kansas River!", 8, 3, 14);    }  }if (posn(oCursor, 81, 101, 81, 101) && vMsgStatus == 4)  {  ++vMsgStatus;  if (!isset(HideTripMsgs))    {    print("You are now approaching the land of the Pawnee Indians! This is the "          "tribe of Indians that is most feared by the travelers!!");    print("It is necessary to keep a keen watch at all times!!");    }  }if (posn(oCursor, 61, 72, 61, 72) && vMsgStatus == 5)  {  ++vMsgStatus;  if (!isset(HideTripMsgs))    {    print("The plains teem with buffalo! Herds of them stretch as far as the "          "eye can see. Wildlife is extremely abundant.");    print("But the traveling masses do little to preserve their surroundings as "          "they make haste to the West.");    print("While traveling the trail you find that those who have gone before "          "you have left a trail of litter and garbage.");    print("If there was no trail, you would have hardly noticed; you could just "          "follow the trash. It is a sad sight.");    }  }if (posn(oCursor, 35, 55, 35, 55) && vMsgStatus == 6)  {  ++vMsgStatus;  if (!isset(HideTripMsgs))    {    print("Also along the way, you find discouraged travelers heading back home "          "in their wagons.");    }  }if (posn(oCursor, 10, 37, 10, 37) && vMsgStatus == 7)  {  ++vMsgStatus;  if (!isset(HideTripMsgs))    {    print("The first major milestone is Ft. Kearny. It was recently built by "          "the U.S. Army to attempt to keep peace between the Pawnee and Sioux "          "Indians.");    print("Travelers look forward to Ft. Kearny for various reasons.");    print("Some just want a place to mail letters; others are interested in how "          "many others have passed before them; leaders want information on the "          "condition of the trail ahead.");    }  }  [ **************************************[ PROCESS PLAYER INPUT[ **************************************[ if player hasn't provided input no need to do said testsif (!isset(haveInput))  {  goto(Done);  }[ (this boilerplate 'if' block isn't needed since no input[ is processed in this cutscene logic)Done:[ call main timing logiccall(lgc.WagonTripTiming);return();[ **************************************[ MESSAGES[ **************************************#message 1 "It is 2,100 miles to California, but after only a few miles your company, and every other company heading west, realizes that the wagons are too heavy. You begin what will be the start of a continual process, lightening the wagons."#message 5 "The traffic is very heavy leaving Independence. There must be hundreds of wagons, usually pulled by six to eight mules or oxen, on the trail."#message 6 "The trails become deeply rutted, making passage difficult."#message 7 "Wagon axles break, wheels fall off, wagons sink up to their axles in mud. If they cannot be pulled out, they are abandoned."#message 10 "Forty-five miles down the trail, the trail forks. To the south is the Sante Fe trail; to the north, the Oregon-California trail."#message 11 "Very few take the southern route."#message 15 "It isn't long before the first Indians are encountered."#message 16 "The first Indians encountered are the Shawnee and Potawatomis. Much to the surprise of most travelers, and disappointment of some, they are very friendly and helpful."#message 20 "Crossing the Kansas River!"#message 25 "You are now approaching the land of the Pawnee Indians! This is the tribe of Indians that is most feared by the travelers!!"#message 26 "It is necessary to keep a keen watch at all times!!"#message 30 "The plains teem with buffalo! Herds of them stretch as far as the eye can see. Wildlife is extremely abundant."#message 31 "But the traveling masses do little to preserve their surroundings as they make haste to the West."#message 32 "While traveling the trail you find that those who have gone before you have left a trail of litter and garbage."#message 33 "If there was no trail, you would have hardly noticed; you could just follow the trash. It is a sad sight."#message 40 "Also along the way, you find discouraged travelers heading back home in their wagons."#message 45 "The first major milestone is Ft. Kearny. It was recently built by the U.S. Army to attempt to keep peace between the Pawnee and Sioux Indians."#message 46 "Travelers look forward to Ft. Kearny for various reasons."#message 47 "Some just want a place to mail letters; others are interested in how many others have passed before them; leaders want information on the condition of the trail ahead."#message 50 "Ooops! You fall from the raft into the strong current. You are swept downstream, never to be heard from again."#message 51 "When you left Independence, you had this gnawing feeling you were leaving too early."#message 53 "You were right! Your wagon sank up to its axles in mud!"#message 54 "There was nothing you could do. It was just an accident!"