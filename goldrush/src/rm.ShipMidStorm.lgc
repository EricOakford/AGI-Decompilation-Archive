[***********************************************************[[ rm.ShipSternStorm[[ This room is basically the same as rm.ShipMidInterior, [ except that it shows the midship interior spaces during[ the storm[[***********************************************************[ **************************************[ LOCAL DEFINES[ **************************************#define oPiston                      o1#define oCams                        o2#define oAftDoor                     o3#define oMidDoor                     o4#define oFwdDoor                     o5#define oWhistleSteam                o6#define oWhistlePull                 o7#define oFire                        o8[ o9 is not used#define oWorker1                    o10#define oWorker2                    o11#define oCart                       o12#define vIcebergTime                v81  [ override TripPoint_20#define vRockTime                   v82  [ override TripPoint_21#define vTmpStep                   v220#define vWhistleStatus             v221#define vWhistleCounter            v222[ v223 is not used#define vCoalStatus                v224#define vWorkerStatus              v225#define vCoalTimer                 v226[ v227 is not used#define vRockStatus                v228#define vRockSize                  v229#define vIcebergStatus             v230#define vFireStatus                v231#define vFireCounter               v232#define fOnLadder                  f220#define fCoalDoorMoved             f221[ f222 and f223 are not used#define fIgnoreBlocks              f224#define fCoalActionDone            f225#define fCoalDoorShut              f226#define fBeginSinking              f227[ f228 is not used#define fSoundDone                 f229[ **************************************[ FIRST CYCLE ONLY[ **************************************if (isset(newRoom))  {  [ load, draw and discard current picture  load.pic(currentRoom);  draw.pic(currentRoom);  discard.pic(currentRoom);    [ load view with extra art  load.view(vw.ShipArt2);  [ add shovel to picture  add.to.pic(vw.ShipArt2, 0, 2, 43, 156, 9, 9);  [ add stove and table to picture  add.to.pic(vw.ShipArt2, 0, 0, 28, 106, 9, 9);  add.to.pic(vw.ShipArt2, 0, 1, 42, 106, 9, 9);    [ if just past Cape Horn off coast of South America  if (CurrentTripTime == 9)    {    [ show cutouts of coal hold, full     add.to.pic(vw.ShipArt2, 6, 0, 31, 150, 7, 7);    add.to.pic(vw.ShipArt2, 6, 0, 53, 150, 7, 7);    }      [ if halfway up the coast, going past South America  if (CurrentTripTime == 11)    {    [ show cutouts of coal hold, half empty    add.to.pic(vw.ShipArt2, 6, 1, 31, 150, 7, 7);    add.to.pic(vw.ShipArt2, 6, 1, 53, 150, 7, 7);    }      [ add crew/passengers who don't move  add.to.pic(vw.ShipArt2, 1, 0, 109, 106, 9, 9);  add.to.pic(vw.ShipArt2, 4, 0, 36, 106, 14, 14);    [ done with extra art; discard the view  discard.view(vw.ShipArt2);    [ load main timing logic for Cape Horn trip  load.logics(lgc.CapeTripTiming);    [ if Jerrod is currently on the top deck, in the storm  if (isset(OnDeckInStorm))    {    [ use 'windy' view    load.view(vw.WindyJerrod);    }  else    {    [ if trip point time matches either scurvy time or     [ cholera time (this will NEVER be true; the time points    [ for scurvy and cholera will never coincide with the    [ storm; programmers should have cleaned up their code    [ here)    if ((CurrentTripTime == ScurvyTime ||         CurrentTripTime == CholeraTime))      {      [ load views of sick/dying Jerrod (these never get      [ used)      load.view(vw.DyingJerrodNY);      load.view(vw.SickJerrodNY);      }    else      {      [ otherwise, use normal view (in this room, they      [ didn't use the 2D version of Jerrod that is used       [ in the other ship interior rooms; looks like a minor      [ oversight)      load.view(vw.JerrodNY);      }    }      [ load all the other views needed in the room  load.view(vw.ClimbingJerrodNY);  load.view(vw.ShipMachineryArt);  load.view(vw.MidShipArt2);  load.view(vw.StormWaves);  load.view(vw.CoalRoomArt);  load.view(vw.Fire);    [ load sounds used in the room  load.sound(s.AddToScore);  load.sound(s.RockCrash);    [ add lamps (not lit? hmm; in stern, during the storm, the  [ lamps show as lit; here they are the same as in the  [ non-storm room)  add.to.pic(vw.MidShipArt2, 2, 0, 2, 82, 7, 7);  add.to.pic(vw.MidShipArt2, 2, 0, 45, 82, 7, 7);  add.to.pic(vw.MidShipArt2, 2, 0, 87, 82, 7, 7);    [ if just past the Cape, heading north  if (CurrentTripTime == 9)    {    [ draw coal pile mostly full at left edge of the room    add.to.pic(vw.ShipMachineryArt, 5, 0, 0, 158, 10, 10);    }      [ if further up the coast of South America,   if (CurrentTripTime == 11)    {    [ draw coal pile about half full at left edge of the    [ room    add.to.pic(vw.ShipMachineryArt, 5, 1, 0, 158, 10, 10);    }      [ if just past the Cape, heading north  if (CurrentTripTime == 9)    {    [ draw barrels in forward hold mostly full    add.to.pic(vw.ShipMachineryArt, 5, 2, 155, 158, 10, 10);    }  [ if further up the coast of South America,   if (CurrentTripTime == 11)    {    [ show forward hold with fewer barrels    add.to.pic(vw.ShipMachineryArt, 5, 3, 155, 158, 10, 10);    }      [ the flames that appears if coal hold catches fire  animate.obj(oFire);  set.view(oFire, vw.Fire);  set.loop(oFire, 0);  position(oFire, 31, 150);  set.priority(oFire, 7);  ignore.objs(oFire);  ignore.blocks(oFire);    [ main engine piston  animate.obj(oPiston);  set.view(oPiston, vw.ShipMachineryArt);  set.loop(oPiston, 0);  set.cel(oPiston, 0);  set.priority(oPiston, 14);  position(oPiston, 116, 92);  draw(oPiston);  start.cycling(oPiston);  animate.obj(oCams);    [ engine cam rockers  set.view(oCams, vw.ShipMachineryArt);  set.loop(oCams, 1);  set.cel(oCams, 0);  set.priority(oCams, 14);  position(oCams, 86, 96);  draw(oCams);  start.cycling(oCams);    [ coal cart  animate.obj(oCart);  set.view(oCart, vw.CoalRoomArt);  set.loop(oCart, 5);  set.cel(oCart, 0);  set.priority(oCart, 13);  position(oCart, 7, 156);  ignore.objs(oCart);  draw(oCart);  stop.cycling(oCart);    [ boiler worker 1  animate.obj(oWorker1);  set.view(oWorker1, vw.CoalRoomArt);  set.loop(oWorker1, 1);  set.cel(oWorker1, 0);  set.priority(oWorker1, 12);  position(oWorker1, 7, 156);  ignore.objs(oWorker1);  draw(oWorker1);  stop.cycling(oWorker1);  stop.update(oWorker1);    [ boiler worker 2  animate.obj(oWorker2);  set.view(oWorker2, vw.CoalRoomArt);  set.loop(oWorker2, 2);  set.cel(oWorker2, 0);  set.priority(oWorker2, 12);  position(oWorker2, 63, 156);  draw(oWorker2);  ignore.objs(oWorker2);  stop.update(oWorker2);    [ aft coal hold door  animate.obj(oAftDoor);  set.view(oAftDoor, vw.ShipMachineryArt);  set.loop(oAftDoor, 2);  set.cel(oAftDoor, 0);  position(oAftDoor, 9, 150);  ignore.blocks(oAftDoor);  ignore.objs(oAftDoor);  draw(oAftDoor);  stop.cycling(oAftDoor);    [ mid coal hold door  animate.obj(oMidDoor);  set.view(oMidDoor, vw.ShipMachineryArt);  set.loop(oMidDoor, 3);  set.cel(oMidDoor, 0);  position(oMidDoor, 28, 152);  set.priority(oMidDoor, 8);  draw(oMidDoor);  stop.update(oMidDoor);    [ forward coal hold door  animate.obj(oFwdDoor);  set.view(oFwdDoor, vw.ShipMachineryArt);  set.loop(oFwdDoor, 3);  set.cel(oFwdDoor, 0);  position(oFwdDoor, 50, 152);  set.priority(oFwdDoor, 8);  draw(oFwdDoor);  stop.update(oFwdDoor);    [ puff of steam from whistle  animate.obj(oWhistleSteam);  set.view(oWhistleSteam, vw.ShipMachineryArt);  set.loop(oWhistleSteam, 4);  set.priority(oWhistleSteam, 9);  ignore.horizon(oWhistleSteam);  position(oWhistleSteam, 100, 20);    [ whistle pull string  animate.obj(oWhistlePull);  set.view(oWhistlePull, vw.ShipMachineryArt);  set.loop(oWhistlePull, 6);  set.cel(oWhistlePull, 0);  set.priority(oWhistlePull, 9);  ignore.horizon(oWhistlePull);  position(oWhistlePull, 99, 41);  draw(oWhistlePull);  stop.update(oWhistlePull);    [ Jerrod  animate.obj(ego);  [ if NOT on deck during the storm  if (!isset(OnDeckInStorm))    {    [ if trip time point is one where Jerrod  is sick (which    [ is never possible in this room)    if ((CurrentTripTime == ScurvyTime ||         CurrentTripTime == CholeraTime))      {      [ use the sick view of Jerrod      set.view(ego, vw.SickJerrodNY);      }    else      {      [ otherwise use normal view      set.view(ego, vw.JerrodNY);      }    }  [ since this is a 2D room, force priority to 10 and leave  [ it there  set.priority(ego, 10);    [ adjust position based on which room Jerrod is coming  [ from    [ if NOT coming from bow or stern (during storm)  if (previousRoom != rm.ShipSternStorm &&       previousRoom != rm.ShipBowStorm)    {    [ start on top deck, to the left    position(ego, 30, 57);    }      [ if coming from stern, mid-deck  if (posn(ego, 0, 102, 5, 110))    {    position(ego, 20, 106);    }      [ if coming from stern, lower deck  if (posn(ego, 0, 150, 5, 160))    {    position(ego, 20, 156);    }      [if coming from bow, on main deck  if (posn(ego, 150, 56, 159, 58))    {    position(ego, 135, 57);    }    [ if coming from bow, mid deck  if (posn(ego, 150, 102, 159, 110))    {    position(ego, 135, 106);    }      [ if Jerrod is on deck, being blown backward  if (isset(OnDeckInStorm))    {    [ use the 'windy' view    set.view(ego, vw.WindyJerrod);    ignore.blocks(ego);    ignore.horizon(ego);    position(ego, 134, 57);    [ set priority so he goes behind all the topside    [ superstructure    set.priority(ego, 7);    [ allow ego object to cycle at rest    start.cycling(ego);    set(CycleAtRest);    }  [ draw Jerrod on screen  draw(ego);    [ now show the picture  show.pic();  }  [ **************************************[ EVERY CYCLE[ **************************************[ if coal fueling status is ready for another cycleif (vCoalStatus != 250)  {  [ random chance the coal fueling animation will happen  random(210, 249, vCoalStatus);  [ one in 40 chance  if (vCoalStatus == 230)    {    [ set status to 250 so cycle won't run again until it's    [ over    vCoalStatus = 250;    [ open the aft door    end.of.loop(oAftDoor, fCoalActionDone);    [ worker is ready to shovel coal    start.cycling(oAftDoor);    vWorkerStatus = 1;    }  }  [ after door opens and worker is readyif (isset(fCoalActionDone) && vWorkerStatus == 1)  {  [ reset action flag  reset(fCoalActionDone);  [ increment timer  ++vCoalTimer;  [ worker 1 will start shoveling  start.update(oWorker1);  [ reset worker to first cel   set.cel(oWorker1, 0);  [ begin shoveling coal  end.of.loop(oWorker1, fCoalActionDone);  [ as cycles continues, fill the cart  if (vCoalTimer == 5)    {    set.cel(oCart, 1);    }  if (vCoalTimer == 10)    {    set.cel(oCart, 2);    }      [ after 15 cycles,  if (vCoalTimer == 15)    {    [ cart is full; second worker is ready to shovel coal    [ into boiler    vWorkerStatus = 2;    vCoalTimer = 0;    [ cart is completely full    set.cel(oCart, 3);    [ move cart to boiler    move.obj(oCart, 64, 156, 1, fCoalActionDone);    [ worker 1 stops shoveling    stop.update(oWorker1);    [ now close the door    reverse.loop(oAftDoor, fCoalDoorShut);    }  }  [ after cart moves to boiler, and worker 2 is ready if (isset(fCoalActionDone) && vWorkerStatus == 2)  {  [ worker 2 begins shoveling coal from cart into the boiler  reset(fCoalActionDone);  vWorkerStatus = 3;  start.update(oWorker2);  end.of.loop(oWorker2, fCoalActionDone);  }  [ after worker 2 completes a shoveling actionif (isset(fCoalActionDone) && vWorkerStatus == 3)  {  reset(fCoalActionDone);  [ increment timer  ++vCoalTimer;  [ start another shoveling loop  set.cel(oWorker2, 0);  end.of.loop(oWorker2, fCoalActionDone);  [ as time goes on, reduce coal on cart  if (vCoalTimer == 5)    {    set.cel(oCart, 2);    }  if (vCoalTimer == 10)    {    set.cel(oCart, 1);    }      [ after 15 cycles, cart is empty  if (vCoalTimer == 15)    {    [ workers are done    vWorkerStatus = 4;    vCoalTimer = 0;    [ show cart empty    set.cel(oCart, 0);    [ move it back to coal hold    move.obj(oCart, 7, 156, 1, fCoalActionDone);    stop.update(oWorker2);    }  }  [ after work is done and cart moves backif (isset(fCoalActionDone) && vWorkerStatus == 4)  {  [ reset flags and status variables so another cycle can  [ randomly start again  reset(fCoalActionDone);  vWorkerStatus = 0;  ++vCoalStatus;  }  [ if Jerrod is on stairs coming from stern sectionif (posn(ego, 0, 93, 8, 108) && isset(egoHitSpecial))  {  [when going downstairs or to the right  if ((egoDir == DOWN_RIGHT || egoDir == RIGHT))    {    TmpX = 1;    TmpY = 1;    [ bump Jerrod down and to the right by one pixel    reposition(ego, TmpX, TmpY);    }  [ when going upstairs or to the left  if ((egoDir == UP_LEFT || egoDir == LEFT))    {    TmpX = -1; [ 255;    TmpY = -1; [ 255;    reposition(ego, TmpX, TmpY);    }  }  [ when Jerrod  is at top of ladderif (posn(ego, 12, 107, 14, 107))  {  [ bump position so the climbing view  [ gets postioned correctly  if (posn(ego, 12, 107, 12, 107))    {    TmpX = 0;    }  if (posn(ego, 13, 107, 13, 107))    {    TmpX = -1; [ 255;    }  if (posn(ego, 14, 107, 14, 107))    {    TmpX = -2; [ 254;    }  [ position Jerrod on the ladder, with climbing view  set(fOnLadder);  TmpY = 17;  set.view(ego, vw.ClimbingJerrodNY);  [ set and fix loop to show Jerrod climbing  set.loop(ego, 3);  fix.loop(ego);  [ set step time, and reposition the view  vTmpStep = 2;  step.size(ego, vTmpStep);  reposition(ego, TmpX, TmpY);  }  [ if Jerrod reaches bottom of ladder while climbingif (posn(ego, 12, 156, 12, 156) && isset(fOnLadder))  {  [ he gets off the ladder  reset(fOnLadder);  TmpX = 1;  TmpY = 0;  [ if Jerrod is NOT sick or it's not the last segment of the journey  [ (in the storm room it will NEVER be last segment of journey)    if (CurrentTripTime != ScurvyTime &&       CurrentTripTime != CholeraTime &&       CurrentTripTime != TripPoint_15)    {    [ use his normal view    set.view(ego, vw.JerrodNY);    }  else    {    [ assume Jerrod is sick    set.view(ego, vw.SickJerrodNY);    [ if on last segment of journey    [ (not possible in the storm room)    if (CurrentTripTime == TripPoint_15)      {      [ if Jerrod isn't actually sick      if (!isset(SickAtSea))        {        [ restore normal view        set.view(ego, vw.JerrodNY);        }      }    }  [ allow loop to change based on direction  release.loop(ego);  [ restore normal step time and resposition the view  vTmpStep = 1;  step.size(ego, vTmpStep);  reposition(ego, TmpX, TmpY);  }[ if at bottom of ladder, and not yet climbing itif (posn(ego, 12, 155, 14, 155) && !isset(fOnLadder))  {  [ bump position so the climbing view gets  [ positioned correctly  if (posn(ego, 12, 155, 12, 155))    {    TmpX = 0;    }  if (posn(ego, 13, 155, 13, 155))    {    TmpX = -1; [ 255;    }  if (posn(ego, 14, 155, 14, 155))    {    TmpX = -2; [ 254;    }  [ Jerrod is now climbing the ladder  set(fOnLadder);  TmpY = -1; [ 255;  [ change to climbing view  set.view(ego, vw.ClimbingJerrodNY);  [ set and fix loop  set.loop(ego, 3);  fix.loop(ego);  [ adjust step time, and resposition the view  vTmpStep = 2;  step.size(ego, vTmpStep);  reposition(ego, TmpX, TmpY);  }  [ when Jerrod reaches top of ladder while climbingif (posn(ego, 12, 122, 12, 122) && isset(fOnLadder))  {  [ Jerrod gets off the ladder  reset(fOnLadder);  [ if not sick and not on last leg of journey (which is  [ always true in this room)  if (CurrentTripTime != ScurvyTime &&       CurrentTripTime != CholeraTime &&       CurrentTripTime != TripPoint_15)    {    [ use normal view    set.view(ego, vw.JerrodNY);    }  else    {    [ assume Jerrod is sick    set.view(ego, vw.SickJerrodNY);    [ if on last leg of journey (which is not possible in    [ this room)    if (CurrentTripTime == TripPoint_15)      {      [ if not actually sick      if (!isset(SickAtSea))        {        [ restore normal view        set.view(ego, vw.JerrodNY);        }      }    }  [ allow loop to change by direction  release.loop(ego);  [ restore step size  vTmpStep = 1;  step.size(ego, vTmpStep);  [ reposition Jerrod   TmpX = 1;  TmpY = -16; [ 240;  reposition(ego, TmpX, TmpY);  }  [ if Jerrod pulled the steam whistle ropeif (vWhistleStatus == 1)  {  [ show the steam cloud coming from the whistle  draw(oWhistleSteam);  start.cycling(oWhistleSteam);  vWhistleStatus = 2;  [ no sound - because of storm, I guess?  }  [ after whistle rope is pulledif (vWhistleStatus == 2)  {  [ increment the counter  ++vWhistleCounter;  [ after 15 cycles  if (vWhistleCounter == 15)    {    [ reset whistle status and counter    vWhistleCounter = 0;    vWhistleStatus = 0;    [ reset the pull to its normal position    set.cel(oWhistlePull, 0);    force.update(oWhistlePull);    [ steam goes away    erase(oWhistleSteam);    }  }[ if not currently encountering a rockif (vRockStatus != 250)  {  [ random chance a rock appears  random(150, 249, vRockStatus);  [ one in 140 chance  if (vRockStatus == 230)    {    [ set status to show rock is here    vRockStatus = 250;        [ if time point calls for sinking by rock    if (CurrentTripTime == vRockTime)      {      [ use a big rock      vRockSize = 0;      }    else      {      [ get a random rock size      random(0, 5, vRockSize);      }          [ two in six chance it's a large rock    if ((vRockSize == 0 || vRockSize == 1))      {      [ biggest rock crash - shake five times and DON'T      [ reset status to show another rock crash      sound(s.RockCrash, fSoundDone);      [ if monitor is anything EXCEPT VGA      if (monitorType != VGA)        {        [ shake screen five times        shake.screen(5);        }      [ if trip time point matches the 'sink by rock' time      if (CurrentTripTime == vRockTime)        {        [ if Jerrod is currently healthy        if (EgoHealthStatus == 0)          {          [ he's not anymore...          print("This rock may have done serious damage to the hull of the "                "ship.");          print("The captain orders the crew and passengers to abandon ship, "                "but it is too late.");          print("The lowest level of the ship fills with water and the ship is "                "on the way down in some of the most frigid water in the world.");          }        [ ship begins sinking sequence        set(fBeginSinking);        }      }          [ three in six chance it's a medium sized rock    if ((vRockSize == 2 ||         vRockSize == 3 ||         vRockSize == 4))      {      [ if monitor is anything EXCEPT VGA      sound(s.RockCrash, fSoundDone);      if (monitorType != VGA)        {        [ shake screen three times        shake.screen(3);        }      [ increase status so randomizer can find another rock      ++vRockStatus;      }    [ one is six chance rock just grazes ship    if (vRockSize == 5)      {      sound(s.RockCrash, fSoundDone);      [ if monitor is anything EXCEPT VGA      if (monitorType != VGA)        {        [ shake screen once        shake.screen(1);        }      [ increase status so randomizer can find another rock      ++vRockStatus;      }    }  }  [ if trip point is one where ship can sink from rock hitif (CurrentTripTime == vRockTime)  {  [ if ship is set to sink  if (isset(fBeginSinking))    {    [ reset flag    reset(fBeginSinking);    [ use size as a timer    vRockSize = 7;    }  [ if timer is set  if (vRockSize > 6)    {    [ increase timer    ++vRockSize;    [ at cycle 26 (+19 cycles)    if (vRockSize == 26)      {      [ ship sinks      EgoHealthStatus = 27;      [ switch to sinking cutscene (in storm)      new.room(cs.SinkingShipStorm); [ ##LE001##      }    }  }[ when traveling along South America coast, headed north if ((CurrentTripTime == 9 || CurrentTripTime == 11))  {  [ if not currently encountering an iceberg  if (vIcebergStatus != 250)    {    [ random chance an iceberg appears    random(150, 249, vIcebergStatus);    [ one in 140 chance    if (vIcebergStatus == 230)      {      [ play crash sound      sound(s.RockCrash, fSoundDone);      [ if monitor type is anything EXCEPT VGA      if (monitorType != VGA)        {        [ shake screen three times        shake.screen(3);        }      [ increment status so another iceberg can possibly hit      [ later      ++vIcebergStatus;      [ increment number of times iceberg hits ship      ++IcebergCounter;            [ after two iceberg hits      if (IcebergCounter == 2)        {        [ set status so there will be no more hits        vRockStatus = 250;        [ if trip point is time to sink by iceberg        if (CurrentTripTime == vIcebergTime)          {          [ if Jerrod is currently OK          if (EgoHealthStatus == 0)            {            [ he's not anymore...            print("The iceberg once again pounds the side of the ship.  This "                  "time the force may be too much for the hull to withstand.");            print("The wretched iceberg punctures the shell of this ship, "                  "flooding the lower levels of the ship.");            print("I am afraid the end is near.");            }          [ begin sinking ship sequence          set(fBeginSinking);          }        }      else        {        [ it looks like at one point the programmers did         [ something if count was something other  than two,        [ but removed it; this empty bracket should have        [ been removed too        }      }    }  }  [ if trip point is time for sinking by icebergif (CurrentTripTime == vIcebergTime)  {  [ if ship is set to sink  if (isset(fBeginSinking))    {    [ reset flag    reset(fBeginSinking);    [ use rock size at a timer    vRockSize = 7;    }  [ if timer is initiated  if (vRockSize > 6)    {    [ increase timer    ++vRockSize;    [ at 26 cycles (+19 cycles)    if (vRockSize == 26)      {      [ ship sinks due to iceberg      EgoHealthStatus = 28;      [ switch to sinking cutscene (storm)      new.room(cs.SinkingShipStorm); [ ##LE002##      }    }  }  [ if the coal holds are on fire (door is hot)if (CoalFireTime > 0)  {  [ if one of the doors gets opened by Jerrod  if (isset(fCoalDoorMoved))    {    [ leave them both in their current state    reset(fCoalDoorMoved);    stop.update(oMidDoor);    stop.update(oFwdDoor);    [ Jerrod is going to die- clear input line    }  [ if fire has just begun  if (vFireStatus == 1)    {    [ increment timer    ++vFireCounter;    [ after 15 cycles    if (vFireCounter == 15)      {      [ reset counter, and fire progresses      vFireCounter = 0;      vFireStatus = 2;      }    }      [ after fire reaches stage 2  if (vFireStatus == 2)    {    [ go to next stage    vFireStatus = 3;    [ show fire with larger flames    set.loop(oFire, 1);    [ adjust position of flames    TmpX = -19; [ 237;    TmpY = 6;    reposition(oFire, TmpX, TmpY);    set.cel(oFire, 0);    start.cycling(oFire);    }  [ during fire stage 3  if (vFireStatus == 3)    {    [ increment counter    ++vFireCounter;    [ after four cycles    if (vFireCounter == 4)      {      [ remove Jerrod from screen      erase(ego);      }    [ after 12 cycles    if (vFireCounter == 12)      {      [ reset counter, go to next stage      vFireCounter = 0;      vFireStatus = 4;      }    }  [ after fire reaches stage 4  if (vFireStatus == 4)    {    [ increment counter    ++vFireCounter;    [ after 10 cycles    if (vFireCounter == 10)      {      [ Jerrod dies in a fiery explosion      EgoHealthStatus = 22;      [ switch to sinking ship cutscene      new.room(cs.SinkingShipStorm); [ ##LE003##      }    }  }else  {  [ boiler is NOT overheating    [ if coal-hold door is now open  if (isset(fCoalDoorMoved))    {    [ if not already scored points for opening coal door    [ (why the heck are points  awarded for this? makes no    [ sense to me...)    if (!isset(ScoreCoalHold))      {      [ Jerrod opened a door - BFD I guess      [ score 2 points      sound(s.AddToScore, fSoundDone);      set(ScoreCoalHold);      currentScore  += 2;      }    [ reset the flag, stop updating the doors    reset(fCoalDoorMoved);    stop.update(oMidDoor);    stop.update(oFwdDoor);    }  }  [ if Jerrod goes up to top deck and isn't yet being blown[ backwardif (EgoY == 57 && !isset(OnDeckInStorm))  {  [ set flag; Jerrod is going to get blown overboard  set(OnDeckInStorm);  [ switch to 'windy' view  set.view(ego, vw.WindyJerrod);  [ allow ego object to cycle at rest  start.cycling(ego);  set(CycleAtRest);  }  [ if Jerrod is on top deck, being blown backwardif (isset(OnDeckInStorm))  {  [ if trying to move to right  if (egoDir == RIGHT)    {    [ not allowed; set step size to zero    vTmpStep = 0;    step.size(ego, vTmpStep);    }  else    {    [ any other direction, he begins moving left    egoDir = LEFT;    [ and he moves FAST due to the wind    vTmpStep = 4;    step.size(ego, vTmpStep);    }      [ if Jerrod is going past the pilot house, and not already  [ ignoring blocks  if (EgoX < 30 && !isset(fIgnoreBlocks))    {    [ ignore blocks (so Jerrod can move all the way to the    [ left)    set(fIgnoreBlocks);    [ set priority so Jerrod shows up behind the pilot house    [ as he continues to move left    set.priority(ego, 7);    ignore.blocks(ego);    }  }  [ **************************************[ CHECK FOR AN EXIT CONDITION[ **************************************if (edgeEgoHit != NOT_HIT)  {  if (edgeEgoHit == LEFT_EDGE)    {    new.room(rm.ShipSternStorm); [ ##LE004##    }  if (edgeEgoHit == RIGHT_EDGE)    {    new.room(rm.ShipBowStorm); [ ##LE005##    }  }  [ **************************************[ PROCESS PLAYER INPUT[ **************************************[ if player hasn't provided input[ no need to do said testsif (!isset(haveInput))  {  goto(Done);  }  [ blow whistleif ((said("pull", "handle") ||     said("pull", "chain") ||     said("blow", "whistle")))  {  [ if near the whistle chain  if (posn(ego, 85, 57, 110, 106))    {    [ draw the pull-chain in down position    set.cel(oWhistlePull, 1);    force.update(oWhistlePull);    [ set status to blow the whistle    vWhistleStatus = 1;    }  else    {    print("You can't do that from here.");    }  }  [ feel doorif (said("feel", "door"))  {  [ if near the door  if (posn(ego, 7, 156, 60, 156))    {    [ has door been heating up?    if (CoalFireTime > 0)      {      print("The door is very warm to the touch.");      }    else      {      print("The door is cool to the touch.");      }    }  else    {    print("There is no door close enough.");    }  }  [ open doorif (said("open", "door"))  {  [ if near a coal-hold door or near the pilot house door  if ((posn(ego, 7, 156, 16, 156) ||       posn(ego, 28, 156, 37, 156) ||       posn(ego, 49, 156, 60, 156) ||       posn(ego, 0, 52, 50, 57)))    {    [ if near aft coal-hold door    if (posn(ego, 7, 156, 16, 156))      {      [ Jerrod can't open that door; worker is in the way      print("The worker is in the way.");      }          [ if near the mid coal-hold door    if (posn(ego, 28, 156, 37, 156))      {      [ open it      start.update(oMidDoor);      end.of.loop(oMidDoor, fCoalDoorMoved);      [ if door is hot      if (CoalFireTime > 0)        {        [ warn Jerrod        print("As you open the coal hold door you notice the door is very warm, "              "nearly hot, to the touch.");        [ force trip time to value that will allow fire        [ sequence to finish        CurrentTripTime = 99;        [ show the fire burning in the coal hold        position(oFire, 31, 150);        draw(oFire);        start.cycling(oFire);        [ advance status of fire        vFireStatus = 1;        }      }          [ if near the forward coal-hold door    if (posn(ego, 49, 156, 60, 156))      {      [ open it      start.update(oFwdDoor);      end.of.loop(oFwdDoor, fCoalDoorMoved);      [ if door is hot      if (CoalFireTime > 0)        {        [ warn Jerrod        print("As you open the coal hold door you notice the door is very warm, "              "nearly hot, to the touch.");        [ force trip time to value that will allow fire        [ sequence to finish        CurrentTripTime = 99;        [ show the fire burning in the coal hold        position(oFire, 53, 150);        draw(oFire);        start.cycling(oFire);        [ advance fire status        vFireStatus = 1;        }      }    [ if near the pilot house door    if (posn(ego, 0, 52, 50, 57))      {      [ this comment is funny, because Jerrod is being blown      [ overboard; he actually CAN'T walk into the pilot      [ house!      print("The door is not locked; walk right in!");      }    }  else    {    print("There is no door close enough.");    }  }  [ close doorif (said("close", "door"))  {  [ if near a coal hold door  if ((posn(ego, 7, 156, 16, 156) ||       posn(ego, 28, 156, 37, 156) ||       posn(ego, 49, 156, 60, 156)))    {    [ if near the aft coal-hold door    if (posn(ego, 7, 156, 16, 156))      {      print("The worker is in the way.");      }    [ if near mid coal-hold door    if (posn(ego, 28, 156, 37, 156))      {      [ close it      start.update(oMidDoor);      reverse.loop(oMidDoor, fCoalDoorMoved);      }      [ if near forward coal-hold door    if (posn(ego, 49, 156, 60, 156))      {      [ close it      start.update(oFwdDoor);      reverse.loop(oFwdDoor, fCoalDoorMoved);      }    }  else    {    [ here they changed the code to NOT address the pilot    [ house door    print("There is no door close enough.");    }  }  [ look engine roomif (said("examine", "engine", "around"))  {  print("Located here are two engines and a man to operate them. The smoke "        "stack goes between the engines.");  }  [ look engineif (said("examine", "engine"))  {  [ if on mid-deck near engine  if (posn(ego, 83, 106, 159, 106))    {    [ if metal scraps haven't been picked up yet    if (MetalStatus == 0)      {      print("The engines are running like clock work. You notice some metal "            "scraps on the floor around the engines.");      }    else      {      print("These engines are running like clockwork.");      }    [ the engine man then talks to Jerrod    print("\"Excuse me young man,\" the engine man interrupts, \"I see you "          "noticed my engines.\"");    print("\"These are a couple of beauties. They're nothing but pure power. "          "I'm mighty proud of these engines. I sure am!\"");    [ engineman then pulls the whistle chain    set.cel(oWhistlePull, 1);    force.update(oWhistlePull);    vWhistleStatus = 1;    }  else    {    print("You need to get closer.");    }  }  [ look relief valveif (said("examine", "pressure relief valve"))  {  [ if in mid-deck, near the engine  if (posn(ego, 83, 106, 159, 106))    {    [ if Jerrod hasn't broken the valve    if (!isset(BrokeValve1))      {      print("The valve is rarely used. It is rusty from the moist sea air. The "            "valve is in the open position.");      }    else      {      print("You see that the valve is now broken and in the closed position.");      }    }  else    {    print("You see no valve right here.");    }  }  [ look gaugeif ((said("examine", "gauge") || said("read", "gauge")))  {  [ if on mid-deck, near engine  if (posn(ego, 83, 106, 159, 106))    {    [ if current trip time matches boiler explosion time    if (CurrentTripTime == BoilerTime &&         CurrentTripTime < 20)      {      print("The reading on the gauge does not look good. It is buried in the "            "red zone!");      }    else      {      [ if Jerrod hasn't broken the valve      if (!isset(BrokeValve1))        {        print("The needle is right in the middle of the green.");        }      else        {        print("The needle is approaching the red area and continually rising!");        }      }    }  else    {    print("You see no guage right here.");    }  }  [ turn valve (BAD idea...)if ((said("rotate", "pressure relief valve") ||     said("move", "pressure relief valve") ||     said("feel", "pressure relief valve") ||     said("close", "pressure relief valve")))  {  [ if on mid deck, near engine  if (posn(ego, 83, 106, 159, 106))    {    [ if valve isn't broken    if (!isset(BrokeValve1))      {      [ it is now      print("As you attempt to move the valve, it moves to the closed position "            "and breaks off!");      print("You try to catch the valve handle but it falls onto the floor and "            "rolls out of sight!");      set(BrokeValve1);      [ reset cycle counters to begin countdown to explosion      TripCycles = 21;      TripCycles2 = 0;      TripCycles3 = 0;      [ change current trip point to explosion time      if (CurrentTripTime == TripPoint_9)        {        TripPoint_9 = 21;        BoilerTime = 9;        CurrentTripTime = BoilerTime;        }      if (CurrentTripTime == TripPoint_11)        {        TripPoint_11 = 21;        BoilerTime = 11;        CurrentTripTime = BoilerTime;        }      [ looks like a bug; a duplicate flag is set that does       [ exact same thing as BrokeValve1      set(BrokeValve2);      }    else      {      print("You see that the valve is now broken and in the closed position.");      }    }  else    {    print("You see no valve right here.");    }  }  [ look shovel/look shovel handleif ((said("examine", "shovel") ||     said("examine", "shovel", "handle") ||     said("examine", "handle") ||     said("examine", "shovel handle") ||     said("examine", "beam", "shovel handle")))  {  [ if in boiler room, near the shovel  if (posn(ego, 25, 156, 57, 156))    {    print("This is the spare shovel used by these men to stoke the boiler.");    }  else    {    print("You can't do that from here.");    }  }  [ take shovel/take shovel handleif ((said("acquire", "shovel") ||     said("acquire", "shovel", "handle") ||     said("acquire", "handle") ||     said("acquire", "shovel handle") ||     said("acquire", "beam", "shovel handle")))  {  [ if near the shovel  if (posn(ego, 25, 156, 57, 156))    {    print("I wouldn't try taking that shovel.  The workers might need to use "          "it.");    }  else    {    print("You can't do that from here.");    }  }  [ look aroundif ((said("examine", "around") ||     said("examine", "boat") ||     said("examine")))  {  [ response depends on Jerrod's current location    [ if on main deck  if (EgoY == 57)    {    [ Jerrod is getting blown overboard; not much to see    print("All you can see is your life flashing in front of your eyes!");    }  [ if on stairs coming from captain's deck  if (EgoY < 106 && EgoY > 90)    {    print("You are on the short staircase that connects the main deck with the "          "captain's deck.");    }  [ if on galley/engine room deck  if (EgoY == 106)    {    print("You are on the main deck of the ship. The galley and the engine room "          "are located here.");    }  [ if on ladder leading to boiler room  if (EgoY > 106 && EgoY < 156)    {    print("You are on the ladder that connects the main deck with the lower "          "deck.");    }  [ if in boiler room  if (EgoY == 156)    {    print("You are in the depths of the ship. This is the lower deck. You see "          "coal hold doors and the boiler.");    print("There is a shovel resting against the wall.");    }  }  [ look captain's deck/look bridge deckif ((said("examine", "bridge", "deck") ||     said("examine", "captain", "deck")))  {  print("You can't see much of that deck from here.");  }  [ look top deckif (said("examine", "top", "deck"))  {  print("The top deck is affectionately called the sun, rain, hail, snow, and "        "sleet deck!");  }  [ look galleyif (said("examine", "galley"))  {  print("There is a stove, table, and benches.");  }  [ look metalif ((said("examine", "metal") ||     said("examine", "metal", "deck")))  {  [ if in engine room  if (posn(ego, 83, 106, 159, 106))    {    [ if scraps haven't been picked up yet    if (MetalStatus == 0)      {      print("A few metal scraps are lying on the floor around the engines.");      }    else      {      print("You see no metal scraps.");      }    }  else    {    print("There are no metal scraps right here.");    }  }  [ get metalif ((said("acquire", "metal") ||     said("acquire", "metal", "deck")))  {  [ if Jerrod already has the scraps  if (MetalStatus == 1)    {    print("You already have some metal scraps.");    }  else    {    [ if in engine room    if (posn(ego, 83, 106, 159, 106))      {      [ if scraps are still there      if (MetalStatus == 0)        {        [ get them        print("You scoop up the metal scraps, being careful not to cut your "              "hands, and put them in your pocket.");        [ score three points        currentScore  += 3;        sound(s.AddToScore, fSoundDone);        MetalStatus = 1;        get("Metal scraps");        }      else        {        print("You see no metal scraps.");        }      }    else      {      print("There are no metal scraps right here.");      }    }  }  [ go fishingif ((said("go", "fish") ||     said("go", "fishing") ||     said("fish") ||     said("acquire", "fish") ||     said("catch", "fish")))  {  print("They won't be biting today!");  }  [ look tableif ((said("examine", "table") ||     said("examine", "galley", "table")))  {  [ if on mid deck  if (EgoY == 106)    {    print("At this moment, the table is bare.");    }  else    {    print("You need to get closer.");    }  }  [ look stoveif ((said("examine", "stove") ||     said("examine", "anyword", "stove") ||     said("examine", "stove", "anyword")))  {  [ if on mid deck  if (EgoY == 106)    {    print("The cook works miracles on that stove. He can make anything a meal!");    }  else    {    print("You need to get closer.");    }  }[ look benchif (said("examine", "bench"))  {  [ if on mid deck  if (EgoY == 106)    {    print("There is a man sitting on the bench at the table.");    }  else    {    print("You need to get closer.");    }  }  [ climb ladderif ((said("go", "ladder") ||     said("go", "up", "ladder") ||     said("go", "down", "ladder") ||     said("use", "ladder") ||     said("climb", "ladder")))  {  [ it happens automatically by just moving to it  print("Go ahead and climb on!");  }  [ look riggingif ((said("examine", "rope") ||     said("examine", "rigging")))  {  print("The rigging on the Sea Farer isn't nearly as complicated as on some "        "clippers you've seen.");  }  [ look mastif (said("examine", "mast"))  {  print("The mast is very strong.");  }  [ look smokestackif ((said("examine", "smokestack") ||     said("examine", "smoke", "smokestack")))  {  [ if in engine room  if (posn(ego, 83, 106, 159, 106))    {    print("Attached to the smoke stack is a pressure relief valve and a "          "pressure gauge.");    }  else    {    [ if on top deck (unlike the 'look at door' response,    [ this one doesn't acknowledge that Jerrod is being    [ blown off the ship by the storm)    if (EgoY < 58)      {      print("The whistle is attached to the smoke stack.");      }    else      {      print("You notice nothing unusual about the smoke stack right here.");      }    }  }  [ look whistleif ((said("examine", "whistle") ||     said("examine", "chain") ||     said("examine", "pull", "chain")))  {  if (posn(ego, 0, 52, 159, 106))    {    print("The whistle is attached to the side of the smoke stack. The pull "          "chain reaches clear to the engine room.");    }  else    {    print("You can't do that from here.");    }  }[ look wheelif ((said("examine", "wheel") ||     said("examine", "paddle", "wheel") ||     said("examine", "paddle")))  {  print("The paddles propel the ship without the wind's aid.");  }  [ look ladderif (said("examine", "ladder"))  {  if (posn(ego, 0, 52, 159, 57))    {    print("You can't do that from here.");    }  else    {    print("No one gets to the boiler but by this ladder.");    }  }  [ look manif ((said("examine", "boy") ||     said("examine", "crew") ||     said("examine", "crewman") ||     said("examine", "crew", "boy") ||     said("examine", "worker") ||     said("examine", "cook") ||     said("examine", "engine", "boy") ||     said("examine", "anyword", "boy") ||     said("examine", "boy", "anyword")))  {[ if near any of the people in the scene  if ((posn(ego, 7, 138, 130, 156) ||       posn(ego, 0, 90, 49, 137) ||       posn(ego, 50, 106, 82, 106) ||       posn(ego, 83, 106, 159, 106)))    {    [ men in boiler room    if (posn(ego, 7, 138, 130, 156))      {      print("These men couarageously continue to work, pausing briefly when the "            "ship shakes from the storm.");      }    [ cook in galley    if (posn(ego, 0, 90, 49, 106))      {      print("Just by looking at the ship's cook, you can tell he doesn't have "            "food on his mind.");      }    [ man at table    if (posn(ego, 50, 106, 82, 106))      {      print("The man sitting at the table cringes with each creak and moan of "            "the storm-tossed ship.");      }    [ engine man    if (posn(ego, 83, 106, 159, 106))      {      print("The engine man, just like everyone else on board, has a concerned "            "look on his face.");      }    }  else    {    print("You can't do that from here.");    }  }  [ look doorif (said("examine", "door"))  {  [ if by coal-hold doors or by pilot house door  if ((posn(ego, 7, 138, 130, 156) ||       posn(ego, 0, 52, 159, 57)))    {    [ by pilot house door    if (posn(ego, 0, 52, 159, 57))      {      [ reset haveMatch so generic response will handle this      reset(haveMatch);      }    else      {      print("The coal lies through these doors.");      }    }  else    {    print("You can't do that from here.");    }  }  [ look coal hold doorif ((said("examine", "coal", "hold", "door") ||     said("examine", "coal", "door")))  {  [ if in boiler room  if (posn(ego, 7, 138, 130, 156))    {    print("The coal lies through these doors.");    }  else    {    print("You can't do that from here.");    }  }  [ look coalif (said("examine", "coal"))  {  if (posn(ego, 7, 138, 130, 156))    {    print("Coal is the fuel used in the boiler.");    }  else    {    print("You can't do that from here.");    }  }  [ look boilerif (said("examine", "boiler"))  {  [ if in boiler room  if (posn(ego, 7, 138, 159, 156))    {    print("The boiler produces steam pressure which powers the engines above "          "you.");    }  else    {    print("You can't do that from here.");    }  }  [ talk to manif ((said("speak", "boy") ||     said("speak", "crew") ||     said("speak", "crewman") ||     said("speak", "crew", "boy") ||     said("speak", "worker") ||     said("speak") ||     said("speak", "cook") ||     said("speak", "engine", "boy")))  {  [ if near any of the people in the scene  if ((posn(ego, 7, 138, 130, 156) ||       posn(ego, 15, 106, 49, 106) ||       posn(ego, 50, 106, 82, 106) ||       posn(ego, 83, 106, 159, 106)))    {    [ in boiler room    if (posn(ego, 7, 138, 130, 156))      {      print("The workers agree, \"The last thing on our minds right now is the "            "gold in California. All we want to do is make it through this "            "storm alive!\"");      }    [ mid deck, in galley    if (posn(ego, 15, 106, 49, 106))      {      print("The cook says, \"The only time I don't think about food is when "            "I'm in a storm rounding Cape Horn. I just hope the ship doesn't "            "break up.\"");      }    [ mid deck, by table    if (posn(ego, 50, 106, 82, 106))      {      print("The man at the table says, \"Right now I wish I was back in "            "Pennsylvania with my family. This ship sounds like it is going to "            "come apart!\"");      }    [ mid deck, by engine    if (posn(ego, 83, 106, 159, 106))      {      print("The engine man says, \"I have complete faith in these engines, but "            "I have my doubts about the ship. I hope we make it.\"");      [ engine man pulls whistle chain      set.cel(oWhistlePull, 1);      force.update(oWhistlePull);      vWhistleStatus = 1;      }    }  else    {    print("You can't do that from here.");    }  }  [ look deckif (said("examine", "deck"))  {  [ if in engine room  if (posn(ego, 83, 106, 159, 106))    {    [ if metal scraps haven't been picked up yet    if (MetalStatus == 0)      {      print("Considering all the work that goes on here, the area stays "            "surprisingly clean.  There are a few metal scraps lying on the "            "floor.");      }    else      {      print("Nothing important right here!");      }    }  else    {    print("Nothing important right here!");    }  }  [ look main deckif (said("examine", "main", "deck"))  {  [ (this will print no matter where Jerrod is; they should  [ have used an 'if' statement to check for Jerrod's  [ position)  print("You are on the main deck of the ship. The galley and the engine room "        "are located here.");  }  [ look lower deckif (said("examine", "lower", "deck"))  {  [ (this will print no matter where Jerrod is; they should  [ have used an 'if' statement to check for Jerrod's  [ position)  print("You are in the depths of the ship. This is the lower deck. You see "        "coal hold doors and the boiler.");  }  [ look skyif (said("examine", "sky"))  {  [ (this will print no matter where Jerrod is; they should  [ have used an 'if' statement to check for Jerrod's  [ position)  print("The sky is dark and dreary.");  }  Done:[ always call the main timing logiccall(lgc.CapeTripTiming);return();[ **************************************[ MESSAGES[ **************************************#message 1 "You can't do that from here."#message 2 "The engines are running like clock work. You notice some metal scraps on the floor around the engines."#message 3 "\"Excuse me young man,\" the engine man interrupts, \"I see you noticed my engines.\""#message 7 "At this moment, the table is bare."#message 9 "The cook works miracles on that stove. He can make anything a meal!"#message 10 "You need to get closer."#message 12 "The cook says, \"We have plenty of provisions right now. If we start to run low, then we'll invite the ship's mascot to dinner!\""#message 13 "\"These are a couple of beauties. They're nothing but pure power. I'm mighty proud of these engines. I sure am!\""#message 14 "The door is very warm to the touch."#message 15 "The door is cool to the touch."#message 16 "The worker is in the way."#message 17 "There is no door close enough."#message 19 "The valve is rarely used. It is rusty from the moist sea air. The valve is in the open position."#message 20 "You see that the valve is now broken and in the closed position."#message 21 "You see no valve right here."#message 22 "You see no guage right here."#message 23 "The reading on the gauge does not look good. It is buried in the red zone!"#message 24 "The needle is right in the middle of the green."#message 25 "The needle is approaching the red area and continually rising!"#message 26 "As you attempt to move the valve, it moves to the closed position and breaks off!"#message 27 "You try to catch the valve handle but it falls onto the floor and rolls out of sight!"#message 29 "The sky is dark and dreary."#message 32 "This is the spare shovel used by these men to stoke the boiler."#message 34 "I wouldn't try taking that shovel.  The workers might need to use it."#message 36 "All you can see is your life flashing in front of your eyes!"#message 40 "You are on the short staircase that connects the main deck with the captain's deck."#message 43 "There is a stove, table, and benches."#message 48 "Considering all the work that goes on here, the area stays surprisingly clean.  There are a few metal scraps lying on the floor."#message 50 "You are on the ladder that connects the main deck with the lower deck."#message 51 "You are in the depths of the ship. This is the lower deck. You see coal hold doors and the boiler."#message 52 "A few metal scraps are lying on the floor around the engines."#message 53 "There are no metal scraps right here."#message 54 "You already have some metal scraps."#message 55 "You scoop up the metal scraps, being careful not to cut your hands, and put them in your pocket."#message 56 "The cook says, \"The only time I don't think about food is when I'm in a storm rounding Cape Horn. I just hope the ship doesn't break up.\""#message 57 "The man at the table says, \"Right now I wish I was back in Pennsylvania with my family. This ship sounds like it is going to come apart!\""#message 59 "There is a shovel resting against the wall."#message 62 "You notice nothing unusual about the smoke stack right here."#message 73 "The engine man says, \"I have complete faith in these engines, but I have my doubts about the ship. I hope we make it.\""#message 77 "They won't be biting today!"#message 79 "Just by looking at the ship's cook, you can tell he doesn't have food on his mind."#message 80 "This rock may have done serious damage to the hull of the ship."#message 81 "The captain orders the crew and passengers to abandon ship, but it is too late."#message 82 "The lowest level of the ship fills with water and the ship is on the way down in some of the most frigid water in the world."#message 83 "The man sitting at the table cringes with each creak and moan of the storm-tossed ship."#message 84 "The iceberg once again pounds the side of the ship.  This time the force may be too much for the hull to withstand."#message 85 "The wretched iceberg punctures the shell of this ship, flooding the lower levels of the ship."#message 86 "I am afraid the end is near."#message 87 "As you open the coal hold door you notice the door is very warm, nearly hot, to the touch."#message 88 "The engine man, just like everyone else on board, has a concerned look on his face."#message 89 "The whistle is attached to the smoke stack."#message 90 "Go ahead and climb on!"#message 91 "The rigging on the Sea Farer isn't nearly as complicated as on some clippers you've seen."#message 92 "The mast is very strong."#message 93 "Attached to the smoke stack is a pressure relief valve and a pressure gauge."#message 94 "The whistle is attached to the side of the smoke stack. The pull chain reaches clear to the engine room."#message 95 "The paddles propel the ship without the wind's aid."#message 96 "No one gets to the boiler but by this ladder."#message 97 "These men couarageously continue to work, pausing briefly when the ship shakes from the storm."#message 98 "The coal lies through these doors."#message 102 "Coal is the fuel used in the boiler."#message 103 "The boiler produces steam pressure which powers the engines above you."#message 104 "The workers agree, \"The last thing on our minds right now is the gold in California. All we want to do is make it through this storm alive!\""#message 105 "The door is not locked; walk right in!"#message 106 "Just walk away from it!"#message 107 "Nothing important right here!"#message 109 "You can't see much of that deck from here."#message 110 "The top deck is affectionately called the sun, rain, hail, snow, and sleet deck!"#message 111 "You are on the main deck of the ship. The galley and the engine room are located here."#message 112 "There is a man sitting on the bench at the table."#message 113 "Located here are two engines and a man to operate them. The smoke stack goes between the engines."#message 114 "These engines are running like clockwork."#message 115 "You see no metal scraps."