[***********************************************************[[ rm.SuttersMill[[ This is the famous Sutters Mill. A worker is sawing logs.[ Nothing else is going on in this room.[[***********************************************************[ **************************************[ LOCAL DEFINES[ **************************************#define oSaw                         o1#define oWorker                      o2#define oWheel                       o3#define vWorkerStatus              v220#define vTmpVal                    v221#define vPanTimer                  v222#define vPanStatus                 v223#define fWorkerMoved               f220#define fAddedBoard                f221[ **************************************[ FIRST CYCLE ONLY[ **************************************if (isset(newRoom))  {  [ load the mule logic  load.logics(lgc.Mule);    [ load views used in the room  load.view(vw.JerrodCA);  load.view(vw.WadingJerrodCA);  load.view(vw.SawmillArt);  load.view(vw.Panning);    [ load and draw the current room picture  load.pic(currentRoom);  draw.pic(currentRoom);    [ add a board and a log to the image  add.to.pic(vw.SawmillArt, 2, 3, 128, 87, 7, 7);  add.to.pic(vw.SawmillArt, 2, 2, 146, 79, 7, 7);    [ horizon is set to 80 in river rooms  set.horizon(80);    [ worker 1 is pushing log into the saw  animate.obj(oWorker);  set.view(oWorker, vw.SawmillArt);  [ (uses a single cel, no animation though)  set.loop(oWorker, 2);  fix.loop(oWorker);  set.cel(oWorker, 0);  set.priority(oWorker, 6);  ignore.horizon(oWorker);  [ add worker to screen by the saw  position(oWorker, 106, 54);  draw(oWorker);  stop.cycling(oWorker);  [ set flag and status so worker starts his sequence  set(fWorkerMoved);  vWorkerStatus = 1;    [ the saw  animate.obj(oSaw);  set.view(oSaw, vw.SawmillArt);  set.loop(oSaw, 0);  set.priority(oSaw, 6);  ignore.horizon(oSaw);  ignore.objs(oSaw);  [ draw saw in the sawmill  position(oSaw, 94, 59);  draw(oSaw);    [ paddle wheel  animate.obj(oWheel);  set.view(oWheel, vw.SawmillArt);  set.loop(oWheel, 1);  set.priority(oWheel, 4);  ignore.horizon(oWheel);  [ draw paddle wheel under the mill  position(oWheel, 69, 101);  draw(oWheel);    [ Jerrod is in normal California attire  animate.obj(ego);  set.view(ego, vw.JerrodCA);  [ unless he's in the tailrace  if (isset(InTailrace))    {    [ switch him to wading view    set.priority(ego, 10);    set.view(ego, vw.WadingJerrodCA);    }      [ if Jerrod is is on right edge  if (posn(ego, 148, 0, 159, 115))    {    [ adjust his position to middle of road    position(ego, 151, 120);    }  draw(ego);    [ if Jerrod has a mule  if ((has(LazyMule) || has("James' ol' mule")))    {    [ do mule initialization steps    call(lgc.Mule);    }      [ now show the picture  show.pic();    [ clear the custom status line  clear.lines(24, 24, BLACK);    [ not necessary to reset this flag; AGI resets it  [ automatically  reset(newRoom);  }[ **************************************[ EVERY CYCLE[ **************************************[ if panning timer is activeif (vPanTimer > 0)  {  [ increment tiemr  ++vPanTimer;  }  [ after 15 cycles of panningif (vPanTimer == 15 && vPanStatus == 1)  {  [ reset timer and status  vPanTimer = 0;  vPanStatus = 0;  [ there is not more gold at Sutters Mill  print("Nothin'!");  [ switch back to wading view  set.view(ego, vw.WadingJerrodCA);  [ Jerrod can continue moving  start.motion(ego);  [ reset the cycle at rest flag  reset(CycleAtRest);  }  [ if worker is ready to start another sawing sequenceif (isset(fWorkerMoved) && vWorkerStatus == 1)  {  [ reset flag  reset(fWorkerMoved);  [ advance to next stage  vWorkerStatus = 2;  [ change cel to show worker pushing the log  set.cel(oWorker, 0);  [ move and cycle time are set to slow value  vTmpVal = 4;  cycle.time(oWorker, vTmpVal);  step.time(oWorker, vTmpVal);  [ start moving worker and log past saw  move.obj(oWorker, 103, 54, 1, fWorkerMoved);  }  [ when worker finishes first leg of pathif (isset(fWorkerMoved) && vWorkerStatus == 2)  {  [ reset flag  reset(fWorkerMoved);  [ advance to next stage  vWorkerStatus = 3;  [ continue moving past saw  move.obj(oWorker, 99, 55, 1, fWorkerMoved);  }  [ when worker finishes second leg of pathif (isset(fWorkerMoved) && vWorkerStatus == 3)  {  [ reset the flag  reset(fWorkerMoved);  [ advance to next status  vWorkerStatus = 4;  [ move to end of saw cut  move.obj(oWorker, 93, 56, 1, fWorkerMoved);  }  [ when worker finishes the cutif (isset(fWorkerMoved) && vWorkerStatus == 4)  {  [ reset flag  reset(fWorkerMoved);  [ advance to next status  vWorkerStatus = 5;  [ if a board has not been added to screen  if (!isset(fAddedBoard))    {    [ add one now    set(fAddedBoard);    add.to.pic(vw.SawmillArt, 2, 1, 101, 66, 6, 6);    }  [ change cel to show worker bring log back to front of saw  set.cel(oWorker, 4);  [ walking back goes a bit faster  vTmpVal = 2;  cycle.time(oWorker, vTmpVal);  step.time(oWorker, vTmpVal);  [ now walk back to start in two stages  move.obj(oWorker, 98, 54, 1, fWorkerMoved);  }  [ when worker is halfway back to startif (isset(fWorkerMoved) && vWorkerStatus == 5)  {  [ reset flag  reset(fWorkerMoved);  [ advance status  vWorkerStatus = 6;  [ continue moving worker to start  move.obj(oWorker, 102, 53, 1, fWorkerMoved);  }    [ when worker is at last step of going backif (isset(fWorkerMoved) && vWorkerStatus == 6)  {  [ reset flag  reset(fWorkerMoved);  [ set status to begin another sawing cycle  vWorkerStatus = 1;  [ move to starting position  move.obj(oWorker, 106, 54, 1, fWorkerMoved);  }  [ **************************************[ PROCESS PLAYER INPUT[ **************************************[ if player hasn't provided input no need to do said testsif (!isset(haveInput))  {  goto(CheckExits);  }  [ look around/lookif ((said("examine", "around") || said("examine")))  {  print("This is Sutter's Mill!  Water flowin' through the tailrace powers the "        "sawmill!");  print("The town of Coloma is farther to the east.");  }  [ look grassif (said("examine", "grass"))  {  print("This is just wild grass.");  }  [ look treeif (said("examine", "forest"))  {  print("The only tree nearby is being reduced to lumber.");  }  [ look rockif (said("examine", "rock"))  {  print("This is just another rock.");  }  [ look river/look tailraceif ((said("examine", "creek") ||     said("examine", "water") ||     said("examine", "american", "creek") ||     said("examine", "tailrace")))  {  print("The tailrace supplies the water and power to operate the sawmill.  In "        "the distance is the American River!");  }  [ look roadif ((said("examine", "path") ||     said("examine", "main", "path") ||     said("examine", "main")))  {  print("This is the beginnin' of Coloma's Main Street.");  }  [ look sawmillif ((said("examine", "sawmill") ||     said("examine", "sutter", "sawmill") ||     said("examine", "looked at") ||     said("examine", "looked at", "mill") ||     said("examine", "mill")))  {  print("This is a facinatin' piece of engineerin'!");  }  [ look logif ((said("examine", "log") || said("examine", "beam")))  {  print("There are logs and wood lyin' all over 'round here!");  }  [ look manif ((said("examine", "boy") || said("examine", "worker")))  {  print("This man has a hazardous job!!");  }  [ talk to manif ((said("speak", "boy") ||     said("speak") ||     said("speak", "worker")))  {  print("The man cain't hear ya over the roar of the water and the sound of the "        "sawmill!");  }  [ use pan/pan for goldif ((said("use", "pan") ||     said("pan", "gold") ||     said("pan")))  {  [ if Jerrod has a gold pan  if (has("Gold pan"))    {    [ if Jerrod is in the tailrace    if (isset(InTailrace))      {      [ change to panning view      set.view(ego, vw.Panning);      set.cel(ego, 0);      [ Jerrod doesn't move while panning      stop.motion(ego);      [ start timer and set panning status      vPanTimer = 1;      vPanStatus = 1;      [ allow ego object to cycle at rest      set(CycleAtRest);      [ begin cycling (panning)      start.cycling(ego);      }    else      {      print("Ya cain't be pannin' unless yer in the water!");      }    }  else    {    print("If yer gonna pan ya gotta get one!!");    }  }  [ use shovel/dig for goldif ((said("use", "shovel") ||     said("dig", "gold") ||     said("dig") ||     said("dig", "hole")))  {  [ if Jerrod has a shovel  if (has("Shovel"))    {    print("Don't dig up the town!  Do that somewhere else!!");    }  else    {    print("No shovel, no diggin'!");    }  }  [ get log/get timberif ((said("acquire", "log") ||     said("acquire", "beam")))  {  print("Ya have no need fer it.");  }  [ look paddle wheelif ((said("examine", "paddle", "wheel") ||     said("examine", "paddle")))  {  print("The water turns the paddle wheel and powers the sawmill.");  }  [ **************************************[ CHECK FOR AN EXIT CONDITION[ **************************************[ (unlike most other logics, the check for an exit condition[ happens LAST in this room)CheckExits:[ if Jerrod has a muleif ((has(LazyMule) || has("James' ol' mule")))  {  [ process mule related commands before checking exits  call(lgc.Mule);  }  if (edgeEgoHit != NOT_HIT)  {  [ if at left edge  if (edgeEgoHit == LEFT_EDGE)    {    [ go back to tailrace    --WildernessX;    new.room(rm.MillTailrace); [ ##LE001##    }  [ if at right edge  if (edgeEgoHit == RIGHT_EDGE)    {    [ go into town    ++WildernessX;    new.room(rm.ColomaWestEntrance); [ ##LE002##    }  [ if at bottom edge  if (edgeEgoHit == BOTTOM_EDGE)    {    [ go into the wilderness    ++WildernessY;    new.room(lgc.Wilderness); [ ##LE003##    }  }  return();[ **************************************[ MESSAGES[ **************************************#message 1 "This is Sutter's Mill!  Water flowin' through the tailrace powers the sawmill!"#message 2 "This is just wild grass."#message 3 "The only tree nearby is being reduced to lumber."#message 4 "This is just another rock."#message 5 "The tailrace supplies the water and power to operate the sawmill.  In the distance is the American River!"#message 6 "This is the beginnin' of Coloma's Main Street."#message 7 "This is a facinatin' piece of engineerin'!"#message 8 "There are logs and wood lyin' all over 'round here!"#message 9 "This man has a hazardous job!!"#message 10 "The man cain't hear ya over the roar of the water and the sound of the sawmill!"#message 11 "Nothin'!"#message 12 "Ya cain't be pannin' unless yer in the water!"#message 13 "If yer gonna pan ya gotta get one!!"#message 14 "The town of Coloma is farther to the east."#message 15 "Ya have no need fer it."#message 16 "The water turns the paddle wheel and powers the sawmill."#message 40 "Don't dig up the town!  Do that somewhere else!!"#message 41 "No shovel, no diggin'!"