[***********************************************************[[ cs.Utah[[ This logic manages the wagon trip cutscenes as Jerrod [ travels across the desert like landscape in Utah. The [ cutscene gets interrupted by a short interaction at the[ Green River crossing.[[***********************************************************[ **************************************[ LOCAL DEFINES[ **************************************#define oCursor                      o1#define oMapExpander                 o2#define oWagon                       o3#define oTracks                      o4#define oSceneWindow                 o5#define vMapPic                    v220#define vOvlPic                    v221#define vMapStage                  v222#define vMapTimer                  v223#define vCursorStage               v224[ v225 is not used#define vTrackSpeed                v226#define vTmpY                      v227#define vFlashTimer                v228#define vNormalSpeed               v229#define vSceneTimer                v230#define vSceneStage                v231#define vMsgStatus                 v232#define vTimeStatus                v233#define fCursorMoved               f220#define fFlashOn                   f221[ **************************************[ FIRST CYCLE ONLY[ **************************************if (isset(newRoom))  {  [ pictures used in this cutscene are the main USA map and  [ the Utah detail map  vMapPic = map.USA;  vOvlPic = map.UtahSmall;    [ normal cursor speed is 2  vNormalSpeed = 2;    [ load the main timing logic  load.logics(lgc.WagonTripTiming);    [ load views used in the room  load.view(vw.MapZoom);  load.view(vw.MapTracks);  load.view(vw.MapArt);    [ load the large map of Utah  load.pic(currentRoom);    [ load the small Utah overlay  load.pic(vOvlPic);  [ load the USA map and draw it to start the scene  load.pic(vMapPic);  draw.pic(vMapPic);  discard.pic(vMapPic);    [ if this is first time showing the map  if (CurrentTripTime == 6)  [ here, the programmers use the value '6' instead of the  [ trip variable TripPoint_9 not sure why they were  [ inconsistent like this    {    [ start with map stage 1    vMapStage = 1;        [ add blocks to the USA map to show the track progress    [ up to this point    add.to.pic(vw.MapTracks, 5, 0, 131, 53, 5, 5);    add.to.pic(vw.MapTracks, 5, 0, 120, 54, 5, 5);    add.to.pic(vw.MapTracks, 5, 0, 109, 57, 5, 5);    add.to.pic(vw.MapTracks, 5, 0, 109, 45, 5, 5);    add.to.pic(vw.MapTracks, 5, 0, 105, 43, 5, 5);    add.to.pic(vw.MapTracks, 5, 0, 103, 55, 5, 5);    add.to.pic(vw.MapTracks, 5, 0, 98, 67, 5, 5);    add.to.pic(vw.MapTracks, 5, 0, 96, 79, 5, 5);    add.to.pic(vw.MapTracks, 5, 0, 89, 91, 5, 5);    add.to.pic(vw.MapTracks, 5, 0, 86, 92, 5, 5);    add.to.pic(vw.MapTracks, 0, 0, 73, 86, 9, 9);    add.to.pic(vw.MapTracks, 2, 0, 73, 86, 9, 9);    add.to.pic(vw.MapTracks, 0, 1, 58, 73, 9, 9);    add.to.pic(vw.MapTracks, 2, 1, 58, 73, 9, 9);    add.to.pic(vw.MapTracks, 0, 2, 46, 63, 9, 9);    add.to.pic(vw.MapTracks, 2, 2, 46, 63, 9, 9);    }  [ if this is second time on this detail map  if (CurrentTripTime == 8)  [ here, the programmers use the value '8' instead of the  [ trip variable TripPoint_11 not sure why they were  [ inconsistent like this    {    [ leave vMapStage at zero, so the map overlay sequence    [ gets skipped        [ add the large map overlay    overlay.pic(currentRoom);    discard.pic(currentRoom);    [ and add blocks to show progress on the overlay up to    [ this point    add.to.pic(vw.MapTracks, 5, 0, 147, 90, 5, 5);    add.to.pic(vw.MapTracks, 5, 0, 136, 98, 5, 5);    add.to.pic(vw.MapTracks, 5, 0, 125, 98, 5, 5);    add.to.pic(vw.MapTracks, 5, 0, 114, 98, 5, 5);    }    [ scenery window, using the mountain art  animate.obj(oSceneWindow);  set.view(oSceneWindow, vw.MapArt);  set.loop(oSceneWindow, 8);  set.cel(oSceneWindow, 0);  set.priority(oSceneWindow, 9);  position(oSceneWindow, 82, 73);    [ wagon used in the scenery detail  animate.obj(oWagon);  set.view(oWagon, vw.MapArt);  set.loop(oWagon, 1);  set.priority(oWagon, 11);  position(oWagon, 88, 60);    [ animal tracks to go with wagon  animate.obj(oTracks);  set.view(oTracks, vw.MapArt);  set.loop(oTracks, 2);  set.priority(oTracks, 10);  position(oTracks, 85, 62);    [ the track cursor  animate.obj(oCursor);  set.view(oCursor, vw.MapTracks);  set.loop(oCursor, 4);  fix.loop(oCursor);  set.priority(oCursor, 7);  ignore.horizon(oCursor);  ignore.objs(oCursor);    [ if this is first time in this cutscene  if (CurrentTripTime == TripPoint_9) [ TripPoint_9 = 6    {    [ cursor starts at right edge, and it's not visible yet    position(oCursor, 149, 87);    }  [ if after the Green River room,  if (CurrentTripTime == TripPoint_11) [ TripPoint_11 = 8    {    [ cursor is partway across the screen    position(oCursor, 110, 100);    [ and is visible, at cursor stage 3    draw(oCursor);    set(fCursorMoved);    vCursorStage = 3;    }      [ the map expander object  animate.obj(oMapExpander);  set.view(oMapExpander, vw.MapTracks);  set.loop(oMapExpander, 2);  set.cel(oMapExpander, 3);  fix.loop(oMapExpander);  position(oMapExpander, 34, 61);  set.priority(oMapExpander, 9);  ignore.horizon(oMapExpander);  ignore.objs(oMapExpander);  stop.cycling(oMapExpander);    [ now show the picture  show.pic();  }  [ **************************************[ EVERY CYCLE[ **************************************[ if cursor has just started moving (in both first and[ second time through)if ((posn(oCursor, 149, 88, 149, 88) ||     posn(oCursor, 109, 100, 109, 100)))  {  [ if scene sequence hasn't started yet  if (vSceneStage == 0)    {    [ advance to next stage    vSceneStage = 1;    [ set cursor step time to normal speed    step.time(oCursor, vNormalSpeed);    [ show scene window, with smallest image    draw(oSceneWindow);    stop.cycling(oSceneWindow);    }  }  [ if at scene stage 1if (vSceneStage == 1)  {  [ increment timer  ++vSceneTimer;  [ after ten cycles  if (vSceneTimer == 10)    {    [ reset timer    vSceneTimer = 0;    [ advance to next stage    vSceneStage = 2;    [ show mid size image of scene window    set.cel(oSceneWindow, 1);    }  }  [ if at scene stage 2if (vSceneStage == 2)  {  [ increment timer  ++vSceneTimer;  [ after ten cycles  if (vSceneTimer == 10)    {    [ reset timer    vSceneTimer = 0;    [ advance to next stage    vSceneStage = 3;    [ show scene window with full size image    set.cel(oSceneWindow, 2);    [ force it to update right now    force.update(oSceneWindow);    [ draw the wagon    draw(oWagon);    [ set track speed to 2    vTrackSpeed = 2;    cycle.time(oTracks, vTrackSpeed);    [ then show the animal tracks    draw(oTracks);    }  }  [ in first map stageif (vMapStage == 1)  {  [ increment map timer  ++vMapTimer;    [ flash timer controls speed that the red box flashes  [ between on and off  ++vFlashTimer;    [ create flashing red box by drawing/erasing the box every  [ four cycles (why not just use a view, with a cycle time  [ of four?)  if (vFlashTimer == 4)    {    vFlashTimer = 0;    toggle(fFlashOn);    if (isset(fFlashOn))      {      draw(oMapExpander);      }    else      {      erase(oMapExpander);      }    }      [ after 80 cycles  if (vMapTimer == 80)    {    [ reset timer    vMapTimer = 0;    [ advance to next stage    vMapStage = 2;    [ change expander object to show first cel of the Utah    [ detail map    set.priority(oMapExpander, 9);    set.view(oMapExpander, vw.MapZoom);    set.loop(oMapExpander, 3);    fix.loop(oMapExpander);    set.cel(oMapExpander, 0);    position(oMapExpander, 23, 82);    [ show it on screen    draw(oMapExpander);    }  }  [ if in map stage 2if (vMapStage == 2)  {  [ increment timer  ++vMapTimer;  [ after 15 cycles  if (vMapTimer == 15)    {    [ reset timer    vMapTimer = 0;    [ advance to next stage    vMapStage = 3;    [ show mid size image of Utah detail map    set.cel(oMapExpander, 1);    }  }[ if in map stage 3if (vMapStage == 3)  {  [ increment timer  ++vMapTimer;  [ after 15 cycles  if (vMapTimer == 15)    {    [ reset timer    vMapTimer = 0;    [ advance to next stage    vMapStage = 4;    [ show largest cel in expanding map    set.cel(oMapExpander, 2);    }  }  [ if in map stage 4if (vMapStage == 4)  {  [ increment timer  ++vMapTimer;  [ after five cycles  if (vMapTimer == 5)    {    [ reset timer    vMapTimer = 0;    [ advance to next stage    vMapStage = 5;    [ add the small Utah overlay    overlay.pic(vOvlPic);    discard.pic(vOvlPic);    [ remove the expanding map object    erase(oMapExpander);    [ show the picture to force it to update    show.pic();    }  }  [ if in map stage 5if (vMapStage == 5)  {  [ increment timer  ++vMapTimer;  [ after five cycles  if (vMapTimer == 5)    {    [ reset timer    vMapTimer = 0;    [ advance to end stage    vMapStage = 6;    [ add the large Utah overlay    overlay.pic(currentRoom);    discard.pic(currentRoom);    [ show picture to force update    show.pic();        [ now draw cursor on screen    draw(oCursor);    [ and begin moving it    move.obj(oCursor, 149, 89, 1, fCursorMoved);    vCursorStage = 1;    }  }  [ need to periodically adjust cursor's destination so it[ follows the correct path across the screenif (isset(fCursorMoved) && vCursorStage == 1)  {  reset(fCursorMoved);  vCursorStage = 2;  move.obj(oCursor, 143, 92, 1, fCursorMoved);  }if (isset(fCursorMoved) && vCursorStage == 2)  {  reset(fCursorMoved);  vCursorStage = 3;  move.obj(oCursor, 141, 95, 1, fCursorMoved);  }if (isset(fCursorMoved) && vCursorStage == 3)  {  reset(fCursorMoved);  vCursorStage = 4;  move.obj(oCursor, 108, 100, 1, fCursorMoved);  }  [ if in first time through the scene, when at stage 4if (posn(oCursor, 113, 100, 113, 100) &&     CurrentTripTime == TripPoint_9 &&     vCursorStage == 4)  {  [ leave the cutscene to show the Green River room  set(ContinueJourney);  }  if (isset(fCursorMoved) && vCursorStage == 4)  {  reset(fCursorMoved);  vCursorStage = 5;  move.obj(oCursor, 106, 109, 1, fCursorMoved);  }if (isset(fCursorMoved) && vCursorStage == 5)  {  reset(fCursorMoved);  vCursorStage = 6;  move.obj(oCursor, 100, 110, 1, fCursorMoved);  }if (isset(fCursorMoved) && vCursorStage == 6)  {  reset(fCursorMoved);  vCursorStage = 7;  move.obj(oCursor, 96, 115, 1, fCursorMoved);  }if (isset(fCursorMoved) && vCursorStage == 7)  {  reset(fCursorMoved);  vCursorStage = 8;  move.obj(oCursor, 90, 116, 1, fCursorMoved);  }if (isset(fCursorMoved) && vCursorStage == 8)  {  [ need to make a minor adjustment to cursor shape and  [ position to account for the shape of the trail  reset(fCursorMoved);  vCursorStage = 9;  vTrackSpeed = -6; [ 250;  vTmpY = 7;  reposition(oCursor, vTrackSpeed, vTmpY);  set.loop(oCursor, 3);  move.obj(oCursor, 84, 105, 1, fCursorMoved);  }if (isset(fCursorMoved) && vCursorStage == 9)  {  reset(fCursorMoved);  vCursorStage = 10;  move.obj(oCursor, 79, 105, 1, fCursorMoved);  }if (isset(fCursorMoved) && vCursorStage == 10)  {  reset(fCursorMoved);  vCursorStage = 11;  move.obj(oCursor, 70, 77, 1, fCursorMoved);  }if (isset(fCursorMoved) && vCursorStage == 11)  {  reset(fCursorMoved);  vCursorStage = 12;  move.obj(oCursor, 67, 76, 1, fCursorMoved);  }if (isset(fCursorMoved) && vCursorStage == 12)  {  reset(fCursorMoved);  vCursorStage = 13;  move.obj(oCursor, 60, 56, 1, fCursorMoved);  }if (isset(fCursorMoved) && vCursorStage == 13)  {  reset(fCursorMoved);  vCursorStage = 14;  move.obj(oCursor, 43, 47, 1, fCursorMoved);  }if (isset(fCursorMoved) && vCursorStage == 14)  {  [ another adjustment to cursor shape and position to  [ account for shape of trail  reset(fCursorMoved);  vCursorStage = 15;  vTrackSpeed = -9; [ 247;  vTmpY = -4 ; [ 252;  reposition(oCursor, vTrackSpeed, vTmpY);  set.loop(oCursor, 4);  move.obj(oCursor, 32, 64, 1, fCursorMoved);  }if (isset(fCursorMoved) && vCursorStage == 15)  {  reset(fCursorMoved);  vCursorStage = 16;  move.obj(oCursor, 25, 73, 1, fCursorMoved);  }if (isset(fCursorMoved) && vCursorStage == 16)  {  reset(fCursorMoved);  vCursorStage = 17;  move.obj(oCursor, 20, 75, 1, fCursorMoved);  }if (isset(fCursorMoved) && vCursorStage == 17)  {  reset(fCursorMoved);  vCursorStage = 18;  move.obj(oCursor, 12, 105, 1, fCursorMoved);  }if (isset(fCursorMoved) && vCursorStage == 18)  {  reset(fCursorMoved);  vCursorStage = 19;  move.obj(oCursor, 8, 107, 1, fCursorMoved);  }if (isset(fCursorMoved) && vCursorStage == 19)  {  reset(fCursorMoved);  vCursorStage = 20;  move.obj(oCursor, 7, 111, 1, fCursorMoved);  }if (isset(fCursorMoved) && vCursorStage == 20)  {  reset(fCursorMoved);  vCursorStage = 21;  move.obj(oCursor, 2, 116, 1, fCursorMoved);  }[ when cursor gets to left edgeif (isset(fCursorMoved) && vCursorStage == 21)  {  [ continue on to next scene  set(ContinueJourney);  }  [ as cursor moves across the screen, add blocks to the[ picture to keep previous portions of the track permanently[ visibleif (posn(oCursor, 147, 91, 147, 91))  {  add.to.pic(vw.MapTracks, 5, 2, 147, 91, 6, 6);  }if (posn(oCursor, 136, 100, 136, 100))  {  add.to.pic(vw.MapTracks, 5, 2, 136, 100, 6, 6);  }if (posn(oCursor, 125, 100, 125, 100))  {  add.to.pic(vw.MapTracks, 5, 2, 125, 100, 6, 6);  }if (posn(oCursor, 114, 100, 114, 100))  {  add.to.pic(vw.MapTracks, 5, 2, 114, 100, 6, 6);  }if (posn(oCursor, 106, 107, 106, 107))  {  add.to.pic(vw.MapTracks, 5, 2, 106, 107, 6, 6);  }if (posn(oCursor, 97, 113, 97, 113))  {  add.to.pic(vw.MapTracks, 5, 2, 97, 113, 6, 6);  }if (posn(oCursor, 90, 116, 90, 116))  {  add.to.pic(vw.MapTracks, 5, 2, 90, 116, 6, 6);  }if (posn(oCursor, 84, 112, 84, 112))  {  add.to.pic(vw.MapTracks, 5, 1, 84, 112, 6, 6);  }if (posn(oCursor, 77, 103, 77, 103))  {  add.to.pic(vw.MapTracks, 5, 1, 77, 103, 6, 6);  }if (posn(oCursor, 70, 91, 70, 91))  {  add.to.pic(vw.MapTracks, 5, 1, 70, 91, 6, 6);  }if (posn(oCursor, 70, 79, 70, 79))  {  add.to.pic(vw.MapTracks, 5, 1, 70, 79, 6, 6);  }if (posn(oCursor, 61, 70, 61, 70))  {  add.to.pic(vw.MapTracks, 5, 1, 61, 70, 6, 6);  }if (posn(oCursor, 60, 58, 60, 58))  {  add.to.pic(vw.MapTracks, 5, 1, 60, 58, 6, 6);  }if (posn(oCursor, 51, 47, 51, 47))  {  add.to.pic(vw.MapTracks, 5, 1, 51, 47, 6, 6);  }if (posn(oCursor, 43, 47, 43, 47))  {  add.to.pic(vw.MapTracks, 5, 1, 43, 47, 6, 6);  }if (posn(oCursor, 32, 54, 32, 54))  {  add.to.pic(vw.MapTracks, 5, 2, 32, 54, 6, 6);  }if (posn(oCursor, 30, 66, 30, 66))  {  add.to.pic(vw.MapTracks, 5, 2, 30, 66, 6, 6);  }if (posn(oCursor, 21, 75, 21, 75))  {  add.to.pic(vw.MapTracks, 5, 2, 21, 75, 6, 6);  }if (posn(oCursor, 12, 86, 12, 86))  {  add.to.pic(vw.MapTracks, 5, 2, 12, 86, 6, 6);  }if (posn(oCursor, 12, 98, 12, 98))  {  add.to.pic(vw.MapTracks, 5, 2, 12, 98, 6, 6);  }if (posn(oCursor, 7, 110, 7, 110))  {  add.to.pic(vw.MapTracks, 5, 2, 7, 110, 6, 6);  }[ as the cursor moves across the screen, update the total[ game travel timeif (posn(oCursor, 131, 100, 131, 100) && vTimeStatus == 0)  {  ++vTimeStatus;  GameDays  += 3;  }if (posn(oCursor, 106, 104, 106, 104) && vTimeStatus == 0)  {  ++vTimeStatus;  GameDays  += 3;  }if (posn(oCursor, 84, 122, 84, 122) && vTimeStatus == 1)  {  ++vTimeStatus;  GameDays  += 3;  }if (posn(oCursor, 70, 92, 70, 92) && vTimeStatus == 2)  {  ++vTimeStatus;  GameDays  += 3;  }if (posn(oCursor, 60, 61, 60, 61) && vTimeStatus == 3)  {  ++vTimeStatus;  GameDays  += 3;  }if (posn(oCursor, 45, 47, 45, 47) && vTimeStatus == 4)  {  ++vTimeStatus;  GameDays  += 3;  }if (posn(oCursor, 21, 75, 21, 75) && vTimeStatus == 5)  {  ++vTimeStatus;  GameDays  += 3;  }if (posn(oCursor, 8, 107, 8, 107) && vTimeStatus == 6)  {  ++vTimeStatus;  GameDays  += 3;  }  [ as cursor moves across the screen, display periodic[ messages to update player on the tripif (posn(oCursor, 132, 100, 132, 100) && vMsgStatus == 0)  {  ++vMsgStatus;  if (!isset(HideTripMsgs))    {    print("Your wagon train is now entering an arid stretch of land!! It will "          "be fifty miles before you or the animals will be able to taste the "          "refreshing cool water of the Green River.");    print("Every container is filled to the brim with the life-giving water "          "that will be so valuable for the next few days.");    }  }if (posn(oCursor, 114, 100, 114, 100) && vMsgStatus == 1)  {  ++vMsgStatus;  if (!isset(HideTripMsgs))    {    print("The trail across this desolate wasteland is strewn with dead oxen.");    print("The animals, as well as you, are parched and desperately in need of "          "water.");    }  }  [ different stage 0/1 messages for the second time in this[ sceneif (posn(oCursor, 106, 107, 106, 107) && vMsgStatus == 0)  {  ++vMsgStatus;  if (!isset(HideTripMsgs))    {    print("During this section of the trail, the going gets tough. There are no "          "rivers going your direction to follow.");    print("It is just seemingly endless miles of gravel, rocks, sand, dust, "          "steep hills to climb, and difficult descents.");    print("As difficult as it is to keep on going, you have to keep those big "          "wheels turning!!");    }  }if (posn(oCursor, 84, 118, 84, 118) && vMsgStatus == 1)  {  ++vMsgStatus;  if (!isset(HideTripMsgs))    {    print("The trail gets slightly easier for a few miles as you follow the "          "Bear River. This is a welcome relief.");    }  }if (posn(oCursor, 69, 76, 69, 76) && vMsgStatus == 2)  {  ++vMsgStatus;  if (!isset(HideTripMsgs))    {    print("Here the trail forks. The southern route is called Hudspeths "          "Cut-off. That route is slightly shorter, as the crow flies, but it "          "misses the stop at Ft. Hall. Your captain takes you on the northern "          "route toward the fort.");    }  }  if (posn(oCursor, 45, 47, 45, 47) && vMsgStatus == 3)  {  ++vMsgStatus;  if (!isset(HideTripMsgs))    {    print("Fort Hall!");    }  }if (posn(oCursor, 32, 51, 32, 51) && vMsgStatus == 4)  {  ++vMsgStatus;  if (!isset(HideTripMsgs))    {    print("After leaving Ft. Hall, the company follows the Snake River through "          "a portion of Idaho.");    }  }if (posn(oCursor, 12, 104, 12, 104) && vMsgStatus == 5)  {  ++vMsgStatus;  if (!isset(HideTripMsgs))    {    print("A common landmark is Steeple Rocks, two pointed columns of rock "          "prominently standing two to three hundred feet in height.");    print("It is a relief for your captain to see this landmark come into view. "          "He lets everyone know that the company is right on course!");    }  }  [ **************************************[ PROCESS PLAYER INPUT[ **************************************[ if player hasn't provided input no need to do said testsif (!isset(haveInput))  {  goto(Done);  }[ (this boilerplate 'if' block isn't needed since no input[ is processed in this cutscene logic)  Done:[ call the main timing logiccall(lgc.WagonTripTiming);return();[ **************************************[ MESSAGES[ **************************************#message 1 "Your wagon train is now entering an arid stretch of land!! It will be fifty miles before you or the animals will be able to taste the refreshing cool water of the Green River."#message 2 "Every container is filled to the brim with the life-giving water that will be so valuable for the next few days."#message 5 "The trail across this desolate wasteland is strewn with dead oxen."#message 10 "The animals, as well as you, are parched and desperately in need of water."#message 15 "During this section of the trail, the going gets tough. There are no rivers going your direction to follow."#message 16 "It is just seemingly endless miles of gravel, rocks, sand, dust, steep hills to climb, and difficult descents."#message 17 "As difficult as it is to keep on going, you have to keep those big wheels turning!!"#message 20 "The trail gets slightly easier for a few miles as you follow the Bear River. This is a welcome relief."#message 25 "Here the trail forks. The southern route is called Hudspeths Cut-off. That route is slightly shorter, as the crow flies, but it misses the stop at Ft. Hall. Your captain takes you on the northern route toward the fort."#message 30 "Fort Hall!"#message 35 "After leaving Ft. Hall, the company follows the Snake River through a portion of Idaho."#message 40 "A common landmark is Steeple Rocks, two pointed columns of rock prominently standing two to three hundred feet in height."#message 41 "It is a relief for your captain to see this landmark come into view. He lets everyone know that the company is right on course!"