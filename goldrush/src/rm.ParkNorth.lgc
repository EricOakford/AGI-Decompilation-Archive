[***********************************************************[[ rm.ParkNorth[ [ The north end of the park, next to the East River. The [ warehouse is visible in the distance, as well as the dock[ with the steamship (until it leaves). Key interactions are[ the real estate agent and the policeman who fines Jerrod[ if he is caught walking on the grass.[ The chain fence that should keep people from falling in [ water seems to work for everyone but Jerrod![[***********************************************************[ **************************************[ LOCAL DEFINES[ **************************************#define oChains1                     o1#define oChains2                     o2#define oChains3                     o3#define oChains4                     o4#define oChains5                     o5#define oSteamship                   o6#define oGull1                       o7#define oGull2                       o8#define oPoliceman                   o9#define oShortWagon                 o10#define oPedestrian                 o11#define vPedDist                   v220#define vPedStatus                 v221#define vChainStatus1              v222#define vChainStatus2              v223#define vChainStatus3              v224#define vPoliceDist                v225#define vWagonDist                 v226#define vGullStep                  v227#define vGullX                     v228#define vGullY                     v229#define vPoliceStatus              v230  #define PM_NONE               0  [ 0: Policeman not on screen  #define PM_PATROL_1           1  [ 1: Policeman on 1st leg of patrol  #define PM_PATROL_2           2  [ 2: Policeman on 2nd leg of patrol  #define PM_MOVE_1A            4  [ 4: moving to position 1a to ticket Jerrod  #define PM_MOVE_1B            5  [ 5: moving to position 1b to ticket Jerrod  #define PM_MOVE_2A            6  [ 6: moving to position 2a to ticket Jerrod  #define PM_MOVE_2B            7  [ 7: moving to position 2b to ticket Jerrod  #define PM_MOVE_3             8  [ 8: moving to position 3 to ticket Jerrod  #define PM_MOVE_JERROD       10  [ 10: moving to Jerrod's location  #define PM_RETURN_1          11  [ 11: returning to patrol via path 1  #define PM_RETURN_2          12  [ 12: returning to patrol via path 2#define vPoliceX                   v231#define vPoliceY                   v232#define vWagonStatus               v233#define vTmpVal                    v234#define vOldPX                     v235#define vOldPY                     v236#define vPedX                      v237#define vPedY                      v238#define fOnBridge                  f220#define fFalling                   f221#define fChainRattle1              f222#define fChainRattle2              f223#define fChainRattle3              f224#define fChainMoved1               f225#define fChainMoved2               f226#define fChainMoved3               f227#define fOnGrass                   f228#define fPoliceMoved               f229#define fGull1Moved                f230#define fGull2Moved                f231#define fShipStart                 f232#define fShipMoved                 f233#define fWagonMoved                f234#define fPedMoved                  f235#define fDoneDying                 f236#define fRunOver                   f237#define fPoliceSndDone             f238#define fSoundDone                 f239[ **************************************[ FIRST CYCLE ONLY[ **************************************if (isset(newRoom))  {  [load, draw and discard the room picture  load.pic(currentRoom);  draw.pic(currentRoom);  discard.pic(currentRoom);    [ load views and add skyline  load.view(vw.SkylineArt);  add.to.pic(vw.SkylineArt, 0, 4, 0, 52, 4, 4);  add.to.pic(vw.SkylineArt, 0, 5, 20, 52, 4, 4);  add.to.pic(vw.SkylineArt, 0, 7, 60, 52, 4, 4);  add.to.pic(vw.SkylineArt, 0, 8, 80, 52, 4, 4);  add.to.pic(vw.SkylineArt, 0, 9, 100, 52, 4, 4);  add.to.pic(vw.SkylineArt, 0, 10, 120, 52, 4, 4);  add.to.pic(vw.SkylineArt, 0, 11, 140, 52, 4, 4);  [ skyline view no longer needed  discard.view(vw.SkylineArt);    [ the only exit from rm.BrooklynDock to this room is the   [ steamship sequence, so even though the TinyJerrod view  [ will get loaded, nothing is ever done with it  if (previousRoom == rm.BrooklynDock)    {    [ load the tiny view of Jerrod    load.view(vw.TinyJerrod);    }  else    {    [ otherwise, use the normal Jerrod views    load.view(vw.JerrodNY);    load.view(vw.FallingJerrodNY);    load.view(vw.DyingJerrodNY);    }      [ other views used in the room  load.view(vw.Chains);  load.view(vw.StmshipLg);  load.view(vw.Gulls);  load.view(vw.Policeman);  load.view(vw.BankTeller);  load.view(vw.ShortWagon);    [ load the various sounds used in this room  load.sound(m.PoliceWarning);  load.sound(s.BadNews);  load.sound(s.AddToScore);  load.sound(s.UhOh);  load.sound(m.Death);  load.sound(s.Splash);    [ if steamship hasn't left this (left) section  if (SteamshipXL < 107)    {    [ add the steamship object     animate.obj(oSteamship);    [ use the large view since we are close    set.view(oSteamship, vw.StmshipLg);    set.loop(oSteamship, 0);    set.cel(oSteamship, 0);    set.priority(oSteamship, 5);    position.v(oSteamship, SteamshipXL, SteamshipY);    ignore.blocks(oSteamship);    ignore.objs(oSteamship);    draw(oSteamship);    stop.update(oSteamship);    }    [ add the short wagon  animate.obj(oShortWagon);  set.view(oShortWagon, vw.ShortWagon);  [ choose a random direction and add it to the room (use  [ vPoliceDist for the direction choice)  random(0, 1, vPoliceDist);  if (vPoliceDist == 0)    {    set.loop(oShortWagon, 0);    position(oShortWagon, 0, 78);    draw(oShortWagon);    move.obj(oShortWagon, 122, 78, 2, fWagonMoved);    }  else    {    set.loop(oShortWagon, 1);    position(oShortWagon, 122, 78);    draw(oShortWagon);    move.obj(oShortWagon, 0, 78, 2, fWagonMoved);    }    [ wagon starts on screen  vWagonStatus = 1;    [ pedestrian, can be one of two people  animate.obj(oPedestrian);  vPedStatus = 10;    [ add the chains used along the walk to keep people from  [ falling in the water (even though they won't stop Jerrod  [ from falling in!)  animate.obj(oChains1);  set.view(oChains1, vw.Chains);  set.cel(oChains1, 0);  position(oChains1, 0, 66);  set.priority(oChains1, 7);  draw(oChains1);  stop.cycling(oChains1);  stop.update(oChains1);  [ chain #2  animate.obj(oChains2);  set.view(oChains2, vw.Chains);  set.cel(oChains2, 0);  position(oChains2, 30, 66);  set.priority(oChains2, 7);  draw(oChains2);  stop.cycling(oChains2);  stop.update(oChains2);  [ chain #3  animate.obj(oChains3);  set.view(oChains3, vw.Chains);  set.cel(oChains3, 0);  position(oChains3, 60, 66);  set.priority(oChains3, 7);  draw(oChains3);  stop.cycling(oChains3);  stop.update(oChains3);  [ chain #4  animate.obj(oChains4);  set.view(oChains4, vw.Chains);  set.cel(oChains4, 0);  position(oChains4, 90, 66);  set.priority(oChains4, 7);  draw(oChains4);  stop.cycling(oChains4);  stop.update(oChains4);  [ chain #5  animate.obj(oChains5);  set.view(oChains5, vw.Chains);  set.cel(oChains5, 0);  position(oChains5, 120, 66);  set.priority(oChains5, 7);  draw(oChains5);  stop.cycling(oChains5);  stop.update(oChains5);    [ two seagulls fly around randomly  animate.obj(oGull1);  set.view(oGull1, vw.Gulls);  ignore.horizon(oGull1);  ignore.blocks(oGull1);  ignore.objs(oGull1);  position(oGull1, 30, 25);  set.priority(oGull1, 6);  vTmpVal = 2;  cycle.time(oGull1, vTmpVal);  set(fGull1Moved);  [ seagull #2  draw(oGull1);  animate.obj(oGull2);  set.view(oGull2, vw.Gulls);  ignore.horizon(oGull2);  ignore.blocks(oGull2);  ignore.objs(oGull2);  position(oGull2, 50, 35);  set.priority(oGull2, 6);  cycle.time(oGull2, vTmpVal);  set(fGull2Moved);  draw(oGull2);    [ the policeman patrols the area, and tickets Jerrod if  [ he's caught walking on the grass  animate.obj(oPoliceman);  position(oPoliceman, 1, 160);  set.view(oPoliceman, vw.Policeman);  [ if Jerrod has been caught on the   [ grass two or three times  if ((OnGrassCount == 2 || OnGrassCount == 3))    {    [ add the policeman to the room at the start; he's here    [ to keep an eye on things    vPoliceStatus = PM_PATROL_1;    set(fPoliceMoved);    draw(oPoliceman);    }      [ Jerrod  animate.obj(ego);  [ if coming from the dock  if (previousRoom == rm.BrooklynDock)    {    [ the following if statement will always evaluate as    [ TRUE because the only exit from rm.BrooklynDock to     [ rm.ParkNorth is the cutscene with Jerrod on the ship;    [ if the steamship is on the move    if (isset(OnSteamship))      {      [ this statement is not necessary, because the ego      [ object is not used in the steamship sequence      position(ego, 68, 40);            [ set flag to show travel time if player wants to see      [ it      set(ShowTravelTime);            [ even if not already done, consider the gold rush      [ announced now that Jerrod is on his way      set(RushAnnounced);      }    else      {      [ the picture for this room and this code block      [ suggest that there used to be a way for Jerrod to be      [ at the dock but be viewed from this room as a 'tiny      [ Jerrod', but that option was later removed; this      [ code block will never run, and should have been       [ deleted      position(ego, 68, 53);      ignore.horizon(ego);      ignore.objs(ego);      set.view(ego, vw.TinyJerrod);      set.loop(ego, 0);      set.cel(ego, 0);      set.priority(ego, 6);      }    }  else    {    [ if coming from any other room, Jerrod appears in his    [ normal Brooklyn attire    set.view(ego, vw.JerrodNY);    }      [ if coming from the gazebo park  if (previousRoom == rm.GazeboPark)    {    [ if Jerrod's position coming from Gazebo Park was too    [ far to the left, move him over, and position him along    [ the bottom of this room    if (EgoX > 87)      {      EgoX = 87;      }    EgoY = 166;    position.v(ego, EgoX, EgoY);    }      [ if coming from rm.MainSt (start screen) Jerrod is on the  [ bridge; need to change priority so he draws correctly  if (posn(ego, 137, 127, 159, 143))    {    [ set priority to 14    set.priority(ego, 14);    }    [ if Jerrod is not on the steamhip trip,  if (!isset(OnSteamship))    {    [ add him to the screen    draw(ego);    }    [ now show the picture  show.pic();    [ if on the steamship trip  if (isset(OnSteamship))    {    [ play the score sound    sound(s.AddToScore, fSoundDone);    }  }[ **************************************[ EVERY CYCLE[ **************************************[ if wagon is visible and done movingif (isset(fWagonMoved) && vWagonStatus == 1)  {  [ remove it from screen  reset(fWagonMoved);  erase(oShortWagon);  vWagonStatus = 10;  }[ if Jerrod is in wagon's path and still aliveif (EgoY == 78 && EgoHealthStatus == 0)  {  [ get distance from Jerrod to the wagon  distance(ego, oShortWagon, vWagonDist);  [ the direction the wagon is going determines how close  [ Jerrod has to be in order to get 'hit'  get.dir(oShortWagon, vTmpVal);  [ wagon going left  if (vTmpVal == LEFT)    {    [ account for length of wagon    if ((vWagonDist == 23 || vWagonDist == 24))      {      set(fRunOver);      }    }  [ wagon going right  if (vTmpVal == RIGHT)    {    if ((vWagonDist == 22 || vWagonDist == 23))      {      set(fRunOver);      }    }  }  [ if Jerrod got run overif (isset(fRunOver))  {  [ reset the flag  reset(fRunOver);  [ wagon keeps rolling over Jerrod's dead body  ignore.objs(ego);  set.view(ego, vw.DyingJerrodNY);  set.cel(ego, 0);  set(CycleAtRest);  end.of.loop(ego, fDoneDying);  EgoHealthStatus = 4;  }  [ after Jerrod finishes dyingif (isset(fDoneDying))  {  [ reset the flag  reset(fDoneDying);  [ call logic to handle details of death  call(lgc.DeathRunOver);  }  [ if wagon is not on screenif (vWagonStatus > 9)  {  [ random chance the wagon comes back  random(20, 100, vWagonStatus);  [ one in 80 chance;  if (vWagonStatus == 77)    {    [ choose a random direction    random(0, 1, vWagonStatus);    if (vWagonStatus == 0)      {      [ start wagon on right, going left      set.loop(oShortWagon, 1);      position(oShortWagon, 122, 78);      draw(oShortWagon);      move.obj(oShortWagon, 0, 78, 2, fWagonMoved);      }    else      {      [ start wagon on left, going right      set.loop(oShortWagon, 0);      position(oShortWagon, 0, 78);      draw(oShortWagon);      move.obj(oShortWagon, 122, 78, 2, fWagonMoved);      }    [ wagon is now on screen    vWagonStatus = 1;    }  }  [ if pedestrian is not present  if (vPedStatus > 9)  {  [ random chance a pedestrian appears  random(20, 100, vPedStatus);  [ one-in-eighty chance  if (vPedStatus == 77)    {    [ pick one of one! looks like there was once an option     [ for two or more pedestrians in this room, but was    [ later changed to just one; programmers could have just    [ assigned the bank teller view without doing the    [ randimizer    random(1, 1, vPedStatus);    if (vPedStatus == 1)      {      set.view(oPedestrian, vw.BankTeller);      }         [ choose a random starting position    random(0, 2, vPedStatus);    if (vPedStatus == 0)      {      set.loop(oPedestrian, 0);      position(oPedestrian, 0, 80);      draw(oPedestrian);      move.obj(oPedestrian, 66, 80, 1, fPedMoved);      [ pedestrian is on screen, path A      vPedStatus = 3;      }    if (vPedStatus == 1)      {      set.loop(oPedestrian, 1);      position(oPedestrian, 0, 80);      draw(oPedestrian);      move.obj(oPedestrian, 66, 80, 1, fPedMoved);      [ pedestrian is on screen, path A      vPedStatus = 3;      }    if (vPedStatus == 2)      {      set.loop(oPedestrian, 0);      position(oPedestrian, 0, 162);      draw(oPedestrian);      move.obj(oPedestrian, 100, 162, 1, fPedMoved);    [ pedestrian is on screen, path B      vPedStatus = 5;      }    }  }  [ when pedestrian reaches first point of path Aif (isset(fPedMoved) && vPedStatus == 3)  {  reset(fPedMoved);  [ choose a random direction and move to end point A  random(0, 1, vPedStatus);  if (vPedStatus == 0)    {    move.obj(oPedestrian, 0, 80, 1, fPedMoved);    }  if (vPedStatus == 1)    {    move.obj(oPedestrian, 152, 80, 1, fPedMoved);    }  vPedStatus = 4;  }  [ when pedestrian reaches end of path Aif (isset(fPedMoved) && vPedStatus == 4)  {  [ he disappears; remove from screen  reset(fPedMoved);  vPedStatus = 10;  erase(oPedestrian);  }  [ when pedestrian reaches first point of path Bif (isset(fPedMoved) && vPedStatus == 5)  {  [ choose a random direction and move to end point B  reset(fPedMoved);  move.obj(oPedestrian, 0, 162, 1, fPedMoved);  vPedStatus = 6;  }  [ when pedestrian reaches end of path Bif (isset(fPedMoved) && vPedStatus == 6)  {  [ he disappears; remove him from screen  reset(fPedMoved);  vPedStatus = 10;  erase(oPedestrian);  }  [ get pedestrian's current positionget.posn(oPedestrian, vPedX, vPedY);[ if pedestrian has not moved (blocked by Jerrod)if (OldObj1X == vPedX && OldObj1Y == vPedY)  {  [ stop cycling the pedestrian  stop.cycling(oPedestrian);  }else  {  [ if moving, cycle the pedestrian  start.cycling(oPedestrian);  }[ save the pedestrian's positionOldObj1X = vPedX;OldObj1Y = vPedY;[ if Jerrod on an alarm line, or is on the bridgeif ((isset(egoHitSpecial) || posn(ego, 137, 127, 159, 143)))  {  [ if not already flagged as being on bridge  if (!isset(fOnBridge))    {    [ set the flag and set ego priority to 14    set(fOnBridge);    set.priority(ego, 14);    }  }else  {  [ not on bridge - if bridge flag is set  if (isset(fOnBridge))    {    [ clear the flag    reset(fOnBridge);        [ if Jerrod is not falling (because he went over the     [ edge of the walkway by the chains)     [ NOTE this test will always evaluate as TRUE because    [ when Jerrod falls, his Y position value never goes     [ below 118; the bridge is located at Y values 127-143    if (!isset(fFalling))      {      [ release ego priority      release.priority(ego);      }    }  }  [ if Jerrod is on an alarm lineif (isset(egoHitSpecial))  {  [ Jerrod is on the bridge; adjust his motion as he   [ moves over the bridge    [ if diagonal-left, change to left  if ((egoDir == UP_LEFT || egoDir == DOWN_LEFT))    {    [ force to left    egoDir = LEFT;    }  [ if moving left  if (egoDir == LEFT)    {    [ bump ego left one pixel and down one pixel    TmpX = -1; [ 255;    TmpY = 1;    reposition(ego, TmpX, TmpY);    }  [ if diagonal-right, change to right  if ((egoDir == UP_RIGHT || egoDir == DOWN_RIGHT))    {    [ force to right    egoDir = RIGHT;    }  [ if on upper portion of bridge  if (posn(ego, 134, 129, 159, 136))    {    if (egoDir == RIGHT)      {      [ bump right one pixel      TmpX = 1;      TmpY = 0;      reposition(ego, TmpX, TmpY);      }    }  else    {    [ on lower portion    if (egoDir == RIGHT)      {      [ bump diagonally right one pixel and up one pixel      TmpX = 1;      TmpY = -1; [ 255;      reposition(ego, TmpX, TmpY);      }    }  }[ if Jerrod gets too close to the chains, and is still aliveif (posn(ego, 0, 50, 145, 75) && EgoHealthStatus == 0)  {  [ as Jerrod moves closer to the edge, the chains will move  [ to give player an indication that trouble is coming    [ if Jerrod is at the chain border  if (EgoY == 75)    {    [ if moving back to a safe area    if ((egoDir == DOWN ||         egoDir == DOWN_LEFT ||         egoDir == DOWN_RIGHT))      {      [ reset the chains to their normal position      set.cel(oChains1, 0);      set.cel(oChains2, 0);      set.cel(oChains3, 0);      set.cel(oChains4, 0);      set.cel(oChains5, 0);      [ force them to redraw      force.update(oChains5);      [ then stop updating all chain objects      stop.update(oChains1);      stop.update(oChains2);      stop.update(oChains3);      stop.update(oChains4);      stop.update(oChains5);      }    }  [ if one step past safe area  if (EgoY == 74)    {    [ allow all chain objects to update, and bump the chains    [ (change to cel 1)    start.update(oChains1);    set.cel(oChains1, 1);    start.update(oChains2);    set.cel(oChains2, 1);    start.update(oChains3);    set.cel(oChains3, 1);    start.update(oChains4);    set.cel(oChains4, 1);    start.update(oChains5);    set.cel(oChains5, 1);    }  [ if two steps past safe area  if (EgoY == 73)    {    [ bump the chains further (change to cel 2)    set.cel(oChains1, 2);    set.cel(oChains2, 2);    set.cel(oChains3, 2);    set.cel(oChains4, 2);    set.cel(oChains5, 2);    [ if not falling     if (!isset(fFalling))      {      [ restore auto priority      [ (in case Jerrod has turned back at last       [ second, and is returning to safety)      release.priority(ego);      }    }  [ if past the chains, and about to fall  if (EgoY == 72)    {    set.cel(oChains1, 3);    set.cel(oChains2, 3);    set.cel(oChains3, 3);    set.cel(oChains4, 3);    set.cel(oChains5, 3);        [ if not falling (this will always evaluate as TRUE    [ because fFalling is only set when EgoHealthStatus is    [ non-zero)    if (!isset(fFalling))      {      [ set priority to 8 so he goes behind the chains      set.priority(ego, 8);      }    }      [ if Jerrod goes too far (over the edge)  if (EgoY == 71)    {    [ Jerrod falls in the water!        [ set priority so he will fall behind the road and into    [ the water    set.priority(ego, 6);    [ set the flag indicating he's falling    set(fFalling);    [ ignore blocks and conditional lines while falling    ignore.blocks(ego);    [ change Jerrod's status to 'death by drowning'    EgoHealthStatus = 2;    [ change to the falling view    set.view(ego, vw.FallingJerrodNY);    [ ignore any other objects while falling    ignore.objs(ego);    [ move Jerrod downard to have him disappear into the    [ water (use vWagonDist as 'Y' value and vPedDist as    [ step value)    vWagonDist = 116;    vPedDist = 4;    move.obj.v(ego, EgoX, vWagonDist, vPedDist, DoneNoAction);    }  }  [ if Jerrod is falling,if (EgoHealthStatus == 2)  {  [ 'rattle' the chains as he falls; done in three stages,  [ each offset by one cycle, to give a nice effect of the   [ chains wobbling due to being touched    [ set the first rattle event  set(fChainRattle1);    [ third set of 'rattling' (moves chains #1 and #5 - the  [ chains on either end)  if (isset(fChainRattle3))    {    [ use status to move chains through two cycles forward    [ and two cycles backward    if (vChainStatus3 == 0)      {      set.cel(oChains1, 0);      end.of.loop(oChains1, fChainMoved3);      set.cel(oChains5, 0);      end.of.loop(oChains5, fChainMoved3);      vChainStatus3 = 1;      }    if (isset(fChainMoved3) && vChainStatus3 == 1)      {      reset(fChainMoved3);      reverse.loop(oChains5, fChainMoved3);      reverse.loop(oChains1, fChainMoved3);      vChainStatus3 = 2;      }    if (isset(fChainMoved3) && vChainStatus3 == 2)      {      reset(fChainMoved3);      end.of.loop(oChains1, fChainMoved3);      end.of.loop(oChains5, fChainMoved3);      vChainStatus3 = 3;      }    if (isset(fChainMoved3) && vChainStatus3 == 3)      {      reset(fChainMoved3);      reverse.loop(oChains5, fChainMoved3);      reverse.loop(oChains1, fChainMoved3);      vChainStatus3 = 4;      }          [ after the end chains complete two cycles of 'rattling'    if (isset(fChainMoved3) && vChainStatus3 == 4)      {      [ chains are all done moving      reset(fChainMoved3);      vChainStatus3 = 5;            [ remove Jerrod from the screen, and play the splash      [ sound      erase(ego);      sound(s.Splash, fSoundDone);      }          [ when splash sound is done    if (isset(fSoundDone) && vChainStatus3 == 5)      {      [ reset the flag      reset(fSoundDone);      [ fall sequence is complete      vChainStatus3 = 6;            [ Jerrod is officially dead      sound(m.Death, fSoundDone);      set(JerrodIsDead);            [ no input allowed after Jerrod dies      prevent.input();      stop.motion(ego);      display(22, 0, "There's no gold here, but don't give up until you find "              "it!");      }    }  [ second set of 'rattling' (moves chains #2 and #4)  if (isset(fChainRattle2))    {    [ set flag so third 'rattle' will start in next cycle    set(fChainRattle3);        [ use status to move chains through two cycles forward    [ and two cycles backward    if (vChainStatus2 == 0)      {      set.cel(oChains2, 0);      end.of.loop(oChains2, fChainMoved2);      set.cel(oChains4, 0);      end.of.loop(oChains4, fChainMoved2);      vChainStatus2 = 1;      }    if (isset(fChainMoved2) && vChainStatus2 == 1)      {      reset(fChainMoved2);      reverse.loop(oChains4, fChainMoved2);      reverse.loop(oChains2, fChainMoved2);      vChainStatus2 = 2;      }    if (isset(fChainMoved2) && vChainStatus2 == 2)      {      reset(fChainMoved2);      end.of.loop(oChains2, fChainMoved2);      end.of.loop(oChains4, fChainMoved2);      vChainStatus2 = 3;      }    if (isset(fChainMoved2) && vChainStatus2 == 3)      {      reset(fChainMoved2);      reverse.loop(oChains4, fChainMoved2);      reverse.loop(oChains2, fChainMoved2);      vChainStatus2 = 4;      }    if (isset(fChainMoved2) && vChainStatus2 == 4)      {      reset(fChainMoved2);      }    }      [ start the first 'rattle' (moves chain #3 in center)  if (isset(fChainRattle1))    {    [ set flag so second 'rattle' will start in next cycle    set(fChainRattle2);        [ use status to move chains through two cycles forward    [ and two cycles backward    if (vChainStatus1 == 0)      {      set.cel(oChains3, 0);      end.of.loop(oChains3, fChainMoved1);      vChainStatus1 = 1;      }    if (isset(fChainMoved1) && vChainStatus1 == 1)      {      reset(fChainMoved1);      reverse.loop(oChains3, fChainMoved1);      vChainStatus1 = 2;      }    if (isset(fChainMoved1) && vChainStatus1 == 2)      {      start.update(oChains3);      end.of.loop(oChains3, fChainMoved1);      vChainStatus1 = 3;      }    if (isset(fChainMoved1) && vChainStatus1 == 3)      {      reset(fChainMoved1);      reverse.loop(oChains3, fChainMoved1);      vChainStatus1 = 4;      }    if (isset(fChainMoved1) && vChainStatus1 == 4)      {      reset(fChainMoved1);      }    }  }  [ if Jerrod is currently not on the grass, and has been[ on grass less than three timesif (!isset(fOnGrass) && OnGrassCount < 3)  {  [ if ego is on any of the grass areas (indicated by water  [ pixels on priority screen, as well as a few other areas)  if ((isset(onWater) ||       posn(ego, 0, 87, 12, 109) ||       posn(ego, 13, 87, 58, 96) ||       posn(ego, 93, 87, 123, 110)))    {    [ set the flag    set(fOnGrass);    [ increment the count    ++OnGrassCount;    [ subtract a point from player's score    if (currentScore > 0)      {      currentScore -= 1;      sound(s.BadNews, fSoundDone);      }    }  }  [ if the flag is set for being on the grassif (isset(fOnGrass))  {  [ if Jerrod has moved OFF the grass  if (!isset(onWater) &&       !posn(ego, 0, 87, 12, 109) &&       !posn(ego, 13, 87, 58, 96) &&       !posn(ego, 93, 87, 123, 110))    {    [ reset the flag    reset(fOnGrass);    }  }  [ if Jerrod walks on the grass three times and the policeman[ isn't on screen yetif (OnGrassCount == 3 && vPoliceStatus == PM_NONE)  {  [ add policeman to screen  vPoliceStatus = PM_PATROL_1;  set(fPoliceMoved);  draw(oPoliceman);  [ sound a warning  sound(m.PoliceWarning, fPoliceSndDone);  }  [ when policeman reaches left edgeif (isset(fPoliceMoved) && vPoliceStatus == PM_PATROL_1)  {  [ policeman heads back to right  reset(fPoliceMoved);  vPoliceStatus = 2;  move.obj(oPoliceman, 100, 160, 1, fPoliceMoved);  }  [ when policeman reaches right edgeif (isset(fPoliceMoved) && vPoliceStatus == 2)  {  [ he turns around and heads to the left  reset(fPoliceMoved);  vPoliceStatus = PM_PATROL_1;  move.obj(oPoliceman, 15, 160, 1, fPoliceMoved);  }  [ if Jerrod has been on the grass more than two times, AND[ policeman is present (moving or not), but not already [ chasing Jerrodif (OnGrassCount > 2 && vPoliceStatus < 3)  {  [ if Jerrod is on the grass again (not counting when  [ falling in water)  if (!isset(fFalling) &&       (isset(onWater) ||       posn(ego, 0, 87, 12, 109) ||       posn(ego, 13, 87, 58, 96) ||       posn(ego, 93, 87, 123, 110)))    {    [ sound the alarm    sound(m.PoliceWarning, fPoliceSndDone);    print("\"This is the police, \n\n      FREEZE!!\"");    [ freeze Jerrod in place    stop.motion(ego);        [ depending on where Jerrod is, move the policeman near    [ him        [ if Jerrod is near top of room    if (EgoY > 117)      {      [ policeman goes straight to Jerrod      vPoliceStatus = PM_MOVE_JERROD;      follow.ego(oPoliceman, 5, fPoliceMoved);      }    [ if Jerrod is not right at the top of the screen    if (EgoY < 118)      {      [ the policeman moves down right or left side to get      [ to Jerrod      if (EgoX > 46)        {        vPoliceStatus = PM_MOVE_1A;        move.obj(oPoliceman, 82, 160, 1, fPoliceMoved);        }      if (EgoX < 47)        {        vPoliceStatus = PM_MOVE_2A;        move.obj(oPoliceman, 20, 160, 1, fPoliceMoved);        }      }    }  }  [ if policeman reaches right side when moving down to[ Jerrod's locationif (isset(fPoliceMoved) && vPoliceStatus == PM_MOVE_1A)  {  [ move to point 1b  reset(fPoliceMoved);  vPoliceStatus = PM_MOVE_1B;  move.obj(oPoliceman, 82, 118, 1, fPoliceMoved);  }[ when policeman reaches point 1bif (isset(fPoliceMoved) && vPoliceStatus == PM_MOVE_1B)  {  [ move to Jerrod's location  reset(fPoliceMoved);  vPoliceStatus = PM_MOVE_JERROD;  follow.ego(oPoliceman, 5, fPoliceMoved);  }  [ if policeman reaches left side when moving down to[ Jerrod's positionif (isset(fPoliceMoved) && vPoliceStatus == PM_MOVE_2A)  {  [ move to point 2b  reset(fPoliceMoved);  vPoliceStatus = PM_MOVE_2B;  move.obj(oPoliceman, 20, 118, 1, fPoliceMoved);  }[ when policeman reaches point 2bif (isset(fPoliceMoved) && vPoliceStatus == PM_MOVE_2B)  {  reset(fPoliceMoved);  [ move to Jerrod's location  vPoliceStatus = PM_MOVE_JERROD;  follow.ego(oPoliceman, 5, fPoliceMoved);  }  [ when policeman gets to Jerrod if (isset(fPoliceMoved) && vPoliceStatus == PM_MOVE_JERROD)  {  [ reset move flag  reset(fPoliceMoved);  [ admonish Jerrod  print("\"I'm going to have to give you a ticket for walking on the grass. In "        "the future, PLEASE be more careful.\"");  [ if more than three points, lose three points  if (currentScore > 2)    {    currentScore -= 3;    }  [ then, if exactly 2, lose two more  if (currentScore == 2)    {    currentScore -= 2;    }  [ and if only one, lose one more  if (currentScore == 1)    {    currentScore -= 1;    }  [ to summarize the penalties for walking on the grass:  [   - everytime Jerrod walks on the grass, player loses  [     one point;  [   - after third time, the policeman issues a ticket and  [     player loses three more points, or all points if  [     less than three  [   - BUT there is a small bug; if player has 5 points  [     when he's issued a ticked, he first loses 3, and   [     then the next test ('if(score===2)') causes    [     another loss of two for a total of 5!  [     The programmers should have used an 'else'   [     statement to prevent this    [ after getting the ticket, Jerrod is free to move again  start.motion(ego);    [ now move the Policeman back to his regular path  [ depending on where he is right now    [ get policeman's current position  get.posn(oPoliceman, vPoliceX, vPoliceY);  [ if near top of screen  if (posn(oPoliceman, 0, 144, 159, 167))    {    [ just return to regular patrol    vPoliceStatus = PM_PATROL_1;    move.obj(oPoliceman, 15, 160, 1, fPoliceMoved);    }  [ if not near top, go back via a step point  if ((posn(oPoliceman, 0, 119, 159, 143) ||       posn(oPoliceman, 0, 88, 46, 118)))    {    vPoliceStatus = PM_RETURN_1;    vPoliceX = 15;    vWagonDist = 1;    move.obj.v(oPoliceman, vPoliceX, vPoliceY, vWagonDist, fPoliceMoved);    }  if (posn(oPoliceman, 47, 88, 159, 118))    {    vPoliceStatus = PM_RETURN_2;    vPoliceX = 82;    vWagonDist = 1;    move.obj.v(oPoliceman, vPoliceX, vPoliceY, vWagonDist, fPoliceMoved);    }  [ reset onGrass count so next time will trigger another  [ ticket  OnGrassCount = 2;  }  [ if policeman reaches either return spot he resumes his[ regular patrolif (vPoliceStatus == PM_RETURN_1 && isset(fPoliceMoved))  {  reset(fPoliceMoved);  vPoliceStatus = PM_PATROL_1;  move.obj(oPoliceman, 20, 160, 1, fPoliceMoved);  }if (vPoliceStatus == PM_RETURN_2 && isset(fPoliceMoved))  {  reset(fPoliceMoved);  vPoliceStatus = PM_PATROL_1;  move.obj(oPoliceman, 82, 160, 1, fPoliceMoved);  }  [ get distance from policeman to Jerrod  distance(oPoliceman, ego, vPoliceDist);[ if within one pixelif (vPoliceDist == 1)  {  print("\"Excuse me.\"");  print("\"Pardon me.\"");  }  [ get policeman's current positionget.posn(oPoliceman, vPoliceX, vPoliceY);[ if policeman hasn't moved (blocked by Jerrod)if (vOldPX == vPoliceX && vOldPY == vPoliceY)  {  [ stop cycling when not moving  stop.cycling(oPoliceman);  }else  {  [ cycle when moving  start.cycling(oPoliceman);  }[ save policeman's positionvOldPX = vPoliceX;vOldPY = vPoliceY;[ if gull1 reached its destinationif (isset(fGull1Moved))  {  [ send it off in another random direction  reset(fGull1Moved);  random(1, 150, vGullX);  random(5, 85, vGullY);  random(1, 2, vGullStep);  move.obj.v(oGull1, vGullX, vGullY, vGullStep, fGull1Moved);  }[ if gull2 reached its destinationif (isset(fGull2Moved))  {  [ send it off in another random direction  reset(fGull2Moved);  random(1, 150, vGullX);  random(5, 85, vGullY);  random(1, 2, vGullStep);  move.obj.v(oGull2, vGullX, vGullY, vGullStep, fGull2Moved);  }[ if the ship has set sail, but hasn't started moving yetif (isset(ShipSailed) &&     !isset(fShipStart) &&     SteamshipXL < 107)  {  [ send the ship on its way  set(fShipStart);  start.update(oSteamship);  set.loop(oSteamship, 2);  fix.loop(oSteamship);  move.obj(oSteamship, 106, 57, 1, fShipMoved);  step.time(oSteamship, StmShipStep);  }  [ **************************************[ CHECK FOR AN EXIT CONDITION[ **************************************[ this code block will never execute because Jerrod[ can't get to this room unless he is on the shipif (isset(fShipMoved) &&     !isset(OnSteamship) &&     previousRoom == rm.BrooklynDock)  {  [ tiny ego goes back to the dock  new.room(rm.BrooklynDock); [ ##LE001##  }[ if ship is done moving, and Jerrod is not on the ship[ and previous room was anywhere elseif (isset(fShipMoved) &&     !isset(OnSteamship) &&     previousRoom != rm.BrooklynDock)  {  [ remove ship from screen  reset(fShipMoved);  erase(oSteamship);  }  [ if ship is done moving, and Jerrod is onboardif (isset(fShipMoved) && isset(OnSteamship))  {  [ continue to next cutscene  new.room(rm.MainSt); [ ##LE002##  }[ now check for edge exitsif (edgeEgoHit != NOT_HIT)  {  [ this command is not needed; when the new.room command  [ executes, all screen objects get reset  release.loop(oSteamship);    if (edgeEgoHit == RIGHT_EDGE)    {    new.room(rm.MainSt); [ ##LE003##    }  if (edgeEgoHit == LEFT_EDGE)    {    new.room(rm.Bank); [ ##LE004##    }  if (edgeEgoHit == BOTTOM_EDGE)    {    new.room(rm.GazeboPark); [ ##LE005##    }  }  [ **************************************[ PROCESS PLAYER INPUT[ **************************************[ if player hasn't provided input no need to do said testsif (!isset(haveInput))  {  goto(Done);  }  [ look sign/read signif ((said("examine", "sign") ||     said("read", "sign")))  {  if ((posn(ego, 43, 144, 68, 167) ||       posn(ego, 86, 108, 116, 120) ||       posn(ego, 0, 107, 12, 125)))    {    print("The sign says, \n \n    \"KEEP \n\n   OFF THE \n\n    GRASS\"");    [ skip to end    goto(Done);    }  if ((posn(ego, 0, 96, 12, 106) ||       posn(ego, 43, 126, 68, 145) ||       posn(ego, 86, 121, 116, 139) ||       posn(ego, 86, 91, 116, 107)))    {    print("You are looking at the back side of the sign.");    [ skip to end    goto(Done);    }  print("From here you can't read any sign.");  }  [ look roadif (said("examine", "path"))  {  print("The street that follows the river front is Water Street.");  }  [ look treeif (said("examine", "forest"))  {  print("Some mighty fine maple syrup would probably come out of these trees.");  }  [ look groundif (said("examine", "grass"))  {  print("These lawns are meticulously manicured and maintained.");  }  [ look across riverif ((said("examine", "across") ||     said("examine", "across", "creek") ||     said("examine", "across", "east river")))  {  print("As you look across the East river, you view New York City.");  }  [ look buildingif ((said("examine", "building") ||     said("examine", "warehouse")))  {  print("The warehouse is one of Brooklyn's proudest, and most recent, "        "additions.");  }[ look chain  if (said("examine", "chain"))  {  [ this response is hilarious, because it doesn't help Jerrod at all!  print("These chains have saved many people from falling into the chilly "        "water.");  }  [ look bridgeif (said("examine", "bridge"))  {  print("There is nothing unusual about the bridge.");  }  [ look streetlampif (said("examine", "lamp"))  {  print("The streetlights light up the park.");  }[ look New York  if (said("examine", "new york"))  {  print("Across the East River is the metropolis of New York City.");  }[ look river  if ((said("examine", "creek") ||     said("examine", "water") ||     said("examine", "east river") ||     said("examine", "ocean")))  {  print("This is the East River.");  }  [ look shipif (said("examine", "boat"))  {  [ if Jerrod is on the ship  if (isset(OnSteamship))    {    print("You are on board the mighty \"Sea Farer!\"");    }  else    {    [ if ship is moving across the screen    if (SteamshipXL > 0 && SteamshipXL < 107)      {      print("You think to yourself, someday I will ride on that ship!");      }    else      {      print("The ship is gone.");      }    }  }  [ look dockif (said("examine", "dock"))  {  print("The warehouse is at the end of the dock.");  }  [ look policemanif (said("examine", "cop"))  {  [ if policeman is close enough  if (vPoliceDist < 15)    {    print("He looks like a big, burly fella. I wouldn't want to get on the "          "wrong side of the law!");    }      [ if policeman is not close, but is on screen  if (vPoliceDist > 14 && vPoliceDist < 255)    {    print("You see a %w2 patrolling the park.");    }      [ if policeman is not on screen (255 means not on screen)  if (vPoliceDist == 255)    {    print("There isn't a %w2 in sight!");    }  }  [ look/look aroundif ((said("examine") ||     said("examine", "around") ||     said("examine", "park") ||     said("examine", "brooklyn", "park")))  {  [ if Jerrod is on the ship  if (isset(OnSteamship))    {    print("You have done it! You are on the steamship on your way to "          "California!!");    }  else    {    print("This is the beautiful downtown Brooklyn Park. There are fine lawns "          "and flower arrangements.");    }  }[ pick flowers/get flowersif ((said("pick", "bouquet") ||     said("acquire", "bouquet")))  {  [ if Jerrod already has some flowers  if (has("Flowers"))    {    print("You already have a nice bouquet of flowers so you decide to leave "          "some for others.");    }  else    {    if (posn(ego, 20, 102, 70, 127))      {      [ play score sound      sound(s.AddToScore, fSoundDone);      [ pick some flowers      print("You pick a few flowers, but not too many, so that others may also "            "enjoy them.");      get("Flowers");      [ if not scored yet      if (!isset(ScoreFlowers))        {        [ score two points        set(ScoreFlowers);        currentScore  += 2;        }      }    else      {      print("You are not close enough.");      }    }  }[ look flowersif (said("examine", "bouquet"))  {  [ if Jerrod hasn't picked flowers yet  if (!has("Flowers"))    {    print("There is a beautiful arrangement of flowers in the center of the "          "park.");    }  }  [ look manif (said("examine", "boy"))  {  [ if Jerrod is on the ship  if (isset(OnSteamship))    {    print("Along the Brooklyn shore you see many people and wagons! This may be "          "your last look at these familiar scenes!!");    [ skip to end    goto(Done);    }      [ get distance to wagon and pedestrian (distance to  [ policeman is determined earlier in the cycle)  distance(ego, oShortWagon, vWagonDist);  distance(ego, oPedestrian, vPedDist);    [ if at least one person is close enough  if ((vPoliceDist < 60 || vWagonDist < 60 || vPedDist < 60))    {    [ if policeman is close enough    if (vPoliceDist < 60)      {      print("He looks like a big, burly fella. I wouldn't want to get on the "            "wrong side of the law!");      }    [ if wagon is close enough    if (vWagonDist < 60)      {      print("This driver and animal team are making good time down Water "            "Street!");      }    [ if pedestrian is close enough    if (vPedDist < 60)      {      [ since only one, this isn't really necessary, but it      [ appears the programmers re-used code from other      [ rooms with more than one pedestrian            [ use view number to determine identity of pedestrian      current.view(oPedestrian, vPedDist);      if (vPedDist == vw.BankTeller)        {        print("The bank teller is walking in the park.");        }      }    }  else    {    [ if no one is on screen    if (vPoliceDist == 255 &&         vWagonDist == 255 &&         vPedDist == 255)      {      print("There is no one around.");      }    else      {      [ at least one is on screen, but too far away      print("There is someone in the park but you're not close enough to see "            "who it is.");      }    }  }  [ talk manif ((said("speak", "boy") ||     said("speak", "cop") ||     said("speak")))  {  [ get distance to wagon and pedestrian (distance to   [ policeman is determined earlier in the cycle)  distance(ego, oShortWagon, vWagonDist);  distance(ego, oPedestrian, vPedDist);  [ if at least one is near  if ((vPoliceDist < 40 || vWagonDist < 40 || vPedDist < 40))    {    [ if policeman is close enough    if (vPoliceDist < 40)      {      print("The officer says, \"It is a beautiful day for obeying the law. "            "Isn't it sir?\"");      }    [ if wagon is close enough    if (vWagonDist < 40)      {      print("The man on the wagon can't hear you over the rumble of the wagon.");      }    [ if pedestrian is close enough    if (vPedDist < 40)      {      [ again, unnecessary, but...            [ use view to determine identity of pedestrian      current.view(oPedestrian, vPedDist);      if (vPedDist == vw.BankTeller)        {        print("The bank teller says, \"Come by the bank and check on your "              "account someday.\"");        }      }    }  else    {    [ if now one is on screen    if (vPoliceDist == 255 &&         vWagonDist == 255 &&         vPedDist == 255)      {      print("There is no one around.");      }    else      {      [ threre's at least one person on screen but they are      [ too far away to hear      print("No one is close enough to hear you.");      }    }  }[ look wagonif (said("examine", "cart"))  {  [ if Jerrod is on the ship  if (isset(OnSteamship))    {    print("Along the Brooklyn shore you see many people and wagons! This may be "          "your last look at these familiar scenes!!");    [ skip to end    goto(Done);    }  [ otherwise, get distance to wagon  distance(oShortWagon, ego, vWagonDist);  [ if wagon is not on screen  if (vWagonDist == 255)    {    print("There is no wagon here now.");    }  else    {    print("There is a man driving a wagon down \"Water Street.\"");    }  }  [ smell flowersif (said("smell", "bouquet"))  {  print("The flowers add a nice aroma to the park.");  }  [ take signif (said("acquire", "sign"))  {  print("You're not strong enough!");  }  [ look seagullif (said("examine", "bird"))  {  print("Sea gulls are a common sight here.");  }  [ go swimmingif ((said("swim") ||     said("go", "swim") ||     said("go", "water") ||     said("go", "creek") ||     said("go", "ocean") ||     said("swim", "water") ||     said("go", "swim", "water") ||     said("jump", "water") ||     said("jump", "creek") ||     said("jump", "ocean") ||     said("enter", "water") ||     said("enter", "creek") ||     said("enter", "ocean")))  {  print("You have more sense than that! That water is cold!!");  }  [ look billboard/look noteif ((said("examine", "billboard") ||     said("read", "billboard") ||     said("examine", "note") ||     said("read", "note")))  {  print("All there is worth reading here are the signs on the lawn.");  }  Done:return();[ **************************************[ MESSAGES[ **************************************#message 1 "This is the beautiful downtown Brooklyn Park. There are fine lawns and flower arrangements."#message 2 "The sign says, \n \n    \"KEEP \n\n   OFF THE \n\n    GRASS\""#message 3 "You are looking at the back side of the sign."#message 4 "From here you can't read any sign."#message 5 "The street that follows the river front is Water Street."#message 6 "Some mighty fine maple syrup would probably come out of these trees."#message 7 "These lawns are meticulously manicured and maintained."#message 8 "As you look across the East river, you view New York City."#message 12 "These chains have saved many people from falling into the chilly water."#message 14 "There is nothing unusual about the bridge."#message 16 "The streetlights light up the park."#message 18 "Across the East River is the metropolis of New York City."#message 19 "This is the East River."#message 20 "\"This is the police, \n\n      FREEZE!!\""#message 21 "\"I'm going to have to give you a ticket for walking on the grass. In the future, PLEASE be more careful.\""#message 23 "\"Excuse me.\""#message 24 "\"Pardon me.\""#message 25 "You think to yourself, someday I will ride on that ship!"#message 26 "The ship is gone."#message 27 "The warehouse is at the end of the dock."#message 28 "He looks like a big, burly fella. I wouldn't want to get on the wrong side of the law!"#message 29 "You pick a few flowers, but not too many, so that others may also enjoy them."#message 30 "You are not close enough."#message 32 "There is a beautiful arrangement of flowers in the center of the park."#message 34 "You have done it! You are on the steamship on your way to California!!"#message 35 "You already have a nice bouquet of flowers so you decide to leave some for others."#message 36 "You see a %w2 patrolling the park."#message 37 "There isn't a %w2 in sight!"#message 38 "This driver and animal team are making good time down Water Street!"#message 40 "The bank teller is walking in the park."#message 42 "There is no one around."#message 43 "There is someone in the park but you're not close enough to see who it is."#message 44 "The officer says, \"It is a beautiful day for obeying the law. Isn't it sir?\""#message 45 "The man on the wagon can't hear you over the rumble of the wagon."#message 47 "The bank teller says, \"Come by the bank and check on your account someday.\""#message 50 "No one is close enough to hear you."#message 51 "There is a man driving a wagon down \"Water Street.\""#message 52 "There is no wagon here now."#message 53 "The warehouse is one of Brooklyn's proudest, and most recent, additions."#message 54 "There's no gold here, but don't give up until you find it!"#message 55 "The flowers add a nice aroma to the park."#message 56 "Along the Brooklyn shore you see many people and wagons! This may be your last look at these familiar scenes!!"#message 57 "You are on board the mighty \"Sea Farer!\""#message 58 "You're not strong enough!"#message 59 "Sea gulls are a common sight here."#message 60 "You have more sense than that! That water is cold!!"#message 61 "All there is worth reading here are the signs on the lawn."