[***********************************************************[[ rm.BankInterior[[ this is the inside of the bank, where Jerrod can withdraw[ his savings so he can afford a ticket to California[[***********************************************************[ **************************************[ LOCAL DEFINES[ **************************************#define oBankDoor                    o1#define oDesk1                       o2#define oDesk2                       o3#define oCashDrawer1                 o4#define oCashDrawer2                 o5#define oCashDrawer3                 o6#define oCashDrawer4                 o7#define oCashDrawer5                 o8#define oPoliceman                   o9#define oBankWorker1                o10#define oBankworker2                o11#define oMrQuail                    o12#define oBankTeller                 o13#define vAcctNum                   v220#define vTellerStatus              v221  #define TS_START              0  [ teller needs to choose a new place to stand  #define TS_CHOOSE_WND         1  [ teller needs to choose a window   #define TS_HAS_WND            2  [ teller has chosen a window  #define TS_OPENING            3  [ teller is opening cash drawer  #define TS_OPENED             4  [ cash drawer is opened  #define TS_CLOSING            5  [ teller is closing the cash drawer  #define TS_CLOSED             6  [ cash drawer is closed  #define TS_MOVE_WND           7  [ teller is moving to window to help Jerrod  #define TS_OFFER              8  [ teller offers to help Jerrod  #define TS_GET_MR_Q           9  [ teller is off to get Mr. Quail  #define TS_MOVE_Q_1          10  [ teller is moving to Mr. Quail, step 1  #define TS_MOVE_Q_2          11  [ teller is moving to Mr. Quail, step 2  #define TS_TELL_QUAIL        12  [ teller tells Mr. Quail that Jerrod needs help  #define TS_WAITING           13  [ teller is waiting while Mr. Quail talks to Jerrod  #define TS_RETURNING         14  [ teller is returning to the counter  #define TS_ASK_CASH          15  [ Jerrod asked for money  #define TS_MV_CASH           16  [ teller is moving to cash drawer 3  #define TS_OPEN_3            17  [ opening drawer 3 to get cash  #define TS_GET_3A            18  [ teller is getting first half of cash from drawer 3  #define TS_GOT_3A            19  [ teller has half the cash from drawer 3  #define TS_GET_3B            20  [ teller is getting rest of cash from drawer 3  #define TS_GOT_3B            21  [ teller has rest of the cash from drawer 3  #define TS_EMPTY_3           22  [ drawer 3 is empty  #define TS_OPEN_2            23  [ opening drawer 2 to get cash  #define TS_GET_2             24  [ teller is getting cash from drawer 2  #define TS_GOT_2             25  [ teller has half the cash from drawer 3  #define TS_CLOSE_3           26  [ teller is closing drawer 3  #define TS_CLOSE_2           27  [ teller is closing drawer 2#define vRndVal                    v222#define vBankWindow                v223#define vTimer                     v224#define vTellerHelp                v225#define vQuailHelp                 v226#define vQuailStatus               v227  #define QS_AT_DESK            0  [ Mr. Quail is at his desk, working  #define QS_ASKED              1  [ Mr. Quail has been asked to come help Jerrod  #define QS_STANDING           2  [ Mr. Quail is standing up getting his hat  #define QS_NEWVIEW            3  [ changing view to the normal Mr. Quail view  #define QS_MOVE1              4  [ Mr. Quail moves to first point  #define QS_MOVE2              5  [ Mr. Quail moves to teller window  #define QS_OFFER              6  [ Mr. Quail offers to help Jerrod  #define QS_RETURN             7  [ Mr. Quail is returning to his office  #define QS_MOVE3              8  [ Mr. Quail is moving to first return point  #define QS_MOVE4              9  [ Mr. Quail is moving back to his desk  #define QS_SITTING           10  [ Mr. Quail is sitting back down#define vRndWorker                 v228#define vWorker2Status             v229#define vWorker1Status             v230#define vPoliceX                   v231#define vPoliceY                   v232#define fToldClosed                f220#define fDoorOpen                  f221#define fDoorMoved                 f222#define fPoliceMoved               f223#define fTellerMoved               f224#define fWaitAtWindow              f225#define fDrawerMoved               f226#define fQuailMoved                f227#define fWorker2Moved              f228#define fWorker1Moved              f229#define fSndDone                   f230#define fSndDoor                   f231[ **************************************[ FIRST CYCLE ONLY[ **************************************if (isset(newRoom))  {  [ load, draw and discard current room picture  load.pic(currentRoom);  draw.pic(currentRoom);  discard.pic(currentRoom);    [ load views used in the room  load.view(vw.JerrodNY);    load.view(vw.BankIntArt);  load.view(vw.BankPeople);  load.view(vw.Policeman);  load.view(vw.BankTeller);  load.view(vw.MrQuail);    [ load the various sounds used in the room  load.sound(s.BadNews);  load.sound(s.AddToScore);  load.sound(s.UhOh);  load.sound(s.Effect1);  load.sound(s.Effect2);    [ bank door  animate.obj(oBankDoor);  set.view(oBankDoor, vw.BankIntArt);  set.loop(oBankDoor, 0);  [ if Jerrod is in the doorway,  if (posn(ego, 30, 100, 40, 110))    {    [ show the door open    set.cel(oBankDoor, 5);    }  else    {    [ otherwise, show the door shut    set.cel(oBankDoor, 0);    }  ignore.objs(oBankDoor);  ignore.blocks(oBankDoor);  position(oBankDoor, 90, 95);  draw(oBankDoor);  stop.update(oBankDoor);    [ add two desks to the room (these don't ever cycle, so  [ the programmers could have used add.to.pic for these)  animate.obj(oDesk1);  set.view(oDesk1, vw.BankIntArt);  set.loop(oDesk1, 1);  set.cel(oDesk1, 0);  ignore.objs(oDesk1);  ignore.blocks(oDesk1);  position(oDesk1, 113, 103);  draw(oDesk1);  stop.update(oDesk1);  [ second desk  animate.obj(oDesk2);  set.view(oDesk2, vw.BankIntArt);  set.loop(oDesk2, 1);  set.cel(oDesk2, 1);  ignore.objs(oDesk2);  ignore.blocks(oDesk2);  ignore.horizon(oDesk2);  set.priority(oDesk2, 13);  position(oDesk2, 11, 87);  draw(oDesk2);  stop.update(oDesk2);    [ add Mr. Quail's desk directly (not sure why they didn't  [ do this for the other two desks)  add.to.pic(vw.BankIntArt, 2, 0, 6, 165, 15, 15);    [ M. Quail  animate.obj(oMrQuail);  set.view(oMrQuail, vw.BankPeople);  [ he starts sitting at his desk  set.loop(oMrQuail, 2);  set.cel(oMrQuail, 0);  set.priority(oMrQuail, 15);  position(oMrQuail, 10, 161);  draw(oMrQuail);  stop.update(oMrQuail);    [ add lights directly to picture  add.to.pic(vw.BankIntArt, 2, 1, 9, 124, 8, 8);    [ there are five cash drawers  animate.obj(oCashDrawer1);  set.view(oCashDrawer1, vw.BankIntArt);  set.loop(oCashDrawer1, 3);  set.cel(oCashDrawer1, 0);  ignore.blocks(oCashDrawer1);  ignore.objs(oCashDrawer1);  set.priority(oCashDrawer1, 13);  position(oCashDrawer1, 72, 142);  draw(oCashDrawer1);  stop.update(oCashDrawer1);  [ drawer 2  animate.obj(oCashDrawer2);  set.view(oCashDrawer2, vw.BankIntArt);  set.loop(oCashDrawer2, 3);  set.cel(oCashDrawer2, 0);  ignore.blocks(oCashDrawer2);  ignore.objs(oCashDrawer2);  set.priority(oCashDrawer2, 13);  position(oCashDrawer2, 86, 142);  draw(oCashDrawer2);  stop.update(oCashDrawer2);  [ drawer 3  animate.obj(oCashDrawer3);  set.view(oCashDrawer3, vw.BankIntArt);  set.loop(oCashDrawer3, 3);  set.cel(oCashDrawer3, 0);  ignore.blocks(oCashDrawer3);  ignore.objs(oCashDrawer3);  set.priority(oCashDrawer3, 13);  position(oCashDrawer3, 100, 142);  draw(oCashDrawer3);  stop.update(oCashDrawer3);  [ drawer 4  animate.obj(oCashDrawer4);  set.view(oCashDrawer4, vw.BankIntArt);  set.loop(oCashDrawer4, 3);  set.cel(oCashDrawer4, 0);  ignore.blocks(oCashDrawer4);  ignore.objs(oCashDrawer4);  set.priority(oCashDrawer4, 13);  position(oCashDrawer4, 114, 142);  draw(oCashDrawer4);  stop.update(oCashDrawer4);  [ drawer 5  animate.obj(oCashDrawer5);  set.view(oCashDrawer5, vw.BankIntArt);  set.loop(oCashDrawer5, 3);  set.cel(oCashDrawer5, 0);  ignore.blocks(oCashDrawer5);  ignore.objs(oCashDrawer5);  set.priority(oCashDrawer5, 13);  position(oCashDrawer5, 128, 142);  draw(oCashDrawer5);  stop.update(oCashDrawer5);    [ a policeman guards the bank  animate.obj(oPoliceman);  set.view(oPoliceman, vw.Policeman);  position(oPoliceman, 50, 115);  draw(oPoliceman);  stop.update(oPoliceman);    [ two bank workers are here  animate.obj(oBankWorker1);  set.view(oBankWorker1, vw.BankPeople);  set.loop(oBankWorker1, 0);  position(oBankWorker1, 118, 103);  draw(oBankWorker1);  [ worker #2  animate.obj(oBankWorker2);  set.view(oBankWorker2, vw.BankPeople);  set.loop(oBankWorker2, 1);  position(oBankWorker2, 21, 71);  set.priority(oBankWorker2, 14);  draw(oBankWorker2);    [ and finally, the teller  animate.obj(oBankTeller);  set.view(oBankTeller, vw.BankTeller);  [ choose a random starting location  random(0, 8, vRndVal);  if (vRndVal == 0)    {    position(oBankTeller, 75, 155);    }  if (vRndVal == 1)    {    position(oBankTeller, 82, 155);    }  if (vRndVal == 2)    {    position(oBankTeller, 89, 155);    }  if (vRndVal == 3)    {    position(oBankTeller, 96, 155);    }  if (vRndVal == 4)    {    position(oBankTeller, 104, 155);    }  if (vRndVal == 5)    {    position(oBankTeller, 110, 155);    }  if (vRndVal == 6)    {    position(oBankTeller, 118, 155);    }  if (vRndVal == 7)    {    position(oBankTeller, 123, 155);    }  if (vRndVal == 8)    {    position(oBankTeller, 131, 155);    }  set(fTellerMoved);  [ teller begins scene ready to choose a window  vTellerStatus = TS_CHOOSE_WND;  stop.motion(oBankTeller);  stop.cycling(oBankTeller);  start.motion(oBankTeller);  set.loop(oBankTeller, 3);  draw(oBankTeller);    [ now add Jerrod to the scene in normal Brooklyn attire  animate.obj(ego);  set.view(ego, vw.JerrodNY);  [ if Jerrod came through main door  if (posn(ego, 30, 100, 40, 110))    {    [ door is open (not sure why they didn't include this    [ in the code block where the door object is animated;    [ it would make more sense)    set(fDoorOpen);    }  [ add Jerrod to screen  draw(ego);    [ now show the picture  show.pic();  }  [ **************************************[ EVERY CYCLE[ **************************************[ if teller is at beginning of his cycle, he needs to move[ to a new locationif (vTellerStatus == TS_START)  {  [ choose a location for the teller to walk to  random(0, 8, vRndVal);  [ now teller needs to choose a window to visit  vTellerStatus = TS_CHOOSE_WND;  start.cycling(oBankTeller);  [ move teller to chosen location  if (vRndVal == 0)    {    move.obj(oBankTeller, 75, 155, 1, fTellerMoved);    }  if (vRndVal == 1)    {    move.obj(oBankTeller, 82, 155, 1, fTellerMoved);    }  if (vRndVal == 2)    {    move.obj(oBankTeller, 89, 155, 1, fTellerMoved);    }  if (vRndVal == 3)    {    move.obj(oBankTeller, 96, 155, 1, fTellerMoved);    }  if (vRndVal == 4)    {    move.obj(oBankTeller, 104, 155, 1, fTellerMoved);    }  if (vRndVal == 5)    {    move.obj(oBankTeller, 110, 155, 1, fTellerMoved);    }  if (vRndVal == 6)    {    move.obj(oBankTeller, 118, 155, 1, fTellerMoved);    }  if (vRndVal == 7)    {    move.obj(oBankTeller, 123, 155, 1, fTellerMoved);    }  if (vRndVal == 8)    {    move.obj(oBankTeller, 131, 155, 1, fTellerMoved);    }  }  [ if at location, choose a windowif (vTellerStatus == TS_CHOOSE_WND && isset(fTellerMoved))  {  [ teller has chosen a window   vTellerStatus = TS_HAS_WND;  reset(fTellerMoved);  [ using stop.motion is actually not needed; the object  [ stops automatically after completion of mov.obj command  stop.motion(oBankTeller);  [ another unnecessary command; object's direction is  [ 'stopped' so starting motion doesn't do anything  start.motion(oBankTeller);  [ this IS necessary! teller needs to stop cycling now  [ that he's done moving  stop.cycling(oBankTeller);  [ have teller turn and face the counter  set.loop(oBankTeller, 3);  [ depending on his current location, choose a window near  [ to where he is and he will open/close that cash drawer  if (vRndVal == 0)    {    vBankWindow = 1;    }  if (vRndVal == 1)    {    random(1, 2, vBankWindow);    }  if (vRndVal == 2)    {    vBankWindow = 2;    }  if (vRndVal == 3)    {    random(2, 3, vBankWindow);    }  if (vRndVal == 4)    {    vBankWindow = 3;    }  if (vRndVal == 5)    {    random(3, 4, vBankWindow);    }  if (vRndVal == 6)    {    vBankWindow = 4;    }  if (vRndVal == 7)    {    random(4, 5, vBankWindow);    }  if (vRndVal == 8)    {    vBankWindow = 5;    }  }  [ if teller has chosen a windowif (vTellerStatus == TS_HAS_WND)  {  [ begin opening the chosen cash drawer  vTellerStatus = TS_OPENING;  if (vBankWindow == 1)    {    start.update(oCashDrawer1);    end.of.loop(oCashDrawer1, fDrawerMoved);    }  if (vBankWindow == 2)    {    start.update(oCashDrawer2);    end.of.loop(oCashDrawer2, fDrawerMoved);    }  if (vBankWindow == 3)    {    start.update(oCashDrawer3);    end.of.loop(oCashDrawer3, fDrawerMoved);    }  if (vBankWindow == 4)    {    start.update(oCashDrawer4);    end.of.loop(oCashDrawer4, fDrawerMoved);    }  if (vBankWindow == 5)    {    start.update(oCashDrawer5);    end.of.loop(oCashDrawer5, fDrawerMoved);    }  }  [ after opening the cash drawerif (vTellerStatus == TS_OPENING && isset(fDrawerMoved))  {  [ increment timer  ++vTimer;  [ after 25 cycles  if (vTimer == 25)    {    reset(fDrawerMoved);    vTimer = 0;    [ drawer is open    vTellerStatus = TS_OPENED;    }  }  [ after drawer is open and teller is doneif (vTellerStatus == TS_OPENED)  {  [ teller closes the cash drawer  vTellerStatus = TS_CLOSING;  if (vBankWindow == 1)    {    reverse.loop(oCashDrawer1, fDrawerMoved);    }  if (vBankWindow == 2)    {    reverse.loop(oCashDrawer2, fDrawerMoved);    }  if (vBankWindow == 3)    {    reverse.loop(oCashDrawer3, fDrawerMoved);    }  if (vBankWindow == 4)    {    reverse.loop(oCashDrawer4, fDrawerMoved);    }  if (vBankWindow == 5)    {    reverse.loop(oCashDrawer5, fDrawerMoved);    }  }  [ when done closingif (vTellerStatus == TS_CLOSING && isset(fDrawerMoved))  {  [ stopping update on objects that aren't   [ cycling saves a few CPU cycles  stop.update(oCashDrawer1);  stop.update(oCashDrawer2);  stop.update(oCashDrawer3);  stop.update(oCashDrawer4);  stop.update(oCashDrawer5);  [ drawer is now closed  vTellerStatus = TS_CLOSED;  }  [ after cash drawer is closedif (vTellerStatus == TS_CLOSED)  {  [ if Jerrod is waiting at window and Mr. Quail is at his  [ desk  if (isset(fWaitAtWindow) && vQuailStatus == QS_AT_DESK)    {    [ teller moves to the open window (where Jerrod is    [ waiting)    vTellerStatus = TS_MOVE_WND;    move.obj(oBankTeller, 96, 155, 1, fTellerMoved);    start.cycling(oBankTeller);    }  else    {    [ otherwise, teller moves to a new random location, and    [ continues opening/closing cash drawers    vTellerStatus = TS_START;    }  }  [ if teller is at the window where Jerrod is waiting if (vTellerStatus == TS_MOVE_WND && isset(fTellerMoved))  {  [ teller offers to help Jerrod  vTellerStatus = TS_OFFER;  reset(fTellerMoved);  stop.motion(oBankTeller);  start.motion(oBankTeller);  [ turn to face Jerrod  set.loop(oBankTeller, 3);  force.update(oBankTeller);  stop.cycling(oBankTeller);  print.at("The teller says, \"How may I help you?\"", 9, 21, 16);  }  [ if Jerrod has asked for Mr. Quailif (vTellerStatus == TS_GET_MR_Q)  {  [ teller leaves his window, to go to Mr. Quail's office  vTellerStatus = TS_MOVE_Q_1;  move.obj(oBankTeller, 60, 155, 1, fTellerMoved);  start.cycling(oBankTeller);  }[ after first leg of movmentif (vTellerStatus == TS_MOVE_Q_1 && isset(fTellerMoved))  {  [ second leg gets to Mr. Quail's office  vTellerStatus = TS_MOVE_Q_2;  reset(fTellerMoved);  move.obj(oBankTeller, 49, 140, 1, fTellerMoved);  }  [ when teller gets to Mr. Quail's officeif (vTellerStatus == TS_MOVE_Q_2 && isset(fTellerMoved))  {  [ teller informs Mr. Quail that Jerrod is waiting  vTellerStatus = TS_TELL_QUAIL;  reset(fTellerMoved);  stop.motion(oBankTeller);  start.motion(oBankTeller);  set.loop(oBankTeller, 1);  force.update(oBankTeller);  stop.cycling(oBankTeller);  print.at("\"Excuse me Mr. Quail, there is a gentleman here that would like to "           "see you.\"", 4, 14, 12);  print.at("\"Not again! Don't they realize I'm a busy man?\"", 10, 7, 12);  print.at("\"I'll be right there.\"", 10, 7, 12);  }[ after Mr. Quail is done, teller returns to his tasks at[ the counter if (vTellerStatus == TS_WAITING)  {  vTellerStatus = TS_RETURNING;  move.obj(oBankTeller, 60, 155, 1, fTellerMoved);  start.cycling(oBankTeller);  }[ when teller gets to return pointif (vTellerStatus == TS_RETURNING && isset(fTellerMoved))  {  [ teller starts over  vTellerStatus = TS_START;  reset(fTellerMoved);  }  [ if Jerrod asked for moneyif (vTellerStatus == TS_ASK_CASH)  {  [ teller moves to cash drawer 1  vTellerStatus = TS_MV_CASH;  stop.motion(ego);  move.obj(oBankTeller, 96, 155, 1, fTellerMoved);  start.cycling(oBankTeller);  }[ teller is at cash drawer ready to get Jerrod's moneyif (vTellerStatus == TS_MV_CASH && isset(fTellerMoved))  {  reset(fTellerMoved);  [ teller opens drawer #3 to get the cash  vTellerStatus = TS_OPEN_3;  stop.motion(oBankTeller);  start.motion(oBankTeller);  set.loop(oBankTeller, 3);  force.update(oBankTeller);  stop.cycling(oBankTeller);  start.update(oCashDrawer3);  end.of.loop(oCashDrawer3, fDrawerMoved);  }[ after teller opens cash drawer #3if (vTellerStatus == TS_OPEN_3 && isset(fDrawerMoved))  {  [ teller gets the cash from drawer #3  reset(fDrawerMoved);  vTellerStatus = TS_GET_3A;  vTimer = 0;  }[ while getting cashif (vTellerStatus == TS_GET_3A)  {  [ increment timer  ++vTimer;  [ after ten cycles  if (vTimer == 10)    {    [ teller is ready to get second half of cash    vTimer = 0;    vTellerStatus = TS_GOT_3A;    }  }[ if teller has the first half of Jerrod's cashif (vTellerStatus == TS_GOT_3A)  {  [ show partially empty drawer  set.loop(oCashDrawer3, 5);  set.cel(oCashDrawer3, 4);  force.update(oCashDrawer3);  [ then get rest  vTellerStatus = TS_GET_3B;  }[ while taking second half the cash if (vTellerStatus == TS_GET_3B)  {  [ increment timer  ++vTimer;  [ after ten cycles  if (vTimer == 10)    {    [ teller gets the rest of the cash    vTimer = 0;    vTellerStatus = TS_GOT_3B;    }  }[ after teller has all the cash  if (vTellerStatus == TS_GOT_3B)  {  [ cash drawer #3 is now empty  set.loop(oCashDrawer3, 4);  set.cel(oCashDrawer3, 4);  force.update(oCashDrawer3);  vTellerStatus = TS_EMPTY_3;  }[ if cash drawer #3 is emptyif (vTellerStatus == TS_EMPTY_3)  {  [ teller opens drawer #2  vTellerStatus = TS_OPEN_2;  start.update(oCashDrawer2);  end.of.loop(oCashDrawer2, fDrawerMoved);  }  [ after teller opens cash drawer #2if (vTellerStatus == TS_OPEN_2 && isset(fDrawerMoved))  {  [ increment timer  ++vTimer;  [ after ten cycles  if (vTimer == 10)    {    [ teller gets some cash from drawer #2    vTellerStatus = TS_GET_2;    vTimer = 0;    }  }[ after getting the cash from drawer 2if (vTellerStatus == TS_GET_2)  {  [ show the partially empty drawer  set.loop(oCashDrawer2, 5);  set.cel(oCashDrawer2, 4);  force.update(oCashDrawer2);  [ teller has all the cash for Jerrod  vTellerStatus = TS_GOT_2;  }[ if teller has all of Jerrod's cash  if (vTellerStatus == TS_GOT_2)  {  [ teller closes cash drawer #3  vTellerStatus = TS_CLOSE_3;  [ play score sound  sound(s.AddToScore, fSndDone);  [ give cash to Jerrod  print.at("\"Here is your $200.00, sir.\"", 10, 22, 12);  set(CashWithdrawn);  call(lgc.AdjustCash);  [ score 3 points  currentScore  += 3;  [ close cash drawer #3  reverse.loop(oCashDrawer3, fDrawerMoved);  }[ when cash drawer #3 is closed  if (vTellerStatus == TS_CLOSE_3 && isset(fDrawerMoved))  {  [ close cash drawer #2  vTellerStatus = TS_CLOSE_2;  reset(fDrawerMoved);  stop.update(oCashDrawer3);  reverse.loop(oCashDrawer2, fDrawerMoved);  }  [ when cash drawer #2 is closedif (vTellerStatus == TS_CLOSE_2 && isset(fDrawerMoved))  {  [ teller is all done; he goes back to initial status  [ where he will choos a random location to move toward  vTellerStatus = TS_START;  reset(fDrawerMoved);  [ cash drawer #2 is done cycling, so stop updating  stop.update(oCashDrawer2);  [ allow Jerrod to move again  start.motion(ego);  }[ if Jerrod is standing in front of the open teller window[ and isn't waiting yetif (posn(ego, 92, 135, 101, 139) && !isset(fWaitAtWindow))  {  [ indicate he's waiting for a teller  set(fWaitAtWindow);  }  [ if Jerrod is NOT in front of the open teller window, was[ waiting, and teller hasn't asked for Mr. Quail yetif (!posn(ego, 92, 135, 101, 139) &&     isset(fWaitAtWindow) &&     vTellerStatus < TS_GET_MR_Q)  {  [ Jerrod decides not to wait  reset(fWaitAtWindow);  [ teller goes back to his task  vTellerStatus = TS_START;  }  [ if in front of the other window (on the right) and teller[ hasn't told Jerrod it's closed yetif (posn(ego, 118, 135, 126, 139) && !isset(fToldClosed))  {  [ tell Jerrod that window's closed  print.at("The teller says, \"Excuse me, that window is closed.\"", 9, 19, 20);  set(fToldClosed);  }  [ if Jerrod leaves after being told window was closedif (!posn(ego, 118, 135, 126, 139) && isset(fToldClosed))  {  [ reset the flag, so that if he approaches the window  [ again, he will be told again  reset(fToldClosed);  }  [ if Jerrod has asked teller to withdraw moneyif (vTellerHelp == 1)  {  [ if Jerrod provided correct bank account number  if (vAcctNum == BankAccountNum)    {    [ if Jerrod is still in front of teller window    if (posn(ego, 95, 136, 99, 138))      {      [ if money was withdrawn previously      if (isset(CashWithdrawn))        {        [ teller is done helping        vTellerHelp = 10;        [ and tells Jerrod he has no money in the bank        print.at("\"Your account balance is $0.00.\"", 10, 22, 12);        }      [ if money is still in account      if (!isset(CashWithdrawn))        {        [ teller is done helping        vTellerHelp = 10;        [ teller starts sequence to get the money        print.at("\"Just one moment, I'll get your money for you.\"", 9, 22, 12);        vTellerStatus = TS_ASK_CASH;        }      }    else      {      [ if Jerrod is not by the window, he shouldn't be      [ saying his bank account number out loud      print("Be careful with that information. You never know who might be "            "listening!");      }    }  else    {    [ if Jerrod has provided an incorrect account number -        [ set teller help status to 'done'    vTellerHelp = 10;    sound(s.BadNews, fSndDone);    print.at("\"I'm sorry, there is no account at this bank with that number.\"", 9, 22, 16);    print.at("\"I am not authorized to look up your account number.\"", 9, 22, 16);    }  }[ if Jerrod has asked Mr. Quail to get his moneyif (vQuailHelp == 1)  {  [ if Jerrod provided correct account number  if (vAcctNum == BankAccountNum)    {    [ if Jerrod is still at the teller window    if (posn(ego, 95, 136, 99, 138))      {      [ if money is still in the account      if (!isset(CashWithdrawn))        {        [ set Quail help status to 'done'        vQuailHelp = 0;        [ and tell Jerrod the balance        print.at("\"The balance in your account is $200.00.\"", 10, 22, 12);        }      [ if cash was previously withdrawn      if (isset(CashWithdrawn))        {        vQuailHelp = 0;        print.at("\"Your account balance is $0.00.\"", 10, 22, 12);        }      }    else      {      [ not at the window; who is Jerrod talking to?      print("Be careful with that information. You never know who might be "            "listening!");      }    }  else    {    [ if Jerrod has provided an incorrect account number -        [ set Quail help status to 'done'    vQuailHelp = 0;    sound(s.BadNews, fSndDone);    print.at("\"I'm sorry, there is no account at this bank with that number.\"", 9, 22, 12);    [ tell Jerrod that he can't look up the number (even     [ though he actually can! this response should have    [ been different than what the teller says when an     [ incorrect account number is given)    print.at("\"I am not authorized to look up your account number.\"", 9, 22, 12);    }  }[ after teller informs Mr. Quail that Jerrod needs help,if (vTellerStatus == TS_TELL_QUAIL)  {  [ teller will wait while Mr. Quail deals with Jerrod  vTellerStatus = TS_WAITING;  vQuailStatus = QS_ASKED;  }  [ if Mr Quail has been asked to come overif (vQuailStatus == QS_ASKED)  {  [ Mr. Quail stands up and getss his hat  vQuailStatus = QS_STANDING;  [ start updating the view  start.update(oMrQuail);  end.of.loop(oMrQuail, fQuailMoved);  }[ after standing up  if (vQuailStatus == QS_STANDING && isset(fQuailMoved))  {  [ change to normal view of Mr. Quail  vQuailStatus = QS_NEWVIEW;  reset(fQuailMoved);  set.view(oMrQuail, vw.MrQuail);  [ adjust position of oMrQuail to account for different  [ size/shape of the walking view  TmpX = 4;  TmpY = -3; [ 253;  release.priority(oMrQuail);  reposition(oMrQuail, TmpX, TmpY);  }[ after changing viewif (vQuailStatus == QS_NEWVIEW)  {  [ Mr. Quail moves to first point  vQuailStatus = QS_MOVE1;  move.obj(oMrQuail, 40, 140, 1, fQuailMoved);  start.cycling(oMrQuail);  }  [ after Mr. Quail moves to first pointif (vQuailStatus == QS_MOVE1 && isset(fQuailMoved))  {  [ Mr. Quail moves to teller window  vQuailStatus = QS_MOVE2;  reset(fQuailMoved);  move.obj(oMrQuail, 55, 140, 1, fQuailMoved);  }[ after getting to windowif (vQuailStatus == QS_MOVE2 && isset(fQuailMoved))  {  [ offer to help  vQuailStatus = QS_OFFER;  reset(fQuailMoved);  stop.cycling(oMrQuail);  print.at("\"Well, hello Jerrod! What can I help you with today?\"", 7, 14, 12);  }  [ if Jerrod leaves window while Mr. Quail has offered to helpif (!posn(ego, 80, 94, 110, 140) && vQuailStatus == QS_OFFER)  {  [ change status to returning to desk  vQuailStatus = QS_RETURN;  }  [ if Mr. Quail is returningif (vQuailStatus == QS_RETURN)  {  [ he moves to first point on way back  vQuailStatus = QS_MOVE3;  move.obj(oMrQuail, 35, 140, 1, fQuailMoved);  start.cycling(oMrQuail);  }  [ after reaching first return pointif (vQuailStatus == QS_MOVE3 && isset(fQuailMoved))  {  [ move back to desk  vQuailStatus = QS_MOVE4;  reset(fQuailMoved);  move.obj(oMrQuail, 14, 158, 1, fQuailMoved);  }  [ after getting back to his deskif (vQuailStatus == 9 && isset(fQuailMoved))  {  [ Mr. Quail begins sitting down  vQuailStatus = QS_SITTING;  reset(fQuailMoved);  [ change back to the 'sitting' view  set.view(oMrQuail, vw.BankPeople);  set.loop(oMrQuail, 2);  [ start with him standing  set.cel(oMrQuail, 5);  stop.cycling(oMrQuail);  set.priority(oMrQuail, 15);  [ adjust position to match the sitting view with  [ the standing view  TmpX = -4; [ 252;  TmpY = 3;  reposition(oMrQuail, TmpX, TmpY);  [ and run the loop backwards to make him sit  reverse.loop(oMrQuail, fQuailMoved);  }  [ if finished sitting downif (vQuailStatus == QS_SITTING && isset(fQuailMoved))  {  [ go back to work  vQuailStatus = QS_AT_DESK;  reset(fQuailMoved);  stop.update(oMrQuail);  }  [ worker #1 does his work on a random cyclerandom(40, 60, vRndWorker);[ one in 20 chance of starting worker cycle (note that this[ CAN get interrupted since this random number check occurs[ in every cycle)if (vRndWorker == 50)  {  [ start cycling worker #1  vWorker1Status = 1;  [ resetting this doesn't do anything; it's never used  vRndWorker = 91;  }  [ if worker #1 needs cyclingif (vWorker1Status == 1)  {  [ start cycling worker #1  start.update(oBankWorker1);  end.of.loop(oBankWorker1, fWorker1Moved);  vWorker1Status = 2;  }[ after worker #1 reaches end of loopif (vWorker1Status == 2 && isset(fWorker1Moved))  {  [ reverse the cycle  vWorker1Status = 3;  reset(fWorker1Moved);  reverse.loop(oBankWorker1, fWorker1Moved);  }  [ after reversing if (vWorker1Status == 3 && isset(fWorker1Moved))  {  [ reset worker #1 status  vWorker1Status = 4;  reset(fWorker1Moved);  }[ worker #2 does his work on a random cyclerandom(20, 40, vRndWorker);[ one in 20 chance of starting worker cycle (note that this[ CAN get interrupted since this random number check occurs[ in every cycle)if (vRndWorker == 30)  {  [ start cycling worker #2  vWorker2Status = 1;  [ changing this doesn't do anything; it's never used   vRndWorker = 91;  }  [if worker #2 needs cyclingif (vWorker2Status == 1)  {  [ start cycling worker two  start.update(oBankWorker2);  end.of.loop(oBankWorker2, fWorker2Moved);  vWorker2Status = 2;  }  [ when worker #2 reaches end of loopif (vWorker2Status == 2 && isset(fWorker2Moved))  {  [ reverse the cycle  vWorker2Status = 3;  reset(fWorker2Moved);  reverse.loop(oBankWorker2, fWorker2Moved);  }[ after reversingif (vWorker2Status == 3 && isset(fWorker2Moved))  {  [ reset worker #2 status  vWorker2Status = 4;  reset(fWorker2Moved);  }  [ if Jerrod walks to the door and the door is closedif (isset(egoHitSpecial) && !isset(fDoorOpen))  {  [ play door-open sound  sound(s.Effect1, fSndDoor);  [ allow door to update  start.update(oBankDoor);  [ open the door  end.of.loop(oBankDoor, fDoorMoved);  set(fDoorOpen);  [ if Jerrod is within range of the exit spot  if (posn(ego, 87, 85, 101, 97))    {    [ also stop updating Jerrod    stop.update(ego);    }  }  [ if Jerrod is not at the door, and door is openif (!isset(egoHitSpecial) && isset(fDoorOpen))  {  [ close the door  start.update(oBankDoor);  reset(fDoorOpen);  reverse.loop(oBankDoor, fDoorMoved);  }  [ when door is done movingif (isset(fDoorMoved))  {  [ reset the flag  reset(fDoorMoved);  [ done updating the door  stop.update(oBankDoor);  [ allow Jerrod to continue moving  start.update(ego);  start.cycling(ego);  [ if door is now closed  if (!isset(fDoorOpen))    {    [ play door-closed sound    sound(s.Effect2, fSndDoor);    }  }  [ if standing at the door if (posn(ego, 90, 83, 98, 87))  {  [ adjust priority so door and Jerrod will display  [ correctly  set.priority(ego, 7);  }  [ if ego moved away from the doorif (posn(ego, 89, 82, 99, 88) && !posn(ego, 90, 83, 98, 87))  {  [ restore automatic priority setting  release.priority(ego);  }  [ if policeman moved because of a threat made by Jerrodif (isset(fPoliceMoved))  {  reset(fPoliceMoved);  stop.update(oPoliceman);  print.at(" \"Go ahead.\nMake my day!\"", 6, 12, 12);  }  [ **************************************[ CHECK FOR AN EXIT CONDITION[ **************************************if (posn(ego, 142, 115, 142, 131))  {  position(ego, 29, 135);  set.loop(ego, 0);  new.room(rm.Bank); [ ##LE001##  }if ((posn(ego, 43, 71, 128, 71) ||     posn(ego, 127, 72, 127, 84)))  {  position(ego, 53, 94);  set.loop(ego, 0);  egoDir = STOPPED;  new.room(rm.Bank); [ ##LE002##  }if (posn(ego, 44, 72, 44, 84))  {  new.room(rm.WaterSt_Left); [ ##LE003##  }  [ **************************************[ PROCESS PLAYER INPUT[ **************************************[ if player hasn't provided input no need to do said testsif (!isset(haveInput))  {  goto(Done);  }[ withdraw moneyif ((said("withdraw", "saving") ||     said("withdraw", "bucks") ||     said("acquire", "saving") ||     said("acquire", "bucks") ||     said("make", "withdraw") ||     said("withdraw") ||     said("withdraw") ||     said("contribute", "me", "bucks") ||     said("ask", "bucks")))  {  [ if at the teller window  if (posn(ego, 95, 136, 99, 138))    {    [ if neither the teller nor Mr. Quail is offering to help    if (vTellerStatus != TS_OFFER && vQuailStatus != QS_OFFER)      {      print("The teller is not at the window.");      }    [ if the teller is waiting for Jerrod to speak    if (vTellerStatus == TS_OFFER)      {      [ ask for the account number      vTellerHelp = 1;      print.at("\"Okay Jerrod. What is your account number?\"", 9, 22, 16);      get.num("Account number: ", vAcctNum);      }          [ if Mr. Quail is waiting for Jerrod to speak    if (vQuailStatus == QS_OFFER)      {      [ if Jerrod already has his money      if (isset(CashWithdrawn))        {        [ Mr. Quail tells Jerrod the money is gone        print.at("\"Your account balance is $0.00.\"", 8, 14, 12);        [ and then starts his return sequence        vQuailStatus = QS_RETURN;        }      else        {        [ Mr. Quail tells Jerrod his account number, and        [ asks the clerk to get the money        print.at("Mr. Quail says, \"Wesley, would you please get Jerrod his "                 "savings? His account number is %v48. Thank you!\"", 4, 14, 14);        print.at("\"Certainly, Mr. Quail. I'll do it right away!\"", 10, 22, 12);        vTellerStatus = TS_ASK_CASH;        [ Mr. Quail returns to his desk        vQuailStatus = QS_RETURN;        }      }    }  else    {    [ Jerrod is not at the teller window; still OK to talk    [ with Mr. Quail    if (vQuailStatus == QS_OFFER)      {      [ if Jerrod already has his money      if (isset(CashWithdrawn))        {        [ Mr. Quail tells Jerrod the money is gone        print.at("\"Your account balance is $0.00.\"", 8, 14, 12);        [ and then starts his return sequence        vQuailStatus = QS_RETURN;        }      else        {        print.at("Mr. Quail says, \"Wesley, would you please get Jerrod his "                 "savings? His account number is %v48. Thank you!\"", 4, 14, 12);        print.at("\"Certainly, Mr. Quail. I'll do it right away!\"", 10, 22, 12);        vTellerStatus = TS_ASK_CASH;        [ Mr. Quail returns to his desk        vQuailStatus = QS_RETURN;        }      }    else      [ otherwise, assume Jerrod is talking to teller      {      print("The teller says, \"I'll help you at the window.\"");      }    }  }  [ give me my account number/get account numberif ((said("contribute", "account", "number") ||     said("contribute", "me", "account", "number") ||     said("account", "number") ||     said("examine", "account", "number") ||     said("examine", "up", "account", "number") ||     said("acquire", "account", "number") ||     said("acquire", "me", "account", "number") ||     said("check", "account", "number") ||     said("ask", "account", "number")))  {  [ if Jerrod is at the window  if (posn(ego, 95, 136, 99, 138))    {    [ if neither teller nor Mr. Quail is offering to help    if (vTellerStatus != TS_OFFER && vQuailStatus != QS_OFFER)      {      print("The teller is not at the window.");      }    [ if teller is helping    if (vTellerStatus == TS_OFFER)      {      print.at("\"I am not authorized to look up your account number.\"", 9, 22, 12);      }    [ if Mr. Quail is helping    if (vQuailStatus == QS_OFFER)      {      print.at("There is a better way to do this, Jerrod! But I'll tell you "               "this time. Your account number is %v48.", 6, 12, 20);      vQuailStatus = QS_RETURN;      }    }  else    {    [ if not at window, still OK to talk to Mr. Quail    if (vQuailStatus == QS_OFFER)      {      print.at("There is a better way to do this, Jerrod! But I'll tell you "               "this time. Your account number is %v48.", 6, 12, 20);      vQuailStatus = QS_RETURN;      }    else      {      [ otherwise, assume Jerrod is talking to teller      print("The teller says, \"I'll help you at the window.\"");      }    }  }  [ deposit cashif ((said("deposit") ||     said("deposit", "bucks") ||     said("make", "deposit") ||     said("deposit", "coin") ||     said("deposit", "gold", "coin")))  {  [ if Jerrod is by the teller window  if (posn(ego, 95, 136, 99, 138))    {    [ if talking to teller    if (vTellerStatus == TS_OFFER)      {      print("\"Sorry, Jerrod! We are all out of deposit forms. You won't be "            "able to do that!\"");      }    else      {      print("The teller is not at the window.");      }    }  else    {    [ if not at window, tell Jerrod to come on over    print("The teller says, \"I'll help you at the window.\"");    }  }  [ money/cashif (said("bucks"))  {  print("What about money?");  }  [ check balance/how much money in my accountif ((said("check", "balance") ||     said("check", "account") ||     said("how", "much") ||     said("how", "much", "bucks") ||     said("how", "much", "bucks", "account") ||     said("how", "much", "bucks", "in", "account")))  {  [ if Jerrod is by the teller window  if (posn(ego, 95, 136, 99, 138))    {    [ if neither teller nor Mr. Quail is offering to help    if (vTellerStatus != TS_OFFER &&  vQuailStatus != QS_OFFER)      {      print("The teller is not at the window.");      }    [ if teller is offering to help    if (vTellerStatus == TS_OFFER)      {      [ ask for account number      vQuailHelp = 1;      print.at("\"Okay Jerrod. What is your account number?\"", 9, 22, 12);      get.num("Account number: ", vAcctNum);      }    [ if Mr. Quail is offering to help    if (vQuailStatus == QS_OFFER)      {      [ Mr. Quail doesn't have Jerrod's account balance      print.at("Mr. Quail says, \"Sorry Jerrod, I can't help you with that, the "               "teller will have to do that.\"", 4, 14, 12);      [ then return to desk      vQuailStatus = QS_RETURN;      }    }  else    {    [ if not at teller window, still OK to talk with Mr. Quail    if (vQuailStatus == QS_OFFER)      {        [ Mr. Quail doesn't have Jerrod's account balance        print.at("Mr. Quail says, \"Sorry Jerrod, I can't help you with that, the "               "teller will have to do that.\"", 4, 14, 12);      [ then return to desk      vQuailStatus = QS_RETURN;      }    else      {      [ otherwise, assume talking to teller      print("The teller says, \"I'll help you at the window.\"");      }    }  }  [ talk boss/ask bossif ((said("speak", "boss") ||     said("speak", "jeff") ||     said("speak", "bank", "boss") ||     said("acquire", "boss") ||     said("acquire", "jeff") ||     said("acquire", "bank", "boss") ||     said("ask", "boss") ||     said("ask", "bank", "boss")))  {  [ if Jerrod is at the teller window  if (posn(ego, 95, 136, 99, 138))    {    [ if neither teller nor Mr. Quail is offering to help    if (vTellerStatus != TS_OFFER && vQuailStatus != QS_OFFER)      {      print("The teller is not at the window.");      }          [ if speaking with teller    if (vTellerStatus == TS_OFFER)      {      [ Jerrod asked to speak with Mr. Quail      print.at("\"Just a moment, I'll check to see if he's free to see you.\"", 9, 22, 12);      vTellerStatus = TS_GET_MR_Q;      }    [ if speaking with Mr. Quail    if (vQuailStatus == QS_OFFER)      {      print("You are already doing that!");      }    }  else    {    [ not at teller window, still OK to talk with Mr. Quail    if (vQuailStatus == QS_OFFER)      {      print("You are already doing that!");      }    else      {      [ nobody has anything to say to Jerrod      print("No one around here is listening to you.");      }    }  }  [ rob bankif (said("hold up", "bank"))  {  print("My, oh my, aren't we creative? The president of this bank made the "        "last person who tried that very sorry!");  }  [ kill teller/kill manif ((said("kill") ||     said("kill", "boy") ||     said("kill", "boy") ||     said("kill", "banker") ||     said("kill", "teller") ||     said("kill", "clerk")))  {  [ send the policeman over  start.update(oPoliceman);  move.obj(oPoliceman, 67, 115, 1, fPoliceMoved);  }  [ be politeif ((said("thank", "you") ||     said("thank")))  {  print("You're welcome!");  }  [ talk {anyone}if ((said("speak", "boy") ||     said("speak", "boy") ||     said("speak", "banker") ||     said("speak") ||     said("speak", "teller") ||     said("speak", "clerk") ||     said("speak", "bank", "clerk")))  {  [ if at the teller window  if (posn(ego, 95, 86, 143, 121))    {    print("This is the bank clerk. He looks extremely busy! I wouldn't bother "          "him.");    }  [ if near the working clerk  if (posn(ego, 78, 122, 143, 139))    {    print("Welcome to Brooklyn Bank!");    }  [ if not near either of them,  if (!posn(ego, 95, 86, 143, 121) && !posn(ego, 78, 122, 143, 139))    {    print("Neither the teller nor the bank clerk can hear you from here.");    }  }  [ give statement to teller/show statement to tellerif ((said("contribute", "bank statement") ||     said("contribute", "bank", "bank statement") ||     said("contribute", "boy", "bank statement") ||     said("contribute", "boy", "bank", "bank statement") ||     said("contribute", "teller", "bank statement") ||     said("contribute", "teller", "bank", "bank statement") ||     said("show", "bank statement") ||     said("show", "bank", "bank statement") ||     said("show", "boy", "bank statement") ||     said("show", "boy", "bank", "bank statement") ||     said("show", "teller", "bank statement") ||     said("show", "teller", "bank", "bank statement")))  {  [ if Jerrod has his bank statement  if (has("Bank statement"))    {    print("That won't help. Tell the teller what you want to do.");    }  else    {    print("You don't even have a statement.");    }  }  [ look man/look tellerif ((said("examine", "boy") ||     said("examine", "boy") ||     said("examine", "banker") ||     said("examine", "teller") ||     said("examine", "clerk")))  {  print("You see people busily at work within the bank.");  }  [ look around/lookif ((said("examine", "around") ||     said("examine", "bank") ||     said("examine")))  {  print("This is the impressive interior of the Brooklyn Bank. There is "        "activity everywhere you look.");  }  [ look floorif (said("examine", "deck"))  {  print("This is a beautiful marble floor.");  }  [ look policemanif (said("examine", "cop"))  {  [ get policeman's location  get.posn(oPoliceman, vPoliceX, vPoliceY);  [ if policeman is below row 55  if (vPoliceX > 55)    {    print("You shouldn't be surprised that there is a %w2 around, considering "          "all the money that is around here!!");    }  else    {    print("There is no %w2 in sight.");    }  }  [ look doorif (said("examine", "door"))  {  print("It is just a normal bank door.");  }  [ open doorif (said("open", "door"))  {  print("Just walk up to it.");  }  [ look windowsif (said("examine", "glass"))  {  print("These windows are squeaky clean!");  }  [ get a loanif ((said("acquire", "loan") ||     said("ask", "loan") ||     said("apply", "loan") ||     said("borrow", "bucks") ||     said("loan")))  {  print("Sorry, they won't loan you any money here.");  }  [ get statement/ask about statementif ((said("acquire", "bank statement") ||     said("acquire", "bank statement", "boy") ||     said("acquire", "bank statement", "teller") ||     said("acquire", "bank", "bank statement") ||     said("acquire", "bank", "bank statement", "boy") ||     said("acquire", "bank", "bank statement", "teller") ||     said("ask", "bank statement") ||     said("ask", "bank", "bank statement") ||     said("ask", "boy", "bank statement") ||     said("ask", "boy", "bank", "bank statement")))  {  [ if Jerrod already has his bank statement  if (has("Bank statement"))    {    print("You already have your bank statement.");    }  else    {    print("Statements are not stored here. They are delivered to the account "          "holder's home address.");    }  }  [ look statement (notice how they use two different ways to[ check for this phrase; since the WORDS.TOK file has[ entries for "bank", "statement" and "bank statement", [ (with the last two being in the same word group), AGI's[ word parser will never separate "bank statement" into[ "bank" and "statement"; it will always find the longest[ matching word; so the test 'said("examine", "bank",[ "bank statement"' will never match; the parser will always[ match 'said("examine", "bank statement"' insteadif ((said("examine", "bank", "bank statement") ||     said("examine", "bank statement")))  {  [ if Jerrod doesn't have his bank statement  if (!has("Bank statement"))    {    print("Statements are not stored here. They are delivered to the account "          "holder's home address.");    }  }  [ look drawer/open drawerif ((said("examine", "drawer") ||     said("open", "drawer") ||     said("examine", "in", "drawer")))  {  print("Only the teller has access to the drawers.");  }  [ look stairsif (said("examine", "stair"))  {  print("It is just a normal flight of stairs.");  }  [ look bossif (said("examine", "boss"))  {  print("The bank president is Mr. Quail, a longtime friend of the family.");  }  [ look wallif (said("examine", "wall"))  {  print("They are just typical bank walls.");  }  Done:return();[ **************************************[ MESSAGES[ **************************************#message 1 "The teller says, \"How may I help you?\""#message 2 "The teller says, \"Excuse me, that window is closed.\""#message 3 "\"Okay Jerrod. What is your account number?\""#message 4 "The teller says, \"I'll help you at the window.\""#message 5 "\"Just one moment, I'll get your money for you.\""#message 6 "\"Your account balance is $0.00.\""#message 7 "\"The balance in your account is $200.00.\""#message 8 "Be careful with that information. You never know who might be listening!"#message 9 "Account number: "#message 10 "\"I'm sorry, there is no account at this bank with that number.\""#message 11 "\"Just a moment, I'll check to see if he's free to see you.\""#message 13 "No one around here is listening to you."#message 14 "My, oh my, aren't we creative? The president of this bank made the last person who tried that very sorry!"#message 15 " \"Go ahead.\nMake my day!\""#message 16 "You're welcome!"#message 17 "This is the bank clerk. He looks extremely busy! I wouldn't bother him."#message 18 "Welcome to Brooklyn Bank!"#message 19 "Neither the teller nor the bank clerk can hear you from here."#message 23 "\"Excuse me Mr. Quail, there is a gentleman here that would like to see you.\""#message 24 "\"Not again! Don't they realize I'm a busy man?\""#message 25 "\"I'll be right there.\""#message 26 "\"Well, hello Jerrod! What can I help you with today?\""#message 27 "The teller is not at the window."#message 28 "Mr. Quail says, \"Wesley, would you please get Jerrod his savings? His account number is %v48. Thank you!\""#message 29 "You are already doing that!"#message 30 "\"Certainly, Mr. Quail. I'll do it right away!\""#message 31 "\"Here is your $200.00, sir.\""#message 32 "Mr. Quail says, \"Sorry Jerrod, I can't help you with that, the teller will have to do that.\""#message 33 "This is the impressive interior of the Brooklyn Bank. There is activity everywhere you look."#message 34 "This is a beautiful marble floor."#message 35 "There is no %w2 in sight."#message 36 "You shouldn't be surprised that there is a %w2 around, considering all the money that is around here!!"#message 37 "It is just a normal bank door."#message 38 "Just walk up to it."#message 39 "These windows are squeaky clean!"#message 40 "What about money?"#message 41 "That won't help. Tell the teller what you want to do."#message 42 "You don't even have a statement."#message 43 "Sorry, they won't loan you any money here."#message 44 "Statements are not stored here. They are delivered to the account holder's home address."#message 45 "Only the teller has access to the drawers."#message 46 "You already have your bank statement."#message 47 "It is just a normal flight of stairs."#message 48 "The bank president is Mr. Quail, a longtime friend of the family."#message 49 "\"Sorry, Jerrod! We are all out of deposit forms. You won't be able to do that!\""#message 50 "They are just typical bank walls."#message 51 "You see people busily at work within the bank."#message 52 "\"I am not authorized to look up your account number.\""#message 53 "There is a better way to do this, Jerrod! But I'll tell you this time. Your account number is %v48."