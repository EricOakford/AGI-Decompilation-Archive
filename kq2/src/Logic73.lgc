#define fall.distance   v33#define climbing.ladder f31#define hit.ground  f32#define ego.stunned f34#define fall.sound.done f35if (newRoom)  {  load.sound(Sound23);  load.sound(Sound29);  load.view(View102);  load.view(View8);  load.view(View91);  load.view(View109);  load.pic(currentRoom);  draw.pic(currentRoom);  if (previousRoom == 72)    {    if (ego.fell)      {      set.priority(ego, 15);      reset(climbing.ladder);      sound(Sound29, fall.sound.done);      work.3 = 25;      position.v(ego, v74, work.3);      work.3 = 130;      set(keep.cycling);      work.5 = 5;      move.obj.v(ego, v74, work.3, work.5, hit.ground);      program.control();      }    else      {      set(climbing.ladder);      set.priority(ego, 14);      position(ego, 95, 40);      ignore.blocks(ego);      work = 2;      step.size(ego, work);      set.view(ego, View102);      }    }  else    {    reset(climbing.ladder);    }  reset(hit.ground);  draw(ego);  show.pic();  }if (egoHitSpecial)  {  reset(egoHitSpecial);  if (isset(climbing.ladder))    {    if (posn(ego, 95, 115, 112, 123))      {      set.view(ego, View0);      work = 1;      cycle.time(ego, work);      step.size(ego, work);      reposition.to(ego, 103, 130);      reset(climbing.ladder);      observe.blocks(ego);      release.priority(ego);      }    else      {      program.control();      set(keep.cycling);      ignore.blocks(ego);      set.view(ego, View8);      work = 2;      cycle.time(ego, work);      work = 3;      step.size(ego, work);      reset(climbing.ladder);      set(ego.fell);      sound(Sound29, fall.sound.done);      get.posn(ego, work, fall.x);      fall.distance = fall.x;      fall.x = 130;      work.5 = 5;      move.obj.v(ego, work, fall.x, work.5, hit.ground);      }    }  else    {    if (!ego.fell)      {      if (posn(ego, 95, 115, 112, 123) &&           egoDir == UP)        {        work = 2;        step.size(ego, work);        set.view(ego, View102);        work = 1;        cycle.time(ego, work);        work = 2;        step.size(ego, work);        set(climbing.ladder);        reposition.to(ego, 98, 110);        set.priority(ego, 14);        ignore.blocks(ego);        }      }    }  }if (hit.ground)  {  stop.sound();  reset(hit.ground);  reset(ego.fell);  if (fall.distance < 60)    {    set.view(ego, View91);    set(certain.death);    }  else    {    set.view(ego, View109);    work = 2;    cycle.time(ego, work);    set(keep.cycling);    timer.1 = 50;    set(ego.stunned);    }  }if (ego.stunned && timer.1 > 0)  {  reset(ego.stunned);  sound(Sound23, ego.stunned);  }--timer.1;if (timer.1 > 0)  {  program.control();  }if (timer.1 == 1)  {  reset(ego.fell);  observe.blocks(ego);  release.priority(ego);  reset(climbing.ladder);  reset(keep.cycling);  set.view(ego, View0);  work = 1;  cycle.time(ego, work);  step.size(ego, work);  player.control();  }if ((said("check out", "ladder") ||     said("look up")))  {  print("The ladder goes up through a hole in the ground. You cannot see the "        "top of the ladder.");  }if (!haveMatch &&     (said("check out", "antique shop") ||     said("check out", "swim") ||     said("check out")))  {  print("You are in a musty underground passageway. There is a narrow ladder "        "leading up through a hole in the ground.");  }if (!climbing.ladder &&     said("get on", "ladder"))  {  print("Just go toward the ladder.");  }if (edgeEgoHit == RIGHT_EDGE)  {  new.room(Logic74); [ ##LE001##  }if (edgeEgoHit == TOP_EDGE)  {  observe.blocks(ego);  release.priority(ego);  set.view(ego, View0);  new.room(Logic72); [ ##LE002##  }return();[ Messages#message 1 "You are in a musty underground passageway. There is a narrow ladder leading up through a hole in the ground."#message 2 "The ladder goes up through a hole in the ground. You cannot see the top of the ladder."#message 3 "Just go toward the ladder."